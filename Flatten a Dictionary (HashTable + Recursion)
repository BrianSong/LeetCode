Flatten a Dictionary
A dictionary is a type of data structure that is supported natively in all major interpreted languages 
such as JavaScript, Python, Ruby and PHP, where it’s known as an Object, Dictionary, Hash and Array, respectively. 
In simple terms, a dictionary is a collection of unique keys and their values. 
The values can typically be of any primitive type (i.e an integer, boolean, double, string etc) 
or other dictionaries (dictionaries can be nested). However, for this exercise assume that values are either an integer, 
a string or another dictionary.

Given a dictionary dict, write a function flattenDictionary that returns a flattened version of it .

If you’re using a compiled language such Java, C++, C#, Swift and Go, you may want to use a Map/Dictionary/Hash Table 
that maps strings (keys) to a generic type (e.g. Object in Java, AnyObject in Swift etc.) to allow nested dictionaries.

If a certain key is empty, it should be excluded from the output (see e in the example below).

Example:

input:  dict = {
            "Key1" : "1",
            "Key2" : {
                "a" : "2",
                "b" : "3",
                "c" : {
                    "d" : "3",
                    "e" : {
                        "" : "1"
                    }
                }
            }
        }

output: {
            "Key1" : "1",
            "Key2.a" : "2",
            "Key2.b" : "3",
            "Key2.c.d" : "3",
            "Key2.c.e" : "1"
        }
Important: when you concatenate keys, make sure to add the dot character between them. 
For instance concatenating Key2, c and d the result key would be Key2.c.d.

Constraints:

[time limit] 5000ms
[input] Dictionary dict
[output] Dictionary


Solution : -------------------------------------------- HashTable + recursion: my own
------------------------------------------------------- O(N^2) T: two for loops and O(N) S 
def flatten_dictionary(dictionary):
  # Check the edge cases
  if not dictionary:
    return None
  for key, value in dictionary.items():
    # If the value is dict
    if type(value) is dict:
      new_dict = flatten_dictionary(value)
      for new_key, new_value in new_dict.items():
        # Check the special cases
        dictionary[(".".join([key, new_key])).strip('.')] = new_value   
      if key != (".".join([key, new_key])).strip('.'):
        del dictionary[key]
    else:
      continue
  return dictionary
  
  
  
Better Solution: ------------------------------------- O(n) T and S since We visit every key in dictionary only once
def flatten_dictionary(dictionary):
  new_dict = {}
  helper("", dictionary, new_dict)
  return new_dict

def helper(initial_key, dictionary, new_dict):
  for key, value in dictionary.items():
    if type(value) is dict:
      if initial_key == '':
        helper(key, value, new_dict)
      else:
        if key == '':
          helper(initial_key, value, new_dict)
        else:
          helper(initial_key + '.' + key, value, new_dict)
    else:
      if initial_key == '':
        new_dict[key] = value
      else:
        if key == '':
          new_dict[initial_key] = value
        else:
          new_dict[initial_key + '.' + key] = value
