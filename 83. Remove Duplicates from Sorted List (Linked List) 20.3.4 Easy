Given a sorted linked list, delete all duplicates such that each element appear only once.

Example 1:

Input: 1->1->2
Output: 1->2
Example 2:

Input: 1->1->2->3->3
Output: 1->2->3

Solution: --------------------------------------------------- O(n) T, O(1) S
# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution(object):
    def deleteDuplicates(self, head):
        if head is None:                              # Always remember to consider extreme cases, especially during the interview!!!!!
            return None
        currnode = head
        while currnode.next != None:                  # Why we do not examine whether currnode.next.next is None?
                                                      # Because we only use currnode.next.val in the following code
                                                      # even if currnode.next.next is None, it does not matter
            if currnode.val != currnode.next.val:
                currnode = currnode.next              # Everything is fine, continue
            else:
                currnode.next = currnode.next.next    # duplicate element appears, remove currnode.next and continue, 
                                                      # currnode does not change, even the currnode.next.next is None is totally fine
        return head
        """
        :type head: ListNode
        :rtype: ListNode
        """


Java Version:
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
class Solution {
    public ListNode deleteDuplicates(ListNode head) {
        if (head == null) {
            return null;
        }
        ListNode curr = head;
        while (curr != null && curr.next != null) {
            if (curr.val == curr.next.val) {
                curr.next = curr.next.next;
            } else {
                curr = curr.next;
            }
        }
        return head;
    }
}
