Given n points in the plane that are all pairwise distinct, 
a "boomerang" is a tuple of points (i, j, k) such that the distance between i and j equals the distance between i and k 
(the order of the tuple matters).

Find the number of boomerangs. You may assume that n will be at most 500 and coordinates of points are all in the range [-10000, 10000] 
(inclusive).

Example:

Input:
[[0,0],[1,0],[2,0]]

Output:
2

Explanation:
The two boomerangs are [[1,0],[0,0],[2,0]] and [[1,0],[2,0],[0,0]]]



Solution: ------------------------------------------------- HashTable
class Solution(object):
    def numberOfBoomerangs(self, points):
        """
        :type points: List[List[int]]
        :rtype: int
        """
        res = 0
        for p1 in points:                                     # for each point, create a hashmap 
                                                              # and count all points with same distance. 
            HashTable = {}
            for p2 in points:                                 
                x = p1[0] - p2[0]
                y = p1[1] - p2[1]
                dist = x * x + y * y
                HashTable[dist] = 1 + HashTable.get(dist, 0)  # If for a point p1, there are k points with the same distance, 
                                                              # number of boomerangs corresponding to that are k*(k-1). 
            for v in HashTable.values():                      # Why k*(k-1)? 排列组合, 从k个点中选两个点组成boomerangs.
                res += v * (v - 1)
        return res
