Given an array of numbers nums, in which exactly two elements appear only once and all the other elements appear exactly twice. 
Find the two elements that appear only once.

Example:

Input:  [1,2,1,3,2,5]
Output: [3,5]
Note:

The order of the result is not important. So in the above example, [5, 3] is also correct.
Your algorithm should run in linear runtime complexity. Could you implement it using only constant space complexity?

Solution: ------------------------------------------------------------------ Bit Manipulation
class Solution(object):
    def singleNumber(self, nums):
        """
        :type nums: List[int]
        :rtype: List[int]
        """
        res, x = [0 for i in range(2)], 0
        for i in range(len(nums)):
            x ^= nums[i]                          # Step no.1: 将所有的数异或起来得到x
        x &= (~(x - 1))                           # Step no.2: 制造分离判断因子 => 找出x从右往左数第一个为1（a, b在这个位不同）的位
                                                  # why x &= (~(x - 1)) can find x从右往左数第一个为1（a, b在这个位不同）的位?
                                                  # compare x to x - 1: start from 从右往左数第一个为1的位 往右开始 0，1全部颠倒
                                                  # compare x to ~(x - 1): start from 从右往左数第一个为1的位 往右开始 全部相同；往左开始，不同
                                                  # x &= (~(x - 1)) => find the first 1 从右往左数，the other bits are all 0
        for num in nums:
            if num & x == 0:                      # Step no.3: 分组，将两个不同的数(exactly two elements appear only once) 分离到两组中
                                                  # Why x can achieve that?
                                                  # because x is the ...010... where 1 is the bit where 3, 5 is different
                                                  # By & operation, 3, 5 will return differently, one will return 0 and the other will 
                                                  # return 1, this is how grouping is achieved.
                res[0] ^= num
            else:
                res[1] ^= num
        return res
