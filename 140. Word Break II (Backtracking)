Given a non-empty string s and a dictionary wordDict containing a list of non-empty words, 
add spaces in s to construct a sentence where each word is a valid dictionary word. Return all such possible sentences.

Note:

The same word in the dictionary may be reused multiple times in the segmentation.
You may assume the dictionary does not contain duplicate words.
Example 1:

Input:
s = "catsanddog"
wordDict = ["cat", "cats", "and", "sand", "dog"]
Output:
[
  "cats and dog",
  "cat sand dog"
]
Example 2:

Input:
s = "pineapplepenapple"
wordDict = ["apple", "pen", "applepen", "pine", "pineapple"]
Output:
[
  "pine apple pen apple",
  "pineapple pen apple",
  "pine applepen apple"
]
Explanation: Note that you are allowed to reuse a dictionary word.
Example 3:

Input:
s = "catsandog"
wordDict = ["cats", "dog", "sand", "and", "cat"]
Output:
[]



Solution: -------------------------------------------------------------------- Backtracking
class Solution(object):
    def wordBreak(self, s, wordDict):
        """
        :type s: str
        :type wordDict: List[str]
        :rtype: List[str]
        """
        return self.backtracking(s, wordDict, {})
    
    def backtracking(self, s, wordDict, memo):
        if s in memo:                                                   # memo here is to optimize the algorithm:
                                                                        # if we solve this situation before, do not need to do it again
            return memo[s]
                                                                        # if not s:          WE DO NOT NEED THIS !!!!!!                 
                                                                        #    return None
        
        currres = []
        for word in wordDict:
            if not s.startswith(word):
                continue
            if len(s) == len(word):
                currres.append(word)                                    # IMPORTANT !!!!!!!!!!!!!!!!!!!!!!!!
                                                                        # DO NOT APPEND TO THE RES except these two cases !!!!!
                                                                        # 1. len(s) == len(word) => we reach the end of the string
                                                                        # 2. resultOfRest returns something back (not None)
            else:
                resultOfRest = self.backtracking(s[len(word):], wordDict, memo)
                for item in resultOfRest:
                    currres.append(word + " " + item)
        memo[s] = currres
        return currres
