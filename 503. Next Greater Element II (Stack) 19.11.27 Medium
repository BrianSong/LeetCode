Given a circular array (the next element of the last element is the first element of the array), 
print the Next Greater Number for every element. 
The Next Greater Number of a number x is the first greater number to its traversing-order next in the array, 
which means you could search circularly to find its next greater number. If it doesn't exist, output -1 for this number.

Example 1:
Input: [1,2,1]
Output: [2,-1,2]
Explanation: The first 1's next greater number is 2; 
The number 2 can't find next greater number; 
The second 1's next greater number needs to search circularly, which is also 2.
Note: The length of given array won't exceed 10000.


Solution no.1: ----------------------------------- my own but TLE pass 217 / 224
-------------------------------------------------- O(n^2) T and O(1) S
class Solution(object):
    def nextGreaterElements(self, nums):
        """
        :type nums: List[int]
        :rtype: List[int]
        """
        if not nums:
            return None
        n = len(nums)
        res = []
        for i, num in enumerate(nums):
            next_greater = float('inf')
            for step in range(1, n):
                j = i + step
                if j >= n:
                    j %= n
                if nums[j] > num:
                    next_greater = nums[j]
                    break
            if next_greater == float('inf'):
                next_greater = -1
            res.append(next_greater)
        return res
        
        
Solution no.2: -------------------------------------------------- Stack
----------------------------------------------------------------- O(n) T and S
class Solution(object):
    def nextGreaterElements(self, nums):
        """
        :type nums: List[int]
        :rtype: List[int]
        """
        if not nums:
            return None
        stack, res = [], [-1] * len(nums)
        for i in range(len(nums)) * 2:                       # Process it twice as it is a circular array to make sure that 
                                                             # we can reread the next greater element after every element.
            while stack and nums[i] > nums[stack[-1]]:       # Push the index on the stack. If the current nums[i]
                                                             # is bigger than the last number nums[stack[-1]] in the stack
                                                             # (found by index), then we find the next great element for nums[stack[-1]]
                res[stack.pop()] = nums[i]
            stack.append(i)
        return res
