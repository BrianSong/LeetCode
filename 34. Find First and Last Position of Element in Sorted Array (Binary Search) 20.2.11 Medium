Given an array of integers nums sorted in ascending order, find the starting and ending position of a given target value.

Your algorithm's runtime complexity must be in the order of O(log n).

If the target is not found in the array, return [-1, -1].

Example 1:

Input: nums = [5,7,7,8,8,10], target = 8
Output: [3,4]
Example 2:

Input: nums = [5,7,7,8,8,10], target = 6
Output: [-1,-1]

Solution: ------------------------------------------------------------ Binary Search
----------------------------------------------------------- O(logn) T, O(1) S
class Solution(object):
    def searchRange(self, nums, target):
        """
        :type nums: List[int]
        :type target: int
        :rtype: List[int]
        """
        if not nums:
            return [-1, -1]
        l1, r1 = 0, len(nums) - 1
        while l1 <= r1:
            mid1 = (l1 + r1) / 2
            if nums[mid1] < target:
                l1 = mid1 + 1
            else:
                r1 = mid1 - 1
        if l1 >= len(nums) or nums[l1] != target:                  # IMPORTANT !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
                                                                   # Everytime we use index referencing, we need to consider !!!!!!
                                                                   # whether we will bring index error !!!!!!!!!!!!!!!!!!!!!!!!!!!!
            return [-1, -1]
        l2, r2 = 0, len(nums) - 1
        while l2 <= r2:
            mid2 = (l2 + r2) / 2
            if nums[mid2] <= target:
                l2 = mid2 + 1
            else:
                r2 = mid2 - 1
        if r2 < 0 or nums[r2] != target:
            return [-1, -1]
        return [l1, r2]


class Solution {
    public int[] searchRange(int[] nums, int target) {
        if (nums == null || nums.length == 0 || Arrays.asList(nums).contains(target)) {
            return new int[] {-1, -1};
        }
        
        int l1 = 0, r1 = nums.length - 1;
        while (l1 <= r1) {
            int mid1 = (l1 + r1) / 2;
            if (nums[mid1] < target) {
                l1 = mid1 + 1;
            } else {                                                   # 相等时move right pointer
                r1 = mid1 - 1;
            }
        }
        
        if (l1 >= nums.length || nums[l1] != target) {
            return new int[] {-1, -1};
        }
        
        int l2 = 0, r2 = nums.length - 1;
        while (l2 <= r2) {
            int mid2 = (l2 + r2) / 2;
            if (nums[mid2] <= target) {                                # 相等时move left pointer
                l2 = mid2 + 1;
            } else {
                r2 = mid2 - 1;
            }
        }
        
        if (r2 < 0 || nums[r2] != target) {
            return new int[] {-1, -1};
        }
        
        return new int[] {l1, r2};
    }
}
