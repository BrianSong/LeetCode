Given an array of n positive integers and a positive integer s, find the minimal length of a contiguous subarray of which the sum ≥ s. 
If there isn't one, return 0 instead.

Example: 

Input: s = 7, nums = [2,3,1,2,4,3]
Output: 2
Explanation: the subarray [4,3] has the minimal length under the problem constraint.
Follow up:
If you have figured out the O(n) solution, try coding another solution of which the time complexity is O(n log n). 

Solution: ---------------------------------------------------- Two Pointers + Sliding Window
-------------------------------------------------------------- O(n) T, O(1) S
class Solution(object):
    def minSubArrayLen(self, s, nums):
        """
        :type s: int
        :type nums: List[int]
        :rtype: int
        """
        if not s or not nums or sum(nums) < s:
            return 0
        slow, fast, curr, res = 0, 0, 0, float('inf')
        while fast < len(nums):
            curr += nums[fast]                            # Keep expanding the fast
            while slow < len(nums) and curr >= s:         # until curr >= s where we need to move slow to the right for contracting
                res = min(res, fast - slow + 1)
                curr -= nums[slow]
                slow += 1
            fast += 1
        return res
        
        
镜像问题，求maximum subarray's length that is <= s
class Solution(object):
    def minSubArrayLen(self, s, nums):
        """
        :type s: int
        :type nums: List[int]
        :rtype: int
        """
        if not nums:
            return 0
        slow, fast = 0, 0
        max_length, curr_sum = float('-inf'), 0
        while slow < len(nums) and fast < len(nums):
            while fast < len(nums) and curr_sum + nums[fast] <= s:
                curr_sum += nums[fast]
                max_length = max(max_length, fast - slow + 1)
                fast += 1
            curr_sum -= nums[slow]
            slow += 1
        return max_length if max_length != float('-inf') else 0



C++ Version:
class Solution {
public:
    int minSubArrayLen(int s, vector<int>& nums) {
        if (s <= 0 || nums.size() <= 0 || accumulate(nums.begin(), nums.end(), 0) < s) {
            return 0;
        }
        int curr_sum {};
        int slow {}, fast {};
        int min_length {INT_MAX};
        while (fast < nums.size()) {
            curr_sum += nums[fast];
            while (slow < nums.size() && curr_sum >= s) {
                min_length = min(min_length, fast - slow + 1);
                curr_sum -= nums[slow];
                slow += 1;
            }
            fast += 1;
        }
        return min_length;
    }
};
