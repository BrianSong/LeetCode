Given a matrix of M x N elements (M rows, N columns), return all elements of the matrix in diagonal order as shown in the below image.

 

Example:

Input:
[
 [ 1, 2, 3 ],
 [ 4, 5, 6 ],
 [ 7, 8, 9 ]
]

Output:  [1,2,4,7,5,3,6,8,9]

Explanation:

 

Note:

The total number of elements of the given matrix will not exceed 10,000.

Solution no.1: --------------------------------------------------- HashTable
----------------------------------------------------- max(O(m*n), O((m + n - 1)*log(m + n - 1))) T, O(m + n - 1) S
class Solution(object):
    def findDiagonalOrder(self, matrix):
        """
        :type matrix: List[List[int]]
        :rtype: List[int]
        """
        if not matrix or not matrix[0]:
            return None
        res = []
        d = collections.defaultdict(list)
        for i in range(len(matrix)):
            for j in range(len(matrix[0])):
                d[i + j + 1].append(matrix[i][j])
        for key in sorted(d.keys()):
            if key % 2 == 1:
                res.extend(d[key][::-1])
            else:
                res.extend(d[key])
        return res

Solution no.2: ----------------------------------------------------- Snake Matrix Traverse
----------------------------------------------------- O(m*n) T, O(1) S
class Solution(object):
    def findDiagonalOrder(self, matrix):
        """
        :type matrix: List[List[int]]
        :rtype: List[int]
        """
        if not matrix or not matrix[0]:
            return None
        r, c, m, n, res = 0, 0, len(matrix), len(matrix[0]), [0] * (len(matrix) * len(matrix[0]))
        for i in range(len(res)):
            res[i] = matrix[r][c]
            if (r + c) % 2 == 0:                       # Going up
                if r == 0:                             # Special Case Check 1
                    if c != n - 1:                     
                        c += 1
                    else: 
                        r += 1
                elif c == n - 1:                       # Special Case Check 2
                    r += 1
                else:
                    c += 1
                    r -= 1
            else:                                      # Going down
                if c == 0:                             # Special Case Check 1
                    if r != m - 1:                    
                        r += 1
                    else:
                        c += 1
                elif r == m - 1:                       # Special Case Check 2
                    c += 1
                else:
                    r += 1
                    c -= 1
        return res

Simplify Version:
There are overlap between the two special case check: for exmaple, The upper right corner and the lower left corner,
like:
1 2 3
4 5 6
7 8 9
The 3 in the matrix should going up, and it meet the two special case check together, however, what we want it to do is to go down,
So, if we put c == n - 1 condition check before r == 0, it will follow the c == n - 1 which is to go down first,
then in this way, we do not need to further check in the r == 0 for the c == n - 1 case to avoid matrix index error.

class Solution(object):
    def findDiagonalOrder(self, matrix):
        """
        :type matrix: List[List[int]]
        :rtype: List[int]
        """
        if not matrix or not matrix[0]:
            return None
        r, c, m, n, res = 0, 0, len(matrix), len(matrix[0]), [0] * (len(matrix) * len(matrix[0]))
        for i in range(len(res)):
            res[i] = matrix[r][c]
            if (r + c) % 2 == 0:
                if c == n - 1:                         # Put this condition first so that we do not need to further check in r == 0 case
                    r += 1
                elif r == 0:
                    c += 1
                else:
                    c += 1
                    r -= 1
            else:
                if r == m - 1:
                    c += 1
                elif c == 0:
                    r += 1
                else:
                    r += 1
                    c -= 1
        return res
