Additive number is a string whose digits can form additive sequence.

A valid additive sequence should contain at least three numbers. 
Except for the first two numbers, each subsequent number in the sequence must be the sum of the preceding two.

Given a string containing only digits '0'-'9', write a function to determine if it's an additive number.

Note: Numbers in the additive sequence cannot have leading zeros, so sequence 1, 2, 03 or 1, 02, 3 is invalid.

Example 1:

Input: "112358"
Output: true 
Explanation: The digits can form an additive sequence: 1, 1, 2, 3, 5, 8. 
             1 + 1 = 2, 1 + 2 = 3, 2 + 3 = 5, 3 + 5 = 8
Example 2:

Input: "199100199"
Output: true 
Explanation: The additive sequence is: 1, 99, 100, 199. 
             1 + 99 = 100, 99 + 100 = 199
Follow up:
How would you handle overflow for very large input integers?


Solution:----------------------------https://www.youtube.com/watch?v=JqOIRBC0_9c&list=PLDLrHkO0R-LzFc3ufrhk5sr1UmnNyW4u0&index=28
class Solution(object):
    def isAdditiveNumber(self, nums):
        """
        :type nums: str
        :rtype: bool
        """
        if len(nums) < 3: return False
        for i in range(1, len(nums) / 2 + 1):                     # 两数相加，合的长度至少为这两数长度的最大值   
            if nums[0] == "0" and i > 1:                          # Note: Numbers in the additive sequence cannot have leading zeros,
                                                                  # so sequence 1, 2, 03 or 1, 02, 3 is invalid.
                return False                                      # This is False since as long as the first is "0" and length > 1,
                                                                  # There is no hope back: 012345...
            first = int(nums[:i])
            j = 1
            while len(nums) - i - j >= max(i, j):                 # 两数相加，合的长度至少为这两数长度的最大值   
                if nums[i] == "0" and j > 1:
                    break                                         # Here is break, since still have hope as long as first number changes 
                second = int(nums[i:i+j])
                if self.backtracking(first, second, i + j, nums):
                    return True
                j += 1
    def backtracking(self, first, second, start, nums):
        if start == len(nums):
            return True
        currsum = first + second
        return str(currsum) == nums[start:start+len(str(currsum))] and self.backtracking(second, currsum, start + len(str(currsum)), nums)
        # BE CAREFUL !!!!!!!!!!!!!!!!!!!!!!!!!!!!!! CANNOT "len(currsum)", SHOULD BE "len(str(currsum))", SINCE INTEGER HAS NO LENGTH
