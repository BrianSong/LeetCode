Given a binary tree, return the zigzag level order traversal of its nodes' values. (ie, from left to right, 
then right to left for the next level and alternate between).

For example:
Given binary tree [3,9,20,null,null,15,7],
    3
   / \
  9  20
    /  \
   15   7
return its zigzag level order traversal as:
[
  [3],
  [20,9],
  [15,7]
]

Solution: ------------------------------------------------------- https://www.youtube.com/watch?v=U77m7wWWhV0
------------------------- Time complexity : O(n). Because we traverse the entire input tree once, the total run time is O(n), 
------------------------- where n is the total number of nodes in the tree.
------------------------- Space complexity : O(n)
------------------------- BFS will have to store at least an entire level of the tree in the queue (sample queue implementation). 
------------------------- With a perfect fully balanced binary tree, this would be (n/2 + 1) nodes (the very last level)
class Solution(object):
    def zigzagLevelOrder(self, root):
        """
        :type root: TreeNode
        :rtype: List[List[int]]
        """
        if not root:
            return None
        deque = collections.deque()                        # Introduce a new data type: collections.deque()
                                                           # Build-in functions: pop(), popleft(), append(), appendleft()
                                                           # THERE IS NO pop(0) for collections.deque() but popleft() !!!!
        deque.append(root)
        level = 0
        res = []
        while deque:
            currlevel = []                                 # IMPORTANT !!!!!!!!!! currlevel 在这里！！！！！ 不在for loop 里！！！！！！！
            for i in range(len(deque)):
                if level % 2 == 0:
                    pop_element = deque.popleft()
                    currlevel.append(pop_element.val)
                    if pop_element.left:                   # Everytime we want to append something into the queue in BFS,  we must 
                                                           # check if it is None FIRST!!!!!!!!
                        deque.append(pop_element.left)
                    if pop_element.right:
                        deque.append(pop_element.right)
                else:
                    pop_element = deque.pop()
                    currlevel.append(pop_element.val)
                    if pop_element.right:
                        deque.appendleft(pop_element.right)
                    if pop_element.left:
                        deque.appendleft(pop_element.left)
            res.append(currlevel)                          # IMPORTANT !!!!!!!!!! res.append(currlevel) 在这里！！ 不在for loop 里！！
            level += 1
        return res


Java Version:
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public List<List<Integer>> zigzagLevelOrder(TreeNode root) {
        if (root == null) {
            return new ArrayList<>();
        }
        List<List<Integer>> res = new ArrayList<>();
        Deque<TreeNode> q = new ArrayDeque<>();
        q.offerFirst(root);
        int level = 0;
        while (q.size() != 0) {
            List<Integer> curr = new ArrayList<>();
            int currIterTime = q.size();
            for (int i = 0; i < currIterTime; i ++) {
                if (level % 2 == 0) {
                    TreeNode popNode = q.pollFirst();
                    curr.add(popNode.val);
                    if (popNode.left != null) {
                        q.offerLast(popNode.left);
                    }
                    if (popNode.right != null) {
                        q.offerLast(popNode.right);
                    }
                }
                else {
                    TreeNode popNode = q.pollLast();
                    curr.add(popNode.val);
                    if (popNode.right != null) {
                        q.offerFirst(popNode.right);
                    }
                    if (popNode.left != null) {
                        q.offerFirst(popNode.left);
                    }
                }
            }
            res.add(curr);
            level ++;
        }
        return res;
    }
}
