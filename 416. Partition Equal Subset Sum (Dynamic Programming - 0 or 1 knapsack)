Given a non-empty array containing only positive integers, 
find if the array can be partitioned into two subsets such that the sum of elements in both subsets is equal.

Note:

Each of the array element will not exceed 100.
The array size will not exceed 200.
 

Example 1:

Input: [1, 5, 11, 5]

Output: true

Explanation: The array can be partitioned as [1, 5, 5] and [11].
 

Example 2:

Input: [1, 2, 3, 5]

Output: false

Explanation: The array cannot be partitioned into equal sum subsets.



Solution: ------------------------------------------------------------- Dynamic Programming - 0/1 knapsack
class Solution(object):
    def canPartition(self, nums):
        """
        :type nums: List[int]
        :rtype: bool
        """
        if sum(nums) % 2 != 0:
            return False
        halfSum = sum(nums) / 2                                      # This problem is essentially let us to find whether 
                                                                     # there are several numbers in a set which are able to sum to 
                                                                     # a specific value (in this problem, the value is sum/2).
        dp = [False] * (halfSum + 1)                                 # dp[i] means if there are some numbers in the nums
                                                                     # can add up to i
        dp[0] = True                                                 # dp[0] must be True because we need nothing to add up to 0
        for num in nums:
            for currSum in range(halfSum, -1, -1):                   # We loop over the from halfSum to 0 to find if there is
                                                                     # any sub sequence that can add up to them
                if currSum >= num:                                   # IMPORTANT !!!!!!!!!!!!!!!!!!!!!!!!!!
                                                                     # Must be ">=" instead of ">" !!!!!!!!!!!!!!!!!!!!
                                                                     # If it is ">", this dp is useless because only dp[0] will be True
                    dp[currSum] = dp[currSum] or dp[currSum - num]   # Actually, this is a 0/1 knapsack problem, for each number, 
                                                                     # we can pick it or not
                                                                     # If we do not pick it, dp[currSum] = dp[currSum]
                                                                     # if we pick it, dp[currSum] = dp[currSum - num]
        return dp[halfSum]
