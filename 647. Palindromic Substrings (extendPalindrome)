Given a string, your task is to count how many palindromic substrings in this string.

The substrings with different start indexes or end indexes are counted as different substrings even they consist of same characters.

Example 1:

Input: "abc"
Output: 3
Explanation: Three palindromic strings: "a", "b", "c".
 

Example 2:

Input: "aaa"
Output: 6
Explanation: Six palindromic strings: "a", "a", "a", "aa", "aa", "aaa".
 

Note:

The input string length won't exceed 1000.


Solution: ---------------------------------- extendPalindrome 
# https://leetcode.com/problems/palindromic-substrings/discuss/105688/Very-Simple-Java-Solution-with-Detail-Explanation
# The upper link provides a very good visualiztion
class Solution(object):
    def countSubstrings(self, s):
        """
        :type s: str
        :rtype: int
        """
        if not s:
            return 0
        self.count = 0
        for i in range(len(s) - 1):
            self.checkPalind(s, i, i)                         # To check the palindrome of odd length palindromic sub-string
                                                              # i.e.: 分割点（回文中心点pivot）在s[i]本身
            self.checkPalind(s, i, i + 1)                     # To check the palindrome of even length palindromic sub-string
                                                              # i.e.: 分割点（回文中心点pivot）在s[i]与s[i+1]中间
        return self.count + 1                                 # Plus 1 is for the last individual character (for i in range(len(s) - 1))
    
    def checkPalind(self, s, l, r):
        while l >= 0 and r < len(s) and s[l] == s[r]:         # IMPORTANT !!!!!!!!!!!! WHILE !!!!! NOT IF !!!!!!!!
            self.count += 1
            l -= 1
            r += 1
