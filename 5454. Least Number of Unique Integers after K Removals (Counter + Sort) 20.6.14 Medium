Given an array of integers arr and an integer k. Find the least number of unique integers after removing exactly k elements.

 

Example 1:

Input: arr = [5,5,4], k = 1
Output: 1
Explanation: Remove the single 4, only 5 is left.
Example 2:
Input: arr = [4,3,1,1,3,3,2], k = 3
Output: 2
Explanation: Remove 4, 2 and either one of the two 1s or three 3s. 1 and 3 will be left.
 

Constraints:

1 <= arr.length <= 10^5
1 <= arr[i] <= 10^9
0 <= k <= arr.length


Solution no.1: Heap but not necessary
class Solution(object):
    def findLeastNumOfUniqueInts(self, arr, k):
        """
        :type arr: List[int]
        :type k: int
        :rtype: int
        """
        counter = collections.Counter(arr)
        pq = []
        for num, freq in counter.items():
            heapq.heappush(pq, [freq, num])
        for _ in range(k):
            [freq, num] = heapq.heappop(pq)
            freq -= 1
            if freq != 0:
                heapq.heappush(pq, [freq, num])
            else:
                continue
        return len(pq)
        
        
Solution no.2: Sort O(n) T and S (worst case)
class Solution(object):
    def findLeastNumOfUniqueInts(self, arr, k):
        """
        :type arr: List[int]
        :type k: int
        :rtype: int
        """
        counter = collections.Counter(arr)
        B = sorted(counter.values())[::-1]
        while B and B[-1] <= k:
            k -= B[-1]
            B.pop()
        return len(B)
