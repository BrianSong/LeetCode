Given two binary trees and imagine that when you put one of them to cover the other, 
some nodes of the two trees are overlapped while the others are not.

You need to merge them into a new binary tree. The merge rule is that if two nodes overlap, 
then sum node values up as the new value of the merged node. Otherwise, the NOT null node will be used as the node of new tree.

Example 1:

Input: 
	Tree 1                     Tree 2                  
          1                         2                             
         / \                       / \                            
        3   2                     1   3                        
       /                           \   \                      
      5                             4   7                  
Output: 
Merged tree:
	     3
	    / \
	   4   5
	  / \   \ 
	 5   4   7
 

Note: The merging process must start from the root nodes of both trees.



Solution: ------------------------------------------------------------------ DFS 
'''
Complexity Analysis:

Time complexity : O(m). A total of m nodes need to be traversed. 
Here, m represents the minimum number of nodes of the two given trees.

Space complexity : O(m). The depth of the recursion tree can go upto m in the case of a skewed tree. 
In average case, depth will be O(logm).
'''

# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution(object):
    def mergeTrees(self, t1, t2):
        """
        :type t1: TreeNode
        :type t2: TreeNode
        :rtype: TreeNode
        """
        if not t1: return t2
        if not t2: return t1
        return self.dfs(t1, t2)
    
    def dfs(self, t1, t2):
        if not t1 and not t2:
            return None
        if not t1:                                          # IMPORTANT !!!!!!!!!!!!!!!!!!!
                                                            # If not t1, just return t2 !!!!!!!!!!!!!!!!!!!!!!!!!
                                                            # No need to:
                                                            # if not t1:
                                                            #   v1 = 0
                                                            #   t1_left = t1_right = None .......
            return t2
        if not t2:
            return t1
        currnode = TreeNode(t1.val + t2.val)
        currnode.left = self.dfs(t1.left, t2.left)
        currnode.right = self.dfs(t1.right, t2.right)
        return currnode
