Given a string, sort it in decreasing order based on the frequency of characters.

Example 1:

Input:
"tree"

Output:
"eert"

Explanation:
'e' appears twice while 'r' and 't' both appear once.
So 'e' must appear before both 'r' and 't'. Therefore "eetr" is also a valid answer.
Example 2:

Input:
"cccaaa"

Output:
"cccaaa"

Explanation:
Both 'c' and 'a' appear three times, so "aaaccc" is also a valid answer.
Note that "cacaca" is incorrect, as the same characters must be together.
Example 3:

Input:
"Aabb"

Output:
"bbAa"

Explanation:
"bbaA" is also a valid answer, but "Aabb" is incorrect.
Note that 'A' and 'a' are treated as two different characters.


Solution: -------------------------------------- My own 
--------------------------------------------------- O(nlogn) T, O(n) S
class Solution(object):
    def frequencySort(self, s):
        """
        :type s: str
        :rtype: str
        """
        if not s:
            return ""
        res = ""
        HashTable = collections.defaultdict(int)
        for w in s:
            HashTable[w] +=1
        l = []
        for c, f in HashTable.items():
            l.append((f, c))
        l.sort()
        for f, c in l:
            res += f*c
        return res[::-1]
        
        
Solution no.2: --------------------------------------------- Very clever, do it without sort(): O(n) T and S
class Solution(object):
    def frequencySort(self, s):
        """
        :type s: str
        :rtype: str
        """
        if not s:
            return ""
        res = ""
        HashTable = collections.defaultdict(int)
        for w in s:
            HashTable[w] +=1
        d = collections.defaultdict(str)
        for c, f in HashTable.items():
            d[f] += f*c
        for i in range(len(s), -1, -1):                  # Start from "len(s)" instead of "len(s) - 1"
                                                         # Frequency of a character can vary from 0 to len(s)
                                                         # Iterate HashTable to create d with key as frequency 
                                                         # and value as substrings of repeated strings with length as the frequency
            if i in d:                                   # Finally lookup all potential frequencies in decreasing order in d 
                                                         # and produce the final result
                res += d[i]
        return res
