Given an array nums, write a function to move all 0's to the end of it while maintaining the relative order of the non-zero elements.

Example:

Input: [0,1,0,3,12]
Output: [1,3,12,0,0]

Solution no.1: ------------------------------------------------- Two Pointers
------------------------------------------------- O(n) T, O(1) S
class Solution(object):
    def moveZeroes(self, nums):
        """
        :type nums: List[int]
        :rtype: None Do not return anything, modify nums in-place instead.
        """
        slow, fast = 0, 0
        while fast < len(nums):
            if slow == fast and nums[fast] != 0:
                slow += 1
                fast += 1
            elif nums[fast] == 0:
                fast += 1
            else:
                nums[fast], nums[slow] = nums[slow], nums[fast]
                slow += 1
                fast += 1

Solution no.2:
class Solution(object):
    def moveZeroes(self, nums):
        """
        :type nums: List[int]
        :rtype: None Do not return anything, modify nums in-place instead.
        """
        zero = 0                                                                 # records the position of "0"
        for i in range(len(nums)):
            if nums[i] != 0:                                                 # if all none zero, this make sure that it is continuelly 
                                                                             # swaping its value with itself
                nums[i], nums[zero] = nums[zero], nums[i]
                zero += 1
                                                                             # if facing 0, zero will not add one, so, in this way, 
                                                                             # zero indicates the 0's index

Java Version:
class Solution {
    public void moveZeroes(int[] nums) {
        int slow = 0;
        while (slow < nums.length) {
            if (nums[slow] != 0) {
                slow ++;
            } else {
                break;
            }
        }
        int fast = slow + 1;
        while (fast < nums.length) {
            if (nums[fast] == 0) {
                fast ++;
            } else {
                int temp = nums[slow];
                nums[slow] = nums[fast];
                nums[fast] = temp;
                slow ++;
                fast ++;
            }
        }
    }
}
