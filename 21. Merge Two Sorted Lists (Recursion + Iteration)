Merge two sorted linked lists and return it as a new list. 
The new list should be made by splicing together the nodes of the first two lists.

Example:

Input: 1->2->4, 1->3->4
Output: 1->1->2->3->4->4

Solution(my own):
# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution(object):-------------------------- Recursion ------------------------- https://www.youtube.com/watch?v=DA2pmdr7MTE
    def mergeTwoLists(self, l1, l2):
        donimate_node = ListNode(0)                                   # The key to this problem: create a donimate node
        self.mergeList_help(donimate_node, l1, l2)
        return donimate_node.next                                     # Donimate_node.next is the answer
        
        """
        :type l1: ListNode
        :type l2: ListNode
        :rtype: ListNode
        """
    def mergeList_help(self, donimate_node, l1, l2):
        if l1 != None and l2 != None:
            if l1.val == l2.val:
                donimate_node.next = l1
                self.mergeList_help(donimate_node.next, l1.next, l2)
            elif l1.val < l2.val:
                donimate_node.next = l1
                self.mergeList_help(donimate_node.next, l1.next, l2)
            elif l2.val < l1.val:
                donimate_node.next = l2
                self.mergeList_help(donimate_node.next, l1, l2.next)
        elif l1 == None and l2 == None:
            return
        elif l1 != None and l2 == None:
            donimate_node.next = l1
            return
        elif l1 == None and l2 != None:
            donimate_node.next = l2
            return
Solution: --------------------------------------------- More concise Iteration solution
# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution(object):
    def mergeTwoLists(self, l1, l2):
        """
        :type l1: ListNode
        :type l2: ListNode
        :rtype: ListNode
        """
        dummynode = ListNode(0)
        currnode = dummynode
        while l1 and l2:
            if l1.val > l2.val:
                l1, l2 = l2, l1
            currnode.next = l1
            l1 = l1.next
            currnode = currnode.next
        if l1:
            currnode.next = l1
        if l2:
            currnode.next = l2
        return dummynode.next
