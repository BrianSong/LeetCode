A peak element is an element that is greater than its neighbors.

Given an input array nums, where nums[i] ≠ nums[i+1], find a peak element and return its index.

The array may contain multiple peaks, in that case return the index to any one of the peaks is fine.

You may imagine that nums[-1] = nums[n] = -∞.

Example 1:

Input: nums = [1,2,3,1]
Output: 2
Explanation: 3 is a peak element and your function should return the index number 2.
Example 2:

Input: nums = [1,2,1,3,5,6,4]
Output: 1 or 5 
Explanation: Your function can return either index number 1 where the peak element is 2, 
             or index number 5 where the peak element is 6.
Note:

Your solution should be in logarithmic complexity.

Solution: ---------------------------------------------------- Binary Search
---------------------------------------------------- O(logn) T, O(1) S
class Solution(object):
    def findPeakElement(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        if not nums:
            return None
        left, right = 0, len(nums) - 1
        while left < right:                             # Why left < right instead of left <= right ?
                                                        # What we want is when left == right == peak's index, we break and return left
                                                        # instead of continue executing when left == right
            middle = (left + right) / 2
            if nums[middle] > nums[middle + 1]:         # What we want is any peak in the nums,
                                                        # As long as the right side of nums[middle]'s slope is increasing
                                                        # then in the left side of nums[middle], there must exist at least one peak
                right = middle                          # Why here is "right = middle" while below is "left = middle + 1"
                                                        # because for a peak, peak must be bigger than its right,
                                                        # so, the right pointer may be exactly the peak index, 
                                                        # if we do "right = middle - 1" as "left = middle + 1"
                                                        # we probably miss this peak
            else:
                left = middle + 1
        return left                                     # At this time, left == right and is the peak index


Java Version:
class Solution {
    public int findPeakElement(int[] nums) {
        if (nums == null || nums.length == 0) {
            return -1;
        }
        int left = 0, right = nums.length - 1;
        while (left < right) {
            int mid = left + (right - left) / 2;
            if (nums[mid] > nums[mid + 1]) {
                right = mid;
            } else {
                left = mid + 1;
            }
        }
        return left;
    }
}
