Given a binary tree and a sum, 
determine if the tree has a root-to-leaf path such that adding up all the values along the path equals the given sum.

Note: A leaf is a node with no children.

Example:

Given the below binary tree and sum = 22,

      5
     / \
    4   8
   /   / \
  11  13  4
 /  \      \
7    2      1
return true, as there exist a root-to-leaf path 5->4->11->2 which sum is 22.

Solution: --------------------------------------------------- DFS
------------------------------------------------------------- O(n) T, O(n) S
# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution(object):
    def hasPathSum(self, root, sum):
        if root is None:
            return False
        return self.dfs_help(root, sum)
        """
        :type root: TreeNode
        :type sum: int
        :rtype: bool
        """
    def dfs_help(self, root, sum):
        if not root:
            return
        if not root.left and not root.right and sum == root.val:        # The reason why I failed in the first time:
                                                                        # we must make sure the current root is the leaf as required
                                                                        # IMPORTANT!!!!!!!!!!!!!!!!!!!!!!! ALSO!!!!!!!!!!!!!!!!!!!!!!
                                                                        # the correct one should be sum == root.val not sum == 0:
                                                                        # sum will be zero only in the next level of leaf node
                                                                        # where the function has ended in the "if not root: " already 
                                                                        # So, in this way, this line of code will never be executed.
            return True
        return self.dfs_help(root.left, sum - root.val) or self.dfs_help(root.right, sum - root.val)
        '''
        As long as one of the subtree return True, we can pass True upper and uppper to the root node and return True
        '''


Java Version:
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public boolean hasPathSum(TreeNode root, int sum) {
        if (root == null) {
            return false;
        }
        return dfs(root, sum);
    }
    
    public boolean dfs(TreeNode root, int sum) {
        if (root != null && root.left == null && root.right == null && root.val == sum) {
            return true;
        }
        if (root == null) {
            return false;
        }
        return dfs(root.left, sum - root.val) || dfs(root.right, sum - root.val);
    }
}
