Given a binary tree

struct Node {
  int val;
  Node *left;
  Node *right;
  Node *next;
}
Populate each next pointer to point to its next right node. If there is no next right node, the next pointer should be set to NULL.

Initially, all next pointers are set to NULL.

Note:

You may only use constant extra space.
Recursive approach is fine, implicit stack space does not count as extra space for this problem.


Solution : ---------------------------------------------------- https://www.youtube.com/watch?v=mBVN8G-pIzU
"""
# Definition for a Node.
class Node(object):
    def __init__(self, val, left, right, next):
        self.val = val
        self.left = left
        self.right = right
        self.next = next
"""
class Solution(object):
    def connect(self, root):
        """
        :type root: Node
        :rtype: Node
        """
        dummynode = Node()
        dummynode.next = root
        childhead, child = None, None
        while root:
            while root:
                if root.left:
                    if not childhead:
                        childhead = root.left
                        child = root.left
                    else:
                        child.next = root.left
                        child = child.next
                if root.right:
                    if not childhead:
                        childhead = root.right
                        child = root.right
                    else:
                        child.next = root.right
                        child = child.next
                root = root.next
            root = childhead
            child = None
            childhead = None
        return dummynode.next
