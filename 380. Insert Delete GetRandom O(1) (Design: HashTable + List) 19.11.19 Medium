Design a data structure that supports all following operations in average O(1) time.

insert(val): Inserts an item val to the set if not already present.
remove(val): Removes an item val from the set if present.
getRandom: Returns a random element from current set of elements. Each element must have the same probability of being returned.
Example:

// Init an empty set.
RandomizedSet randomSet = new RandomizedSet();

// Inserts 1 to the set. Returns true as 1 was inserted successfully.
randomSet.insert(1);

// Returns false as 2 does not exist in the set.
randomSet.remove(2);

// Inserts 2 to the set, returns true. Set now contains [1,2].
randomSet.insert(2);

// getRandom should return either 1 or 2 randomly.
randomSet.getRandom();

// Removes 1 from the set, returns true. Set now contains [2].
randomSet.remove(1);

// 2 was already in the set, so return false.
randomSet.insert(2);

// Since 2 is the only number in the set, getRandom always return 2.
randomSet.getRandom();


Solution no.1: ------------------------------------------------- my own but not all O(1) time complexity
'''
In interview setting, it's perfectly reasonable to assume hash table add/delete operations are O(1). 
Unless you are explicitly asked about the detailed implementation of a hash table, then you should mention that in real world, 
hash table could degrade to O(n) due to collision (though unlikely if you choose a good hashing algorithm).
'''
class RandomizedSet(object):

    def __init__(self):                           
        """
        Initialize your data structure here.
        """
        self.HashTable = {}
        

    def insert(self, val):                         # O(1)
        """
        Inserts a value to the set. Returns true if the set did not already contain the specified element.
        :type val: int
        :rtype: bool
        """
        if val in self.HashTable:
            return False
        else:
            self.HashTable[val] = 0
            return True
        

    def remove(self, val):                         # O(1)
        """
        Removes a value from the set. Returns true if the set contained the specified element.
        :type val: int
        :rtype: bool
        """
        if val in self.HashTable:
            del self.HashTable[val]
            return True
        else:
            return False
        

    def getRandom(self):
        """
        Get a random element from the set.
        :rtype: int
        """
        return random.choice(list(self.HashTable.keys()))                   # Since we convert it into a list first, it is O(n)
        


# Your RandomizedSet object will be instantiated and called as such:
# obj = RandomizedSet()
# param_1 = obj.insert(val)
# param_2 = obj.remove(val)
# param_3 = obj.getRandom()



Solution no.2: ------------------------------------------ Really all O(1): using dictionary and list TOGETHER
'''
The reason why last solution fail is that we only use a dictionary, and turn it into a list so that we can get random takes O(n) T
So, in this method, we are going to use list and dict together !!!!
The list will record how many element we have left and mainly be in charge of O(1) getRandom() because we can get a random index
in O(1) T and index reference in list is also O(1)
The dict will be in charge of O(1) check whether the val already existed and get the index for that val in O(1) which list cannot
'''
class RandomizedSet(object):

    def __init__(self):
        """
        Initialize your data structure here.
        """
        self.d_pos = {}                               # self.d_pos[num] records the exactly position index of each num in self.nums
        self.nums = []                                  
        

    def insert(self, val):
        """
        Inserts a value to the set. Returns true if the set did not already contain the specified element.
        :type val: int
        :rtype: bool
        """
        if val in self.d_pos:
            return False
        else:
            self.nums.append(val)                                       # list.append => O(1)
            self.d_pos[val] = len(self.nums) - 1
            return True
        

    def remove(self, val):
        """
        Removes a value from the set. Returns true if the set contained the specified element.
        :type val: int
        :rtype: bool
        """
        if not val in self.d_pos:
            return False
        else:
            idx, last = self.d_pos[val], self.nums[-1]
            self.nums[idx], self.d_pos[last] = last, idx   # Use the last element to replace the delete element 
                                                           # in self.nums and self.d_pos
            self.nums.pop()                                # Then delete the original(extra) last element in self.nums and self.d_pos
            del self.d_pos[val]
            return True
        

    def getRandom(self):
        """
        Get a random element from the set.
        :rtype: int
        """
        return self.nums[random.randint(0, len(self.nums) - 1)]     # O(1) time complexity now


# Your RandomizedSet object will be instantiated and called as such:
# obj = RandomizedSet()
# param_1 = obj.insert(val)
# param_2 = obj.remove(val)
# param_3 = obj.getRandom()
