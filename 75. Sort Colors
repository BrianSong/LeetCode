'''
Given an array with n objects colored red, white or blue, sort them in-place so that objects of the same color are adjacent, with the colors in the order red, white and blue.

Here, we will use the integers 0, 1, and 2 to represent the color red, white, and blue respectively.

Note: You are not suppose to use the library's sort function for this problem.

Example:

Input: [2,0,2,1,1,0]
Output: [0,0,1,1,2,2]
Follow up:

A rather straight forward solution is a two-pass algorithm using counting sort.
First, iterate the array counting number of 0's, 1's, and 2's, then overwrite array with total number of 0's, then 1's and followed by 2's.
Could you come up with a one-pass algorithm using only constant space?
'''

Solution no.1 (Straightforward one -  two-pass algorithm):
class Solution(object):
    def sortColors(self, nums):
        if nums is None or len(nums) == 0:
            return []
        num_red, num_white, num_blue = 0, 0, 0
        for num in nums:
            if num == 0:
                num_red += 1
            elif num == 1:
                num_white += 1
            else:
                num_blue += 1
        print num_red, num_white, num_blue
        for i in range(num_red):
            nums[i] = 0
        for i in range(num_red, num_red + num_white):
            nums[i] = 1
        for i in range(num_red + num_white, num_red + num_white + num_blue):
            nums[i] = 2
        """
        :type nums: List[int]
        :rtype: None Do not return anything, modify nums in-place instead.
        """
        
Solution no.2 (Follow-up: one-pass algorithm using only constant space):---------https://www.youtube.com/watch?v=J9DgvL6L1nk
class Solution(object):
    def sortColors(self, nums):
        first, last = 0, len(nums) - 1                    # Create 3 pointers: first, last, curridx
        while first < len(nums) and nums[first] == 0:     # first records the leftest non-zero element's index
            first += 1                                    # last records the rightest non-two element's index
        while last > 0 and nums[last] == 2:               # curridx records the current reviewing element's index
            last -= 1
        curridx = first
        while curridx <= last:
            if nums[curridx] == 1:                        # Case no.1: curridx points to 1, no need to do any swap, curridx moves on 
                curridx += 1
            elif nums[curridx] == 0:                      # Case no.2: curridx points to 0, swap the value and update first and curridx
                nums[curridx], nums[first] = nums[first], nums[curridx]
                curridx += 1
                first += 1
            elif nums[curridx] == 2:                      # Case no.3: curridx points to 2, swap the value and update the last
                nums[curridx], nums[last] = nums[last], nums[curridx]
                last -= 1                                 # We do not need to update curridx, since it now points to the swap element
                                                          # came from the last index which has not been examined 
        """
        :type nums: List[int]
        :rtype: None Do not return anything, modify nums in-place instead.
        """
