Implement strStr().

Return the index of the first occurrence of needle in haystack, or -1 if needle is not part of haystack.

Example 1:

Input: haystack = "hello", needle = "ll"
Output: 2
Example 2:

Input: haystack = "aaaaa", needle = "bba"
Output: -1
Clarification:

What should we return when needle is an empty string? This is a great question to ask during an interview.

For the purpose of this problem, we will return 0 when needle is an empty string. 
This is consistent to C's strstr() and Java's indexOf().

Solution no.1: ------------------------------------- String ------------------------------ https://www.youtube.com/watch?v=62lXzTIHTiI
----------------------------------------------- O(m*n) T where m is the len(haystack) & n is the len(needle), O(1) S
class Solution(object):
    def strStr(self, haystack, needle):
        """
        :type haystack: str
        :type needle: str
        :rtype: int
        """
        if len(needle) == 0: return 0
        for i in range(len(haystack) - len(needle) + 1):
            if haystack[i: i + len(needle)] == needle:                     # O(n) for string slicing
                return i
        return -1

Solution no.2: ---------------------- Rolling Hash + Rabin Karp ----------------------- https://www.youtube.com/watch?v=H4VrKHVG5qI
------------------------------------- Worst O(m * n) T, best O(m) T
class Solution(object):
    def strStr(self, haystack, needle):
        """
        :type haystack: str
        :type needle: str
        :rtype: int
        """
        if len(needle) == 0: 
            return 0
        self.prime = 3
        m, n = len(haystack), len(needle)
        needle_hash = self.get_hash(needle)
        for i in range(0, m - n + 1):
            if i == 0:
                curr_hash = self.get_hash(haystack[:len(needle)])
            else:
                curr_hash = self.update_hash(curr_hash, haystack[i - 1], haystack[i + n - 1], n)
            if curr_hash == needle_hash and self.checkEqual(haystack[i : i + n], needle):
                res += 1
        return -1
        
        
    def get_hash(self, s):
        hash = 0
        for i in range(len(s)):
            hash += ord(s[i]) * (self.prime ** i)
        return hash
    
    def update_hash(self, previous_hash, delete_char, new_char, len_needle):
        previous_hash -= ord(delete_char)
        previous_hash /= self.prime
        new_hash = previous_hash + ord(new_char) * (self.prime ** (len_needle - 1))
        return new_hash
    
    def checkEqual(self, s, t):
        return s == t

Solution no.3: -------------------------------- KMP ------------------------------------ https://www.youtube.com/watch?v=BXCEFAzhxGY
----------------------------------------------- O(m + n) T,  O(m) S
class Solution(object):
    def strStr(self, haystack, needle):
        """
        :type haystack: str
        :type needle: str
        :rtype: int
        """
        if haystack == None or needle == None:
            return -1
        i, j, m, n = -1, 0, len(haystack), len(needle)
        next = [-1] * n                                          # next here is the table to check is there a subffix that
                                                                 # also a prefix
                                                                 # here we use -1 instead of 0 to initilize, so that latter, 
                                                                 # j can be directly assign to next[j] instead next[j - 1]
        while j < n - 1:                                         # j < n - 1 without <= is for avoiding index error
                                                                 # latter we will probably do j + 1, if j == (n - 1) + 1
                                                                 # => next[j]: error
                                                                 # we also do not need next[n - 1] because it is already the last,
                                                                 # 不可能存在它后面的字母不match，然后需要用它来找prefix的情况
            if i == -1 or needle[i] == needle[j]:                # if i == -1 => there are no existing prefix to use, just increase i, j
                i, j = i + 1, j + 1
                next[j] = i
            else:                                                
                i = next[i]                                      # why i = next[i] ????
                                                                 # when needle[i] != needle[j], i is like the mismatch character,
                                                                 # it should return to the rightest newpossible prefix's index: next[i]
        i = j = 0
        while i < m and j < n:
            if j == -1 or haystack[i] == needle[j]:
                i, j = i + 1, j + 1
            else:
                j = next[j]
        if j == n:
            return i - n
        return -1
