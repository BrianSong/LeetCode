Given a binary tree

struct Node {
  int val;
  Node *left;
  Node *right;
  Node *next;
}
Populate each next pointer to point to its next right node. If there is no next right node, the next pointer should be set to NULL.

Initially, all next pointers are set to NULL.

Note:

You may only use constant extra space.
Recursive approach is fine, implicit stack space does not count as extra space for this problem.


Solution no.1: -------------------------------------------------- BFS
----------------------------------------------------------------- O(n) T and S
"""
# Definition for a Node.
class Node(object):
    def __init__(self, val, left, right, next):
        self.val = val
        self.left = left
        self.right = right
        self.next = next
"""
class Solution(object):
    def connect(self, root):
        """
        :type root: Node
        :rtype: Node
        """
        if not root:
            return None
        queue = [root]
        while queue:
            curr_l = len(queue)
            for i in range(len(queue)):
                pop_node = queue.pop(0)
                if i != curr_l - 1:                           # KEY, "i != curr_l - 1" instead of "if queue"
                    pop_node.next = queue[0]
                if pop_node.left:
                    queue.append(pop_node.left)
                if pop_node.right:
                    queue.append(pop_node.right)
        return root

Solution no.2: ---------------------------------------- Iterative -------------------------- https://www.youtube.com/watch?v=mBVN8G-pIzU
--------------------------------------------------- O(n) T: Although 2 while loops, but we only operate on each node once,
--------------------------------------------------- and inside each operation, the T only O(1), O(1) S
"""
# Definition for a Node.
class Node(object):
    def __init__(self, val, left, right, next):
        self.val = val
        self.left = left
        self.right = right
        self.next = next
"""
class Solution(object):
    def connect(self, root):
        """
        :type root: Node
        :rtype: Node
        """
        dummynode = Node()
        dummynode.next = root
        childhead, child = None, None
        while root:                                       # Use two while loops for traversing right and down
            while root:
                if root.left:                             # Two if statments since it is only a binary tree, not "perfect"
                                                          # the root.left or root.right may be None
                    if not childhead:                     # Means we just start the traverse in the child level nodes
                        childhead = root.left
                        child = root.left
                    else:
                        child.next = root.left
                        child = child.next
                if root.right:
                    if not childhead:
                        childhead = root.right
                        child = root.right
                    else:
                        child.next = root.right
                        child = child.next
                root = root.next                          # Going right
            root = childhead                              # Going down
            child = None                                  # IMPORTANT !!!!!!!!!!!!!!!!!!!!!!!!!!!!
                                                          # We MUST empty the child and childhead at the end of every outter while loop
                                                          # Otherwise, will bring TLE error
            childhead = None                             
        return dummynode.next


Java Version:
/*
// Definition for a Node.
class Node {
    public int val;
    public Node left;
    public Node right;
    public Node next;

    public Node() {}
    
    public Node(int _val) {
        val = _val;
    }

    public Node(int _val, Node _left, Node _right, Node _next) {
        val = _val;
        left = _left;
        right = _right;
        next = _next;
    }
};
*/
class Solution {
    public Node connect(Node root) {
        if (root == null) {
            return null;
        }
        Node currNode = root;
        while (currNode != null) {
            Node childHead = null, currChild = null;
            while (currNode != null) {
                if (currNode.left != null) {
                    if (childHead == null) {
                        childHead = currNode.left;
                        currChild = currNode.left;
                    } else {
                        currChild.next = currNode.left;
                        currChild = currChild.next;
                    }
                }
                if (currNode.right != null) {
                    if (childHead == null) {
                        childHead = currNode.right;
                        currChild = currNode.right;
                    } else {
                        currChild.next = currNode.right;
                        currChild = currChild.next;
                    }
                }
                currNode = currNode.next;
            }
            currNode = childHead;
        }
        return root;
    }
}
