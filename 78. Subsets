Given a set of distinct integers, nums, return all possible subsets (the power set).

Note: The solution set must not contain duplicate subsets.

Example:

Input: nums = [1,2,3]
Output:
[
  [3],
  [1],
  [2],
  [1,2,3],
  [1,3],
  [2,3],
  [1,2],
  []
]

Solution:
class Solution(object):
    def subsets(self, nums):
        if nums is None or len(nums) == 0:
            return None
        clist = []
        res = []
        currIdex = 0
        self.sub_helper(sorted(nums), res, clist, currIdex) # The nums needed to be sorted first
        """
        :type nums: List[int]
        :rtype: List[List[int]]
        """
        return res
'''
通过分析之后，得出了每一步递归需要做的事情：
1. clist -> res
2. 从可用的中选一个，并且update clist
3. call the function
4. remove the element for recrusion purpose
'''
  
    
    def sub_helper(self, nums, res, clist, currIdex):
        res.append(clist[:]) # [:] instead of []      # STEP 1
        for i in range(currIdex, len(nums)):          # STEP 2 Use a for loop to get every possible result
            clist.append(nums[i])                     
            self.sub_helper(nums, res, clist, i + 1)  # STEP 3 i = i + 1 to make sure the element append in the next help function must
                                                      # come from the later half of itself
            clist.pop()                               # STEP 4
        
        
       
                
                
  
