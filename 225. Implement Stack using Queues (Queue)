Implement the following operations of a stack using queues.

push(x) -- Push element x onto stack.
pop() -- Removes the element on top of the stack.
top() -- Get the top element.
empty() -- Return whether the stack is empty.
Example:

MyStack stack = new MyStack();

stack.push(1);
stack.push(2);  
stack.top();   // returns 2
stack.pop();   // returns 2
stack.empty(); // returns false
Notes:

You must use only standard operations of a queue -- which means only push to back, peek/pop from front, size, 
and is empty operations are valid.
Depending on your language, queue may not be supported natively. You may simulate a queue by using a list or deque 
(double-ended queue), as long as you use only standard operations of a queue.
You may assume that all operations are valid (for example, no pop or top operations will be called on an empty stack).

Solution no.1: ------------------------------------------------------------ Two Queue
----------------------------------------- push(): O(1) T, pop(): O(n) T, top(): O(n) T, empty(): O(1) T, O(n) S
class MyStack(object):

    def __init__(self):
        """
        Initialize your data structure here.
        """
        self.queue1 = []
        self.queue2 = []

    def push(self, x):
        """
        Push element x onto stack.
        :type x: int
        :rtype: None
        """
        self.queue1.append(x)
        

    def pop(self):
        """
        Removes the element on top of the stack and returns that element.
        :rtype: int
        """
        while len(self.queue1) > 1:
            self.queue2.append(self.queue1.pop(0))
        self.queue1, self.queue2 = self.queue2, self.queue1                     # IMPORTANT !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
                                                                                # The MOST CLEVER step in this question,
                                                                                # Instead of return all the element in self.queue2
                                                                                # back to self.queue1, we can just simply swap them !!!!
        return self.queue2.pop(0)
        

    def top(self):
        """
        Get the top element.
        :rtype: int
        """
        while len(self.queue1) > 1:
            self.queue2.append(self.queue1.pop(0))
        return self.queue1[0]

    def empty(self):
        """
        Returns whether the stack is empty.
        :rtype: bool
        """
        return True if not self.queue1 and not self.queue2 else False
        


# Your MyStack object will be instantiated and called as such:
# obj = MyStack()
# obj.push(x)
# param_2 = obj.pop()
# param_3 = obj.top()
# param_4 = obj.empty()


Solution no.2: ---------------------------------------- One Queue
----------------------------------------- push(): O(n) T, pop(): O(1) T, top(): O(1) T, empty(): O(1) T, O(n) S
class MyStack(object):

    def __init__(self):
        """
        Initialize your data structure here.
        """
        self.queue1 = []
        
    def push(self, x):
        """
        Push element x onto stack.
        :type x: int
        :rtype: None
        """
        self.queue1.append(x)
        for i in range(len(self.queue1) - 1):                                  # The key for one queue is to let this queue behave
                                                                               # like stack by reordering the queue
            self.queue1.append(self.queue1.pop(0))
        print self.queue1
        

    def pop(self):
        """
        Removes the element on top of the stack and returns that element.
        :rtype: int
        """
        return self.queue1.pop(0)

    def top(self):
        """
        Get the top element.
        :rtype: int
        """
        return self.queue1[0]
        

    def empty(self):
        """
        Returns whether the stack is empty.
        :rtype: bool
        """
        return False if self.queue1 else True
        


# Your MyStack object will be instantiated and called as such:
# obj = MyStack()
# obj.push(x)
# param_2 = obj.pop()
# param_3 = obj.top()
# param_4 = obj.empty()
