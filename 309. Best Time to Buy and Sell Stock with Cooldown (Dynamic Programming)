Say you have an array for which the ith element is the price of a given stock on day i.

Design an algorithm to find the maximum profit. You may complete as many transactions as you like 
(ie, buy one and sell one share of the stock multiple times) with the following restrictions:

You may not engage in multiple transactions at the same time (ie, you must sell the stock before you buy again).
After you sell your stock, you cannot buy stock on next day. (ie, cooldown 1 day)
Example:

Input: [1,2,3,0,2]
Output: 3 
Explanation: transactions = [buy, sell, cooldown, buy, sell]


Solution no.1: ------------------------------------------------------ Dynamic Programming
class Solution(object):
    def maxProfit(self, prices):
        """
        :type prices: List[int]
        :rtype: int
        """
        if not prices:
            return 0
        buy, sell = [0 for i in range(len(prices))], [0 for i in range(len(prices))] # buy[i]: Max profit till index i. 
                                                                                     # The series of transaction is ending with a buy.
                                                                                     # sell[i]: Max profit till index i. 
                                                                                     # The series of transaction is ending with a sell.
                                                                                     # Till index i, the buy / sell action must happen 
                                                                                     # and must be the last action. 
                                                                                     # It may not happen at index i. 
                                                                                     # It may happen at i - 1, i - 2, ... 0.
        buy[0], sell[0] = -prices[0], 0
        for i in range(1, len(prices)):
            buy[i] = max(buy[i - 1], sell[i - 2] - prices[i])  # buy[i]: To make a decision whether to buy at i, we either take a rest, 
                                                               # by just using the old decision at i - 1, or sell at/before i - 2, 
                                                               # then buy at i
                                                               # We cannot sell at i - 1, then buy at i, because of cooldown
            sell[i] = max(sell[i - 1], buy[i - 1] + prices[i])
        return sell[-1]                                        # In the end we return sell[-1]. 
                                                               # Apparently we cannot finally end up with a buy. 
                                                               # In that case, we would rather take a rest at n - 1.
                                                               
                                                               
                                                               
Solution no.2: ----------------------- Optimize to O(1) Space
class Solution(object):
    def maxProfit(self, prices):
        """
        :type prices: List[int]
        :rtype: int
        """
        if not prices:
            return 0
        b0, s0 = -prices[0], 0             # DP solution only depending on i - 1 and i - 2 can be optimized using O(1) space.
                                           # Let b2, b1, b0 represent buy[i - 2], buy[i - 1], buy[i]
                                           # Let s2, s1, s0 represent sell[i - 2], sell[i - 1], sell[i]
        b1, s1, s2 = b0, 0, 0              # IMPORTANT !!!!!!!! b1 must be set to equal to b0 instead of 0
                                           # because b1 represet buy[i - 1] and i == 1
                                           # so, buy[i - 1] should be buy[0] which is b0 instead of 0
        for i in range(1, len(prices)):
            b0 = max(b1, s2 - prices[i])
            s0 = max(s1, b1 + prices[i])
            s2 = s1
            b1 = b0
            s1 = s0
        return s0
