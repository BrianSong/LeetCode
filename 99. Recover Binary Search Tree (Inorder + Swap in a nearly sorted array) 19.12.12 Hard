Two elements of a binary search tree (BST) are swapped by mistake.

Recover the tree without changing its structure.

Example 1:

Input: [1,3,null,null,2]

   1
  /
 3
  \
   2

Output: [3,1,null,null,2]

   3
  /
 1
  \
   2
Example 2:

Input: [3,1,4,null,null,2]

  3
 / \
1   4
   /
  2

Output: [2,1,4,null,null,3]

  2
 / \
1   4
   /
  3
Follow up:

A solution using O(n) space is pretty straight forward.
Could you devise a constant space solution?


Solution no.1: ----------------------------------------------------- O(n) T and S
# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution(object):
    def recoverTree(self, root):
        """
        :type root: TreeNode
        :rtype: None Do not return anything, modify root in-place instead.
        """
        nums = self.inorder(root)
        x, y = self.find_swap(nums)
        print x, y
        self.reorder(root, x, y, 2)
    
    def inorder(self, root):
        return self.inorder(root.left) + [root.val] + self.inorder(root.right) if root else []
    
    def find_swap(self, nums):
        x, y = -1, -1
        for i in range(len(nums) - 1):
            if nums[i] > nums[i + 1]:
                y = nums[i + 1]
                if x == -1:                                 # We only update x under the condition: nums[i] > nums[i + 1]
                    x = nums[i]
                else:
                    break
        return x, y
    
    def reorder(self, root, x, y, count):
        if root:
            if root.val == x or root.val == y:
                root.val = x if root.val == y else y
                count -= 1
                if count == 0:
                    return
            self.reorder(root.left, x, y, count)            # Should be put outside of the previous if condition
            self.reorder(root.right, x, y, count)
            
            
# Follow up may be done in the future
