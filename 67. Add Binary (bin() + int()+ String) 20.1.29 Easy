Given two binary strings, return their sum (also a binary string).

The input strings are both non-empty and contains only characters 1 or 0.

Example 1:

Input: a = "11", b = "1"
Output: "100"
Example 2:

Input: a = "1010", b = "1011"
Output: "10101"

Solution no.1:
class Solution(object):
    def addBinary(self, a, b):
        return bin(int(a, 2) + int(b, 2))[2:]           # int -> bin: int(a, 2)
                                                        # bin -> int in string form: bin(a)[2:]
        """
        :type a: str
        :type b: str
        :rtype: str
        """
        
Solution no.2:   O(n) T, O(1) S
class Solution(object):
    def addBinary(self, a, b):
        a, b, res, carry = a[::-1], b[::-1], "", 0      # Using "carry"
        while len(a) < len(b):
            a, b = b, a
        for i in range(len(b)):                         # Totally three stages
            sumnum = carry + int(a[i]) + int(b[i])
            res += str(sumnum % 2)                      # For binary, we % 2, for decimal, we % 10
            carry = sumnum / 2
        for i in range(len(b), len(a)):
            sumnum = carry + int(a[i])
            res += str(sumnum % 2)
            carry = sumnum / 2
        if carry:
            res += str(carry)
        return res[::-1]
        """
        :type a: str
        :type b: str
        :rtype: str
        """

Java Version:
class Solution {
    public String addBinary(String a, String b) {
        if (a == null || a.length() == 0) {
            return b;
        }
        if (b == null || b.length() == 0) {
            return a;
        }
        
        char[] aArray = a.toCharArray(), bArray = b.toCharArray();
        StringBuilder res = new StringBuilder();
        
        int i = aArray.length - 1, j = bArray.length - 1;
        int v1;
        int v2;
        int carry = 0;
        int currSum;
        
        while (i >= 0 || j >= 0 || carry != 0) {
            v1 = (i >= 0) ? Character.getNumericValue(aArray[i --]) : 0;
            v2 = (j >= 0) ? Character.getNumericValue(bArray[j --]) : 0;
            currSum = v1 + v2 + carry;
            res.append(currSum % 2);
            carry = currSum / 2;
        }
        return res.reverse().toString();
    }
}
