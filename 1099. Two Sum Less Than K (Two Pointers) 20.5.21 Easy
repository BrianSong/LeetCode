Given an array A of integers and integer K, return the maximum S such that there exists i < j with A[i] + A[j] = S and S < K. 
If no i, j exist satisfying this equation, return -1.

 

Example 1:

Input: A = [34,23,1,24,75,33,54,8], K = 60
Output: 58
Explanation: 
We can use 34 and 24 to sum 58 which is less than 60.
Example 2:

Input: A = [10,20,30], K = 15
Output: -1
Explanation: 
In this case it's not possible to get a pair sum less that 15.
 

Note:

1 <= A.length <= 100
1 <= A[i] <= 1000
1 <= K <= 2000


Solution: -------------------------------------------------------- Two Pointers
------------------------------------------------------------------ O(nlogn) T and O(1) S
class Solution(object):
    def twoSumLessThanK(self, A, K):
        """
        :type A: List[int]
        :type K: int
        :rtype: int
        """
        A.sort()
        left, right = 0, len(A) - 1
        res = float('-inf')
        while left < right:
            if A[left] + A[right] < K:
                res = max(res, A[left] + A[right])
                left += 1
            else:                                             # when A[left] + A[right] == K, it is the same as A[left] + A[right] > K
                                                              # they are the same, we just decrease right by 1
                right -= 1
        return res if res != float('-inf') else -1



Updated Python:
class Solution(object):
    def twoSumLessThanK(self, A, K):
        """
        :type A: List[int]
        :type K: int
        :rtype: int
        """
        A.sort()
        left, right = 0, len(A) - 1
        res = -1
        while left < right:
            curr_sum = A[left] + A[right]
            if curr_sum >= K:
                right -= 1
            else:
                res = max(res, curr_sum)
                left += 1
        return res
        
        
        
C++ Version:
class Solution {
public:
    int twoSumLessThanK(vector<int>& A, int K) {
        sort(A.begin(), A.end());
        int res {-1};
        int left = 0, right = A.size() - 1;
        int curr_sum {};
        while (left < right) {
            curr_sum = A[left] + A[right];
            if (curr_sum >= K) {
                right--;
            } else {
                res = max(res, curr_sum);
                left++;
            }
        }
        return res;
    }
};
