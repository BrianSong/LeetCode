120. Triangle
Medium

1059

114

Favorite

Share
Given a triangle, find the minimum path sum from top to bottom. Each step you may move to adjacent numbers on the row below.

For example, given the following triangle

[
     [2],
    [3,4],
   [6,5,7],
  [4,1,8,3]
]
The minimum path sum from top to bottom is 11 (i.e., 2 + 3 + 5 + 1 = 11).

Note:

Bonus point if you are able to do this using only O(n) extra space, where n is the total number of rows in the triangle.

Solution: ---------------------------------------------------------- "minimun" path sum -> Dynamic Programming obviously
class Solution(object):
    def minimumTotal(self, triangle):
        if triangle is None or len(triangle) == 0:
            return 0
        size = len(triangle)
        dp = triangle[:][:]                                           # Step no.1
        for i in range(size):
            for j in range(i + 1):
                if i == j == 0:                                       # Step no.2.1
                    continue
                elif j == 0 and i > 0:                                # Step no.2.2
                    dp[i][j] += dp[i - 1][j]
                elif i == j:                                          # Step no.2.3, should use if, elif, else in between,
                                                                      # because step no.2 and step no.3 cannot be overlapped
                    dp[i][j] += dp[i - 1][j - 1]
                else:                                                 # Step no.3
                    dp[i][j] += min(dp[i - 1][j - 1], dp[i - 1][j])
        return min(dp[size - 1])                                      # Step no.4
        """
        :type triangle: List[List[int]]
        :rtype: int
        """
