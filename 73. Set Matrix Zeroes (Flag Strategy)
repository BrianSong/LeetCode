Given a m x n matrix, if an element is 0, set its entire row and column to 0. Do it in-place.

Example 1:

Input: 
[
  [1,1,1],
  [1,0,1],
  [1,1,1]
]
Output: 
[
  [1,0,1],
  [0,0,0],
  [1,0,1]
]
Example 2:

Input: 
[
  [0,1,2,0],
  [3,4,5,2],
  [1,3,1,5]
]
Output: 
[
  [0,0,0,0],
  [0,4,5,0],
  [0,3,1,0]
]
Follow up:

A straight forward solution using O(mn) space is probably a bad idea.
A simple improvement uses O(m + n) space, but still not the best solution.
Could you devise a constant space solution?

Solution no.1: ------------------------------------------- Brute O(1) space very inefficient
---------------------------------------------------------- O((m * n) * (m + n)) T, O(1) S
class Solution(object):
    def setZeroes(self, matrix):
        for i in range(len(matrix)):
            for j in range(len(matrix[0])):
                if matrix[i][j] == 0:
                    for k in range(len(matrix)):
                        matrix[k][j] = "." if matrix[k][j] != 0 else 0           # VERY Pythonic: A = B IF XXXXX ELSE C
                    for k in range(len(matrix[0])):
                        matrix[i][k] = "." if matrix[i][k] != 0 else 0
        for i in range(len(matrix)):
            for j in range(len(matrix[0])):
                if matrix[i][j] == ".":
                    matrix[i][j] = 0
        """
        :type matrix: List[List[int]]
        :rtype: None Do not return anything, modify matrix in-place instead.
        """
        
  Solution no.2: -------------------------------------------- Flag Strategy
  ----------------------------------------------------------- O(mn) T, O(1) S
  '''
  We can use the first cell of every row and column as a flag. This flag would determine whether a row or column has been set to zero.
  '''
  class Solution(object):
    def setZeroes(self, matrix):
        R, C, is_column = len(matrix), len(matrix[0]), False
        for i in range(R):
            # Since first cell for both first row and first column is the same i.e. matrix[0][0]
            # We can use an additional variable for either the first row/column.
            # For this solution we are using an additional variable for the first column
            # and using matrix[0][0] for the first row.
            if matrix[i][0] == 0:
                is_column = True
            for j in range(1, C):
                # If an element is zero, we set the first element of the corresponding row and column to 0
                if matrix[i][j] == 0:
                    matrix[i][0], matrix[0][j] = 0, 0
        # Iterate over the array once again and using the first row and first column, update the elements.
        for i in range(1, R):
            for j in range(1, C):
                if matrix[i][0] == 0 or matrix[0][j] == 0:
                    matrix[i][j] = 0
        # See if the first row needs to be set to zero as well
        if matrix[0][0] == 0:                                             # This cannot be integrated into the last condition
                                                                          # to make it become "for i in range(R):"
                                                                          # Why? Here we are using the first row and first column
                                                                          # as flag, we cannot set all the first row to zero as long as 
                                                                          # matrix[0][0] is zero, if we do this, all will be zero
                                                                          # when matrix[0][0] is 0, we can only set the first row
                                                                          # to zero after all the element except the first row
                                                                          # and first column has been assigned
            for j in range(C):
                matrix[0][j] = 0
        # See if the first column needs to be set to zero as well     
        if is_column:
            for i in range(R):
                matrix[i][0] = 0
         
        """
        :type matrix: List[List[int]]
        :rtype: None Do not return anything, modify matrix in-place instead.
        """
