In a binary tree, the root node is at depth 0, and children of each depth k node are at depth k+1.

Two nodes of a binary tree are cousins if they have the same depth, but have different parents.

We are given the root of a binary tree with unique values, and the values x and y of two different nodes in the tree.

Return true if and only if the nodes corresponding to the values x and y are cousins.

 

Example 1:


Input: root = [1,2,3,4], x = 4, y = 3
Output: false
Example 2:


Input: root = [1,2,3,null,4,null,5], x = 5, y = 4
Output: true
Example 3:



Input: root = [1,2,3,null,4], x = 2, y = 3
Output: false
 

Note:

The number of nodes in the tree will be between 2 and 100.
Each node has a unique integer value from 1 to 100.


Solution: ----------------------------------------------- BFS + HashTable
--------------------------------------------------------- O(n) T, O(n) S
# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution(object):
    def isCousins(self, root, x, y):
        """
        :type root: TreeNode
        :type x: int
        :type y: int
        :rtype: bool
        """
        if not root:
            return False
        queue, HashTable, parent = [], {}, None
        queue.append((root, parent))
        while queue:
            HashTable = {}                                              # 每一层都更新HashTable 
            for i in range(len(queue)):
                root, parent = queue.pop(0)
                HashTable[root.val] = parent
                if root.left:
                    queue.append((root.left, root))
                if root.right:
                    queue.append((root.right, root))
            if x in HashTable and y in HashTable:                       # 一层一层的检查
                if HashTable[x] != HashTable[y]:
                    return True
                else:
                    return False
        return False


Java Version:
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public boolean isCousins(TreeNode root, int x, int y) {
        if (root == null) {
            return false;
        }
        Queue<TreeNode> q = new LinkedList<>();
        q.offer(root);
        while (q.size() != 0) {
            int currSize = q.size();
            boolean findX = false, findY = false;
            for (int i = 0; i < currSize; i ++) {
                TreeNode popNode = q.poll();
                if (popNode.val == x) {
                    findX = true;
                }
                if (popNode.val == y) {
                    findY = true;
                }
                if (popNode.left != null && popNode.right != null) {
                    if (popNode.left.val == x && popNode.right.val == y) {
                        return false;
                    }
                    if  (popNode.right.val == x && popNode.left.val == y) {
                        return false;
                    }
                }
                if (popNode.left != null) {
                    q.offer(popNode.left);
                }
                if (popNode.right != null) {
                    q.offer(popNode.right);
                }
            }
            if (findX && findY) {
                return true;
            }
        }
        return false;
    }
}
