Suppose an array sorted in ascending order is rotated at some pivot unknown to you beforehand.

(i.e., [0,1,2,4,5,6,7] might become [4,5,6,7,0,1,2]).

You are given a target value to search. If found in the array return its index, otherwise return -1.

You may assume no duplicate exists in the array.

Your algorithm's runtime complexity must be in the order of O(log n).

Example 1:

Input: nums = [4,5,6,7,0,1,2], target = 0
Output: 4
Example 2:

Input: nums = [4,5,6,7,0,1,2], target = 3
Output: -1


Solution: ------------------------------------------------- Binary Search
----------------------------------------------------------- O(logn) T, O(1) S
class Solution(object):
    def search(self, nums, target):
        """
        :type nums: List[int]
        :type target: int
        :rtype: int
        """
        if len(nums) == 0: return -1
        left, right = 0, len(nums) - 1
        while left <= right:
            mid = (left + right) / 2
            if nums[mid] == target:
                return mid
            if nums[left] <= nums[mid]:                         # The left half is continuous sorted ascending list
                if nums[left] <= target <= nums[mid]:           # if target is in the left continuous sorted ascending list,
                                                                # we just update the right to the middle - 1 and jump into the normal
                                                                # sorted list binary search step
                    right = mid - 1
                else:                                           # if target is not in this continuous sorted ascending list, 
                                                                # the only thing we can do is to update the left to middle + 1
                    left = mid + 1
            else:                                               # The right half is continuous sorted ascending list
                                                                # because the left or right half must have one continuous sorted list 
                if nums[mid] <= target <= nums[right]:          # the same strategy
                    left = mid + 1
                else:
                    right = mid - 1
        return -1
