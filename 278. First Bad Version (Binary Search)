You are a product manager and currently leading a team to develop a new product. 
Unfortunately, the latest version of your product fails the quality check. 
Since each version is developed based on the previous version, all the versions after a bad version are also bad.

Suppose you have n versions [1, 2, ..., n] and you want to find out the first bad one, which causes all the following ones to be bad.

You are given an API bool isBadVersion(version) which will return whether version is bad. 
Implement a function to find the first bad version. You should minimize the number of calls to the API.

Example:

Given n = 5, and version = 4 is the first bad version.

call isBadVersion(3) -> false
call isBadVersion(5) -> true
call isBadVersion(4) -> true

Then 4 is the first bad version. 


Solution: ------------------------------------------------------- Binary Search
# The isBadVersion API is already defined for you.
# @param version, an integer
# @return a bool
# def isBadVersion(version):

class Solution(object):
    def firstBadVersion(self, n):
        """
        :type n: int
        :rtype: int
        """
        left, right = 1, n
        while left <= right:                          # Why left <= right and return left ???
                                                      # In the last one iteration, left == right
                                                      # Why? because left ++ or right --, they will not happen in the same time here,
                                                      # So, left == right will always become the last case
                                                      # After left == right, mid == left == right
                                                      # if isBadVersion(mid) is True, it means it is the first bad one, so right --
                                                      # we return left which is the answer
                                                      # elif isBadVersion(mid) is False. it means it is the leftest to the first bad one
                                                      # and here left ++, which also become the answer
                                                      # So, we return left
            mid = left + (right - left) / 2           # Why not mid = (left + right) / 2 ? To avoid overflow even in Python impossible
                                                      # Because (left + right) / 2 can exceed the integer limit 
                                                      # whereas left + (right - left)/2 doesn't exceed the integer bounds.
            if isBadVersion(mid):
                right = mid - 1
            else:
                left = mid + 1
        return left
