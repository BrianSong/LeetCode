Given a positive integer n, find the least number of perfect square numbers (for example, 1, 4, 9, 16, ...) which sum to n.

Example 1:

Input: n = 12
Output: 3 
Explanation: 12 = 4 + 4 + 4.
Example 2:

Input: n = 13
Output: 2
Explanation: 13 = 4 + 9.

Solution: ------------------------------------------------------ Dynamic Programming
---------------------------------------------------------------- O(n) T, O(n) S
class Solution(object):
    def numSquares(self, n):
        if n <= 0:                                               # Pointless when n is not positive
            return None
        dp = [0] * (n + 1)                                       # Create a dynamic programming list for storing answer and 
                                                                 # make connection between past and present: characteristic for DP
                                                                 # When we initialize the list with a certain value,
                                                                 # we cannot write "dp = [] * 10", in this case,
                                                                 # dp[1] will return wrong, so we must write [0] * 10 or [None] * 10
                                                                 # and it is very important to think about what initial value we should
                                                                 # take to initilize the list. Here [None] * 10 is wrong since we use
                                                                 # min() later, this function cannot compare between None and int.
                                                                 # Also, [1] * 10 is also wrong, since we demand dp[0] should be 0 
                                                                 # for later dp[i - j * j] + 1, if dp[0] == 1, dp[1] will be 2 - wrong
        for i in range(1, n + 1):
            local_res = float('inf')
            j = 1                                                # j cannot start from 0, firstly, 0 is not a perfect square,
                                                                 # secondly, if j = 0, then all local_res will be 1 because we
                                                                 # initilize the dp with all 0
            while i - j * j >= 0:                                # Try every possible perfect square number 
                local_res = min(local_res, dp[i - j * j] + 1)    # Update local_res and find its minimum as required by the question
                '''
                why dp[i - j * j] + 1 ?
                i and i - j * j 差的就是这一个perfect square number j * j, so in dp[], they only differ by 1
                '''
                j += 1
            dp[i] = local_res
        return dp[-1]
        """
        :type n: int
        :rtype: int
        """
