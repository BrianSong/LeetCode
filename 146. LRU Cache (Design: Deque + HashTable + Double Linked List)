Design and implement a data structure for Least Recently Used (LRU) cache. It should support the following operations: get and put.

get(key) - Get the value (will always be positive) of the key if the key exists in the cache, otherwise return -1.
put(key, value) - Set or insert the value if the key is not already present. 
When the cache reached its capacity, it should invalidate the least recently used item before inserting a new item.

The cache is initialized with a positive capacity.

Follow up:
Could you do both operations in O(1) time complexity?

Example:

LRUCache cache = new LRUCache( 2 /* capacity */ );

cache.put(1, 1);
cache.put(2, 2);
cache.get(1);       // returns 1
cache.put(3, 3);    // evicts key 2
cache.get(2);       // returns -1 (not found)
cache.put(4, 4);    // evicts key 1
cache.get(1);       // returns -1 (not found)
cache.get(3);       // returns 3
cache.get(4);       // returns 4


Solution: -------------------------------------------------------------------- Design: Deque + HashTable
----------------------------------------- O(n) S, and O(n) T for get() and put() due to "self.deque.remove(key))"
class LRUCache(object):

    def __init__(self, capacity):
        """
        :type capacity: int
        """
        self.capacity = capacity
        self.deque = collections.deque([])                # Introduce a deque to record the priority of the elements
        self.dict = {}

    def get(self, key):
        """
        :type key: int
        :rtype: int
        """
        if not key in self.dict:
            return -1
        else:
            self.deque.remove(key)                        # Once we call the get(), we let this element's priority to the highest
            self.deque.append(key)
            return self.dict[key]

    def put(self, key, value):
        """
        :type key: int
        :type value: int
        :rtype: None
        """
        if key in self.dict:                              # For example, 2:6 put, 1:5 put, 1:2 put
                                                          # the completed dictionary should be 2:6 and 1:2 => elif 
                                                          # As long as the key already existed, we do not care about the capacity
                                                          # the only thing we need to do is to update this 1:5 to 1:2 (Same Key)
            self.deque.remove(key)
        else:
            if len(self.deque) >= self.cap:
                remove_key = self.deque.popleft()         # Remove the Least Recently Used element (lowest priority) 
                                                          # We can "del self.dict[remove_key]" to remove specific element with known key
                                                          # And here is the reason why we choose deque instead of queue in this question
                                                          # because deque.popleft() => O(1) T, while list.pop(0) => O(n) T
                                                          
                del self.dict[remove_key]
        self.deque.append(key)
        self.dict[key] = value
        


# Your LRUCache object will be instantiated and called as such:
# obj = LRUCache(capacity)
# param_1 = obj.get(key)
# obj.put(key,value)


Solution no.2: -------------------------------------------------- HashTable + Double Linked List
----------------------------------------- O(n) S, and O(1) T
class DLinkedNode():                                            # here, cannot have object or initial setting ??? Why ???
    def __init__(self):
        self.key = 0
        self.val = 0
        self.prev = None                                        # Double means we do not only have "next", we also have "prev"
        self.next = None


class LRUCache(object):
    
    def add_node(self, node):
        node.prev = self.head
        node.next = self.head.next
        self.head.next.prev = node
        self.head.next = node
        
    def remove_node(self, node):
        prev = node.prev
        next = node.next
        prev.next = next
        next.prev = prev
        
    def move_exist_to_front(self, node):
        self.remove_node(node)
        self.add_node(node)
    
    def pop_from_tail(self):
        node = self.tail.prev
        self.remove_node(node)
        return node

    def __init__(self, capacity):
        """
        :type capacity: int
        """
        self.d = {}
        self.cap = capacity
        self.head = DLinkedNode()
        self.tail = DLinkedNode()
        self.head.next = self.tail
        self.tail.prev = self.head
        

    def get(self, key):
        """
        :type key: int
        :rtype: int
        """
        if key in self.d:
            self.move_exist_to_front(self.d[key])
            return self.d[key].val
        else:
            return -1
        

    def put(self, key, value):
        """
        :type key: int
        :type value: int
        :rtype: None
        """
        if not key in self.d:
            if len(self.d) == self.cap:
                remove_node = self.pop_from_tail()
                del self.d[remove_node.key]
            newNode = DLinkedNode()
            newNode.val = value
            newNode.key = key
            self.d[key] = newNode
            self.add_node(newNode)                                    # The error took me one hour to find out !!!!!!!!!!!
                                                                      # here, we should call add_node() instead of move_exist_to_front()
        else:                                                               
            self.d[key].val = value
            self.move_exist_to_front(self.d[key])
        


# Your LRUCache object will be instantiated and called as such:
# obj = LRUCache(capacity)
# param_1 = obj.get(key)
# obj.put(key,value)
