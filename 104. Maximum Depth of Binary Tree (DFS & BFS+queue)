Given a binary tree, find its maximum depth.

The maximum depth is the number of nodes along the longest path from the root node down to the farthest leaf node.

Note: A leaf is a node with no children.

Example:

Given binary tree [3,9,20,null,null,15,7],

    3
   / \
  9  20
    /  \
   15   7
return its depth = 3.

Two solutions: ---------------------------------------------------------------- DFS
--------------------------------------- O(n) T, O(d) S where d is the maximum depth
class Solution(object):
    class Solution(object):
    def maxDepth(self, root):
        """
        :type root: TreeNode
        :rtype: int
        """
        return self.dfs(root)
    def dfs(self, root):
        if not root:                                            
            return 0
        if not root.left and not root.right:                        # Pre-processing makes the algo much faster
            return 1
        return max(self.dfs(root.left) if root.left else 0, self.dfs(root.right) if root.right else 0) + 1  # Another pre-processing
        
Solution no.2: --------------------------------------------------------- BFS & Queue
------------------------------------------- O(n) T, O(n) S
# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution(object):
    def maxDepth(self, root):
        if not root:
            return 0
        queue, res = [(root, 1)], 0
        while queue:
            pop_element, level = queue.pop(0)                       # QUEUE POP(0) !!!!!!!!!!! QUEUE POP(0) !!!!!!!!!!!!!!!!!!!!!!!!!!
            res = level
            if pop_element.left:
                queue.append((pop_element.left, level + 1))
            if pop_element.right:
                queue.append((pop_element.right, level + 1))
        return res
        
'''
As for the time complexity for both DFS and BFS are O(n) because  this is tree traversal, we must touch every node, 
making this O(n) where n is the number of nodes in the tree.
As for the space complexity:
Best case for DFS: a balanced tree => minimumize the depth of the tree => O(logN)
Worst case for DFS: severely unbalanced linear tree which contains only 1 element at each level => O(N)
Best case for BFS: severely unbalanced linear tree which contains only 1 element at each level => O(1)
Worse case for BFS: With a perfect fully balanced binary tree, this would be (n/2 + 1) nodes (the very last level) => O(logN) == O(N)
Worst Case for DFS will be the best case for BFS, and the Best Case for DFS will be the worst case for BFS !!!!
'''
