Given an array of size n, find the majority element. The majority element is the element that appears more than ⌊ n/2 ⌋ times.

You may assume that the array is non-empty and the majority element always exist in the array.

Example 1:

Input: [3,2,3]
Output: 3
Example 2:

Input: [2,2,1,1,1,2,2]
Output: 2

Solution:
class Solution(object):
    def majorityElement(self, nums):
        return sorted(nums)[len(nums)/2] # If the the majority element always exist in the array and it appears more than ⌊ n/2 ⌋ times,
                                         # then, it must appear in the middle of the sorted array
        """
        :type nums: List[int]
        :rtype: int
        """
'''
Bit Operation and Divide and Conqueror method will be extended later on.
'''

Updated Solution: -------------- Boyer-Moore Algorithm -------- https://gregable.com/2013/10/majority-vote-algorithm-find-majority.html
class Solution(object):
    def majorityElement(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        candidate, count = 0, 0
        for num in nums:
            if count == 0:
                candidate = num
            if candidate == num:
                count += 1
            else:
                count -= 1
        return candidate
