Sometimes people repeat letters to represent extra feeling, such as "hello" -> "heeellooo", "hi" -> "hiiii".  
In these strings like "heeellooo", we have groups of adjacent letters that are all the same:  "h", "eee", "ll", "ooo".

For some given string S, 
a query word is stretchy if it can be made to be equal to S by any number of applications of the following extension operation: 
choose a group consisting of characters c, and add some number of characters c to the group so that the size of the group is 3 or more.

For example, starting with "hello", we could do an extension on the group "o" to get "hellooo", 
but we cannot get "helloo" since the group "oo" has size less than 3.  
Also, we could do another extension like "ll" -> "lllll" to get "helllllooo".  
If S = "helllllooo", then the query word "hello" would be stretchy because of these two extension operations: 
query = "hello" -> "hellooo" -> "helllllooo" = S.

Given a list of query words, return the number of words that are stretchy. 

 

Example:
Input: 
S = "heeellooo"
words = ["hello", "hi", "helo"]
Output: 1
Explanation: 
We can extend "e" and "o" in the word "hello" to get "heeellooo".
We can't extend "helo" to get "heeellooo" because the group "ll" is not size 3 or more.
 

Notes:

0 <= len(S) <= 100.
0 <= len(words) <= 100.
0 <= len(words[i]) <= 100.
S and all words in words consist only of lowercase letters


Solution: --------------------------------------------------- Four Pointers
------------------------------------------------------------- O(N * L) T and O(1) S where L is the average length of word in words
class Solution(object):
    def expressiveWords(self, S, words):
        """
        :type S: str
        :type words: List[str]
        :rtype: int
        """
        res = 0
        for word in words:
            if self.check(S, word):
                res += 1
        return res
    
    def check(self, S, word):
        i, i_fast, j, j_fast, m, n = 0, 0, 0, 0, len(S), len(word)
        while i < m and j < n:
            if S[i] != word[j]:
                return False
            while i_fast < m and S[i] == S[i_fast]:                           # we update the fast pointer to the next different c
                i_fast += 1
            while j_fast < n and word[j] == word[j_fast]: 
                j_fast += 1
            if i_fast - i != j_fast - j and i_fast - i < max(3, j_fast - j):  # What we compare is the "i_fast - i" and "j_fast - j"
                                                                              # instead of "i_fast" and "j_fast"
                return False
            i = i_fast                                                        
            j = j_fast
        return i == m and j == n



C++ Version:
class Solution {
public:
    int expressiveWords(string S, vector<string>& words) {
        if (S.size() == 0 or words.size() == 0) {
            return 0;
        }
        int res{};
        for (string word : words) {
            if (check(S, word)) {
                res += 1;
            }
        }
        return res;
    }
    
    bool check(const string& S, const string& word) {
        int i{}, i_fast{}, j{}, j_fast{};
        while (i < S.size() && j < word.size()) {
            if (S[i] != word[j]) {
                return false;
            }
            while (i_fast < S.size() && S[i_fast] == S[i]) {
                i_fast += 1;
            }
            while (j_fast < word.size() && word[j_fast] == word[j]) {
                j_fast += 1;
            }
            if ((i_fast - i != j_fast - j) && i_fast - i < max(3, j_fast- j)) {
                return false;
            }
            i = i_fast;
            j = j_fast;
        }
        return i == S.size() && j == word.size();
    }
};
