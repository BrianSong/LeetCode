A sequence of number is called arithmetic if it consists of at least three elements 
and if the difference between any two consecutive elements is the same.

For example, these are arithmetic sequence:

1, 3, 5, 7, 9
7, 7, 7, 7
3, -1, -5, -9
The following sequence is not arithmetic.

1, 1, 2, 5, 7

A zero-indexed array A consisting of N numbers is given. A slice of that array is any pair of integers (P, Q) such that 0 <= P < Q < N.

A slice (P, Q) of array A is called arithmetic if the sequence:
A[P], A[p + 1], ..., A[Q - 1], A[Q] is arithmetic. In particular, this means that P + 1 < Q.

The function should return the number of arithmetic slices in the array A.


Example:

A = [1, 2, 3, 4]

return: 3, for 3 arithmetic slices in A: [1, 2, 3], [2, 3, 4] and [1, 2, 3, 4] itself.


Solution: ----------------------------------------------------- Dynamic Programming
class Solution(object):
    def numberOfArithmeticSlices(self, A):
        """
        :type A: List[int]
        :rtype: int
        """
        if not A or len(A) < 3:
            return 0
        dp, res = 0, 0                                        # dp stands for the number of the number of arithmetic slices
                                                              # whose end is i
                                                              # Use just dp insteand of dp list will reduce the space complexity
                                                              # from O(n) to O(1)
        for i in range(2, len(A)):
            if A[i] - A[i - 1] == A[i - 1] - A[i - 2]:        
                dp += 1                                       # Why dp += 1
                                                              # For example: 1 3 5 7 9 15 20 25 28 29
                                                              # when i == 2: 1 3 5 meets the requirement for arithmetic slice, dp = 1
                                                              # when i == 3: 3 5 7 also meets the requirement,
                                                              # The satified arithmetic slices increase from 1 to 2
                                                              # Why from 1 to 2,
                                                              # Because except the orginal 1 3 5 turns into 1 3 5 7,
                                                              # there is one more: 3 5 7, actually the increased one 
                                                              # is always the new length 3 arithmetic slice,
                res += dp                                     # However, the previous 1 3 5 also counts,
                                                              # so, res += dp instead of res = dp
            else:                                             # When the new length 3 arithmetic slice does not meet the requirements
                                                              # Everything starts from scratch.
                dp = 0
        return res
