A robot is located at the top-left corner of a m x n grid (marked 'Start' in the diagram below).

The robot can only move either down or right at any point in time. 
The robot is trying to reach the bottom-right corner of the grid (marked 'Finish' in the diagram below).

How many possible unique paths are there?

Note: m and n will be at most 100.

Example 1:

Input: m = 3, n = 2
Output: 3
Explanation:
From the top-left corner, there are a total of 3 ways to reach the bottom-right corner:
1. Right -> Right -> Down
2. Right -> Down -> Right
3. Down -> Right -> Right
Example 2:

Input: m = 7, n = 3
Output: 28

Solution: DP-dynamic programming
'''
DP standard 4-step procedure:
1. Find a variable to record the status 设置状态变量
2. Initialization 初始化
3. Transformation equation 转化方程
4. Return the result
'''

class Solution(object):
    def uniquePaths(self, m, n):
        dp = [[0 for x in range(m)] for y in range(n)]  # Step no.1: We set 一个 n*m 的矩阵来记录状态变量
                                                        # dp[i][j] is the number of ways that [0][0] can get to [i][j]
        for i in range(n):
            dp[i][0] = 1
        for j in range(m):                              # Step no.2: Initializaiton (Set the bounding value and we can get the value 
                                                        # of the rest elements using their values)
            dp[0][j] = 1
        for i in range(1, n):
            for j in range(1, m):
                dp[i][j] = dp[i-1][j] + dp[i][j-1]      # Step no.3: Transformation function
                                                        # 从其它位置到达当前位置，只有两种方法，从上或者从左，故相加
        return dp[n-1][m-1]                             # Step no.4: Return the result
        
        """
        :type m: int
        :type n: int
        :rtype: int
        """
#照片可看 文件传输助手 2019.04.12 
