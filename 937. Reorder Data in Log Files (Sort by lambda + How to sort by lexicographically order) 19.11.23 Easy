You have an array of logs.  Each log is a space delimited string of words.

For each log, the first word in each log is an alphanumeric identifier.  Then, either:

Each word after the identifier will consist only of lowercase letters, or;
Each word after the identifier will consist only of digits.
We will call these two varieties of logs letter-logs and digit-logs.  
It is guaranteed that each log has at least one word after its identifier.

Reorder the logs so that all of the letter-logs come before any digit-log.  
The letter-logs are ordered lexicographically ignoring identifier, with the identifier used in case of ties.  
The digit-logs should be put in their original order.

Return the final order of the logs.

 

Example 1:

Input: logs = ["dig1 8 1 5 1","let1 art can","dig2 3 6","let2 own kit dig","let3 art zero"]
Output: ["let1 art can","let3 art zero","let2 own kit dig","dig1 8 1 5 1","dig2 3 6"]
 

Constraints:

0 <= logs.length <= 100
3 <= logs[i].length <= 100
logs[i] is guaranteed to have an identifier, and a word after the identifier.


Solution: ----------------------------------------- Sort by lambda + How to sort by lexicographically order
--------------------------------------------------- O(nlogn) T and O(n) S
class Solution(object):
    def reorderLogFiles(self, logs):
        """
        :type logs: List[str]
        :rtype: List[str]
        """
        if not logs:
            return None
        letter = []
        digit = []
        for log in logs:
            if log.split()[1].isdigit():                    # log.split() not "".split(log) => "".join(log)
                digit.append(log)
            else:
                letter.append(log)
        letter.sort(key = lambda x: x.split()[0])           # The build-in function in Python can auto sort by lexicographically order
                                                            # Since the letter-logs are ordered lexicographically ignoring identifier, 
                                                            # with the identifier used in case of ties.
                                                            # So, sorted by identifier has lower priority which should be sorted first
        letter.sort(key = lambda x: x.split()[1:])          
        return letter + digit
