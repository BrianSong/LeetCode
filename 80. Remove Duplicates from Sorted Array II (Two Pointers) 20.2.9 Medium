Given a sorted array nums, remove the duplicates in-place such that duplicates appeared at most twice and return the new length.

Do not allocate extra space for another array, you must do this by modifying the input array in-place with O(1) extra memory.

Example 1:

Given nums = [1,1,1,2,2,3],

Your function should return length = 5, with the first five elements of nums being 1, 1, 2, 2 and 3 respectively.

It doesn't matter what you leave beyond the returned length.
Example 2:

Given nums = [0,0,1,1,1,1,2,3,3],

Your function should return length = 7, with the first seven elements of nums being modified to 0, 0, 1, 1, 2, 3 and 3 respectively.

It doesn't matter what values are set beyond the returned length.
Clarification:

Confused why the returned value is an integer but your answer is an array?

Note that the input array is passed in by reference, which means modification to the input array will be known to the caller as well.

Internally you can think of this:

// nums is passed in by reference. (i.e., without making a copy)
int len = removeDuplicates(nums);

// any modification to nums in your function would be known by the caller.
// using the length returned by your function, it prints the first len elements.
for (int i = 0; i < len; i++) {
    print(nums[i]);
}

Solution: ---------------------------------------------- Two Pointers ------------- https://www.youtube.com/watch?v=d4QrBMtg57I
-------------------------------------------------------- O(n) T, O(1) S
class Solution(object):
    def removeDuplicates(self, nums):
        if nums is None or len(nums) < 2:
            return len(nums)
        slow, fast = 2, 2                                                          # Start from 2 because the first two elements can be
                                                                                   # whatever it wants, even duplicate elements
        while fast <= len(nums) - 1:
            if nums[slow - 1] == nums[slow - 2] == nums[fast]:
                '''
                why "nums[slow - 1] == nums[slow - 2] and nums[fast] == nums[slow - 1]:"?
                fast pointer is the next element we would like to add to the result,
                the only case we want to avoid is three duplicate element in a roll, we can accept anything else
                so this three element cannot be the same
                IMPORTANT !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
                Instead of "nums[fast] == nums[fast - 1] == nums[fast - 2]" !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
                We do not care about nums[fast - 1] or nums[fast - 2], what we care about is nums[slow - 1] and nums[slow - 2]
                '''
                fast += 1
            else:
                '''
                except the only bad case: three duplicate element in a roll, we can accept anything else,
                so, we can assign the fast pointer value to slow pointer value,
                and update them
                '''
                nums[slow] = nums[fast]
                slow += 1
                fast += 1
        return slow                                                               # The slow pointer will be the answer
        """
        :type nums: List[int]
        :rtype: int
        """


Java Version:
class Solution {
    public int removeDuplicates(int[] nums) {
        if (nums == null || nums.length == 0) {
            return 0;
        }
        
        int slow = 2, fast = 2;
        
        while (fast < nums.length) {
            if (nums[fast] == nums[slow - 1] && nums[fast] == nums[slow - 2]) {
                fast ++;
            } else {
                nums[slow] = nums[fast];
                slow ++;
                fast ++;
            }
        }
        
        return slow;
    }
}
