Given an array which consists of non-negative integers and an integer m, 
you can split the array into m non-empty continuous subarrays. Write an algorithm to minimize the largest sum among these m subarrays.

Note:
If n is the length of array, assume the following constraints are satisfied:

1 ≤ n ≤ 1000
1 ≤ m ≤ min(50, n)
Examples:

Input:
nums = [7,2,5,10,8]
m = 2

Output:
18

Explanation:
There are four ways to split nums into two subarrays.
The best way is to split it into [7,2,5] and [10,8],
where the largest sum among the two subarrays is only 18.


Solution: ---------------------------------------------------- Dynamic Programming ----- https://www.youtube.com/watch?v=_k-Jb4b7b_0
-------------------------------------------------------------- O(n^2 * m) T and O(n * m) S
class Solution(object):
    def splitArray(self, nums, m):
        """
        :type nums: List[int]
        :type m: int
        :rtype: int
        """
        if not nums or m < 1:
            return None
        if m == 1:
            return sum(nums)
        n = len(nums)
        dp = [[0 for j in range(m)] for i in range(n)]               # use i nums, divide into j groups 
        dp[0][0] = nums[0]                                           # dp[0][0] = nums[0] instead of 0
        for i in range(1, n):                                        # Base case, when divided into only one group
            dp[i][0] = dp[i - 1][0] + nums[i]
        for i in range(1, n):
            for j in range(1, m):
                if j > i:
                    break
                curr_min = float('inf')
                curr_sub_sum = 0
                for k in range(i - 1, -1, -1):                       # Loop over k to divide 
                    curr_sub_sum += nums[k + 1]
                    temp_max = max(dp[k][j - 1], curr_sub_sum)
                    curr_min = min(curr_min, temp_max)
                dp[i][j] = curr_min
        return dp[-1][-1]
