Given a non-empty array of digits representing a non-negative integer, plus one to the integer.

The digits are stored such that the most significant digit is at the head of the list, 
and each element in the array contain a single digit.

You may assume the integer does not contain any leading zero, except the number 0 itself.

Example 1:

Input: [1,2,3]
Output: [1,2,4]
Explanation: The array represents the integer 123.
Example 2:

Input: [4,3,2,1]
Output: [4,3,2,2]
Explanation: The array represents the integer 4321.

Solution:
'''
We're given a list of digits, and the idea here is to convert that list to an integer, num. 
So each digit is multiplied by the proper place value and added to num. 
For example, if digits = [3, 8, 2, 5] then on the first iteration 3 is multiplied by 10 to the power of 4-1-0 = 3, 
so this results in 3000, which is added to num. Then 8 is multiplied by 10^2 and added to num, and so on.
The last step is to add 1 to num, convert it to a list and return that list.
'''
class Solution(object):
    def plusOne(self, digits):
        number = 0
        for i, digit in enumerate(digits):
            number += digit * 10 **(len(digits) - i - 1)
        return [int(i) for i in str(number + 1)]            # [int(i) for i in str(number + 1)] how to use for statement to build a list
        """
        :type digits: List[int]
        :rtype: List[int]
        """
