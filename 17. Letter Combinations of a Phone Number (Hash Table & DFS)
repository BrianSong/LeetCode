Given a string containing digits from 2-9 inclusive, return all possible letter combinations that the number could represent.

A mapping of digit to letters (just like on the telephone buttons) is given below. Note that 1 does not map to any letters.



Example:

Input: "23"
Output: ["ad", "ae", "af", "bd", "be", "bf", "cd", "ce", "cf"].
Note:

Although the above answer is in lexicographical order, your answer could be in any order you want.

Solution: ------------------------------------------------- https://www.youtube.com/watch?v=rqpYrqMDbSg
class Solution(object):
    def letterCombinations(self, digits):
        res = []
        if digits == "":
            return res
        dic = {                                                              # How to map multiple values into a key
            '2': ['a', 'b', 'c'], 
            '3': ['d', 'e', 'f'],
            '4': ['g', 'h', 'i'],
            '5': ['j', 'k', 'l'],
            '6': ['m', 'n', 'o'],
            '7': ['p', 'q', 'r', 's'],
            '8': ['t', 'u', 'v'],
            '9': ['w', 'x', 'y', 'z']            
        }
        currstr, index = "", 0                                             # Very classic two passing argument in DFS - curr and index
        self.dfs_help(currstr, index, digits, res, dic)
        return res
        """
        :type digits: str
        :rtype: List[str]
        """
    def dfs_help(self, currstr, index, digits, res, dic):
        if index == len(digits):                                            # Base Case
            res.append(currstr[:])
            return
        for letter in dic[digits[index]]:                                   # 在这些所有可能选择的选择中，先走一条路-----------DFS
                                                                            # for example: "234"
                                                                            # 一开始是2, 2对应的是['a', 'b', 'c']
                                                                            # 故在['a', 'b', 'c']中先选择 'a'这条路，继续往下递归
            self.dfs_help(currstr + letter, index + 1, digits, res, dic)    # update currstr(最终走完这条路后会加入答案中) 
                                                                          # and index(让这条路继续往下走到下一个分岔口----"3"对应的选择谁)
                                                             # and by passing currstr + letter, we do not need to use currstr.pop()
