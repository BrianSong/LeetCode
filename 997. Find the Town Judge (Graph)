In a town, there are N people labelled from 1 to N.  There is a rumor that one of these people is secretly the town judge.

If the town judge exists, then:

The town judge trusts nobody.
Everybody (except for the town judge) trusts the town judge.
There is exactly one person that satisfies properties 1 and 2.
You are given trust, an array of pairs trust[i] = [a, b] representing that the person labelled a trusts the person labelled b.

If the town judge exists and can be identified, return the label of the town judge.  Otherwise, return -1.

 

Example 1:

Input: N = 2, trust = [[1,2]]
Output: 2
Example 2:

Input: N = 3, trust = [[1,3],[2,3]]
Output: 3
Example 3:

Input: N = 3, trust = [[1,3],[2,3],[3,1]]
Output: -1
Example 4:

Input: N = 3, trust = [[1,2],[2,3]]
Output: -1
Example 5:

Input: N = 4, trust = [[1,3],[1,4],[2,3],[2,4],[4,3]]
Output: 3
 

Note:

1 <= N <= 1000
trust.length <= 10000
trust[i] are all different
trust[i][0] != trust[i][1]
1 <= trust[i][0], trust[i][1] <= N



Solution no.1: ---------------------------------------------------------- my own
class Solution(object):
    def findJudge(self, N, trust):
        """
        :type N: int
        :type trust: List[List[int]]
        :rtype: int
        """
        graph = {}
        for item in trust:
            f, t = item
            if f in graph:
                graph[f].append(t)
            else:
                graph[f] = [t]
        if len(graph) >= N:
            return -1
        for i in range(1, N + 1):
            if i not in graph:
                res = i
        for value in graph.values():
            if res not in value:
                return -1
        return res
        
Solution no.2: --------------------------------------------- Much more clever one
class Solution(object):
    def findJudge(self, N, trust):
        """
        :type N: int
        :type trust: List[List[int]]
        :rtype: int
        """
        count = [0] * (N + 1)                               # Consider trust as a graph, all pairs are directed edge
        for t in trust:
            count[t[0]] -= 1
            count[t[1]] += 1
        for i in range(1, N + 1):
            if count[i] == N - 1:                           # The point with in-degree - out-degree = N - 1 become the judge
                return i
        return -1
