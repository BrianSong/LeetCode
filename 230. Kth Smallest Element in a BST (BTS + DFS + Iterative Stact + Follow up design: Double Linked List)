Given a binary search tree, write a function kthSmallest to find the kth smallest element in it.

Note: 
You may assume k is always valid, 1 ≤ k ≤ BST's total elements.

Example 1:

Input: root = [3,1,4,null,2], k = 1
   3
  / \
 1   4
  \
   2
Output: 1
Example 2:

Input: root = [5,3,6,2,4,null,null,1], k = 3
       5
      / \
     3   6
    / \
   2   4
  /
 1
Output: 3

Solution no.1: ----------------------------------------------------------- BTS + DFS
--------------------------------------------------------------------- O(n) T, O(n) S
# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution(object):
    def kthSmallest(self, root, k):
        self.k = k                    # We can always use global variable inside our function to make the process easier,
                                      # However, we need to keep in mind that, for a big project, global variable may not be a good
                                      # choice, since we will have so many different functions, inside each function, we need to 
                                      # change the local variable's name to avoid repeating the global variable.
                                      # So we may need code with better encapsulation(封装性) for a big project
        self.res = 0
        self.kthsmallest_help(root)
        return self.res
        """
        :type root: TreeNode
        :type k: int
        :rtype: int
        """
    def kthsmallest_help(self, root):
        if root is None:                  # Condition
            return                        # End this level's recursion function and jump up to previous level immediately
        self.kthsmallest_help(root.left)  # Look into the left branch
        self.k = self.k - 1               # Only can reduce k only after the node.left is None (itself is the samllest now)
                                          # or all the left nodes have been transverse (all the node small than it have been counted)
        if self.k == 0:
            self.res = root.val
            return
        self.kthsmallest_help(root.right) # Look into the right branch and repeat the same process,
                                          # Literally no difference between left and right branch
                                          # Remember the characteristic of BTS,
                                          # the smallest node is the leftest node,
                                          # the second smallest node is the leftest node of the right subtree for the leftest node
                                          
Solution no.2: ------------------------------------ Using a stack to do iteratively
------ Time complexity : O(H+k), where H is a tree height. 
------ This complexity is defined by the stack, which contains at least H + k elements, 
------ since before starting to pop out one has to go down to a leaf. 
------ This results in O(logN+k) for the balanced tree and O(N+k) for completely unbalanced tree with all the nodes in the left subtree.
------ Space complexity : O(H+k), the same as for time complexity, O(N+k) in the worst case, and O(logN+k) in the average case.
# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution(object):
    def kthSmallest(self, root, k):
        """
        :type root: TreeNode
        :type k: int
        :rtype: int
        """
        if not root:
            return 0 
        stack = []
        while True:
            while root:
                stack.append(root)
                root = root.left
            root = stack.pop()
            k -= 1
            if k == 0:
                return root.val
            root = root.right
            
            
Follow up: What if the BST is modified (insert/delete operations) often and you need to find the kth smallest frequently? 
How would you optimize the kthSmallest routine?

Insert and delete in a BST were discussed last week, the time complexity of these operations is O(H), 
where H is a height of binary tree, and H=logN for the balanced tree.

Hence without any optimisation insert/delete + search of kth element has O(2H+k) complexity. How to optimise that?

That's a design question, basically we're asked to implement a structure which contains a BST inside 
and optimises the following operations :

Insert

Delete

Find kth smallest

Seems like a database description, isn't it? Let's use here the same logic as for LRU cache design, 
and combine an indexing structure (we could keep BST here) with ****************** a double linked list **************************

Such a structure would provide:

O(H) time for the insert and delete.

O(k) for the search of kth smallest.

The overall time complexity for insert/delete + search of kth smallest is O(H+k) instead of O(2H+k).

Complexity Analysis

Time complexity for insert/delete + search of kth smallest: O(H+k), where H is a tree height. 
O(logN+k) in the average case, O(N+k) in the worst case.

Space complexity : O(N) to keep the linked list.
