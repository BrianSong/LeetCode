Given a pattern and a string str, find if str follows the same pattern.

Here follow means a full match, such that there is a bijection between a letter in pattern and a non-empty word in str.

Example 1:

Input: pattern = "abba", str = "dog cat cat dog"
Output: true
Example 2:

Input:pattern = "abba", str = "dog cat cat fish"
Output: false
Example 3:

Input: pattern = "aaaa", str = "dog cat cat dog"
Output: false
Example 4:

Input: pattern = "abba", str = "dog dog dog dog"
Output: false
Notes:
You may assume pattern contains only lowercase letters, and str contains lowercase letters that may be separated by a single space.

Solution no.1: ------------------------------------------ HashTable + Set
--------------------------------------------------------- O(n) T, O(n) S
class Solution(object):
    def wordPattern(self, pattern, str):
        """
        :type pattern: str
        :type str: str
        :rtype: bool
        """
        if not pattern or not str:
            return False
        strlist = str.split()                                                         # split() can split the string using 空格 inside
        if len(strlist) != len(pattern) or len(set(strlist)) != len(set(pattern)):    # Very important to consider set()
            return False                                                              # for pattern = "aaaa", str = "dog cat cat dog"
                                                                                      # set() takes O(n) T, 
                                                                                      # buliding a set is like building a HashTable
                                                                                  # O(n) (iterate the list) * O(1) (adding to HashTable)
                                                    
        HashTable = {}
        for i in range(len(strlist)):
            if strlist[i] in HashTable:
                if pattern[i] != HashTable[strlist[i]]:
                    return False
            else:
                HashTable[strlist[i]] = pattern[i]
        return True
        
Solution no.2: ------------------------------------------------ HashTable without Set
------------------------------------------------ O(n^2) T, O(n) S
class Solution(object):
    def wordPattern(self, pattern, str):
        """
        :type pattern: str
        :type str: str
        :rtype: bool
        """
        if not pattern or not str:
            return False
        strlist = str.split()
        if len(strlist) != len(pattern):
            return False
        HashTable = {}
        for i in range(len(strlist)):
            if strlist[i] in HashTable:
                if pattern[i] != HashTable[strlist[i]]:
                    return False
            else:
                if pattern[i] in HashTable.values():                # Actually HashTable.values() is O(n) T in Python 2 and O(1) in Py3
                    return False
                HashTable[strlist[i]] = pattern[i]
        return True
