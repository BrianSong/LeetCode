You are given a doubly linked list which in addition to the next and previous pointers, it could have a child pointer, 
which may or may not point to a separate doubly linked list. These child lists may have one or more children of their own, 
and so on, to produce a multilevel data structure, as shown in the example below.

Flatten the list so that all the nodes appear in a single-level, doubly linked list. 
You are given the head of the first level of the list.

 

Example:

Input:
 1---2---3---4---5---6--NULL
         |
         7---8---9---10--NULL
             |
             11--12--NULL

Output:
1-2-3-7-8-11-12-9-10-4-5-6-NULL


Solution no.1: ---------------------------------------- BF DFS
------------------------------------------------------- O(n) T and S
"""
# Definition for a Node.
class Node(object):
    def __init__(self, val, prev, next, child):
        self.val = val
        self.prev = prev
        self.next = next
        self.child = child
"""
class Solution(object):
    def flatten(self, head):
        """
        :type head: Node
        :rtype: Node
        """
        if not head:
            return None
        res = []
        self.backtracking(head, res)
        dummynode = Node(0, None, None, None)
        prevnode = dummynode
        for value in res:
            newNode = Node(value, prevnode, None, None)
            prevnode.next = newNode
            prevnode = newNode
        head = dummynode.next                   
        head.prev = None                                              # Must remove the connection
        return head
    
    def backtracking(self, node, res):
        if node:
            res.append(node.val)
            self.backtracking(node.child, res)
            self.backtracking(node.next, res)
            
            
Solution no.2: ---------------------------------------------- Stack
------------------------------------------------------- O(n) T and S
"""
# Definition for a Node.
class Node(object):
    def __init__(self, val, prev, next, child):
        self.val = val
        self.prev = prev
        self.next = next
        self.child = child
"""
class Solution(object):
    def flatten(self, head):
        """
        :type head: Node
        :rtype: Node
        """
        if not head:
            return None
        stack = []
        dummy = Node(0, None, None, None)
        prev = dummy
        stack.append(head)
        while stack:
            pop = stack.pop()
            pop.prev = prev
            prev.next = pop
            if pop.next:                                # Since stack is LIFO and we want child to have higher priority
                                                        # so we append pop.next first
                stack.append(pop.next)
                pop.next = None                         # May cut the connection here or not, 
                                                        # it does not matter, next will be new assigned anyway
            if pop.child:
                stack.append(pop.child)
                pop.child = None                        # MUST Cut the connection here because new returned node do not have child
            prev = pop
        dummy.next.prev = None                          # Cut the connection 
        return dummy.next
            
  
