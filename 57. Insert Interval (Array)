Given a set of non-overlapping intervals, insert a new interval into the intervals (merge if necessary).

You may assume that the intervals were initially sorted according to their start times.

Example 1:

Input: intervals = [[1,3],[6,9]], newInterval = [2,5]
Output: [[1,5],[6,9]]
Example 2:

Input: intervals = [[1,2],[3,5],[6,7],[8,10],[12,16]], newInterval = [4,8]
Output: [[1,2],[3,10],[12,16]]
Explanation: Because the new interval [4,8] overlaps with [3,5],[6,7],[8,10].
NOTE: input types have been changed on April 15, 2019. Please reset to default code definition to get new method signature.



Solution: ---------------------------------------------------------- https://www.youtube.com/watch?v=w3xgyRJ5egY
class Solution(object):
    def insert(self, intervals, newInterval):
        """
        :type intervals: List[List[int]]
        :type newInterval: List[int]
        :rtype: List[List[int]]
        """
        i = 0
        nStart = newInterval[0]
        nEnd = newInterval[1]
        res = []
        while i < len(intervals) and intervals[i][1] < nStart:    
            res.append(intervals[i])                                # Append all irrelevant intervals into the res
            i += 1
        if i == len(intervals):                                     # This is for the special cases like:
                                                                    # intervals: [1, 3], [5, 7] and newInterval: [10, 12]
                                                                    # res: [1, 3], [5, 7], [10, 12]
            res.append(newInterval)
            return res
        nStart = min(intervals[i][0], nStart)
        while i < len(intervals) and intervals[i][0] <= nEnd:       # Find all the relevant intervals and update the nEnd everytime
            nEnd = max(intervals[i][1], nEnd)
            i += 1                                                  # IMPORTANT !!!!!!!!!!!!!!!!!!!!!
                                                                    # For every while loop, remember to update i !!!!!!
        res.append([nStart, nEnd])                              
        while i < len(intervals):                                   # Append all later half irrelevant intervals to the res
            res.append(intervals[i])
            i += 1
        return res                                                  # For the special cases like:
                                                                    # intervals: [3, 4], [5, 7] and newInterval: [1, 2]
                                                                    # res: [1, 2], [3, 4], [5, 7]
                                                                    # the first two while loops will not be executed
                                                                    # and i will remain 0 till the last while loop
