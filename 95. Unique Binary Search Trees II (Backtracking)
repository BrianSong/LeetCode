Given an integer n, generate all structurally unique BST's (binary search trees) that store values 1 ... n.

Example:

Input: 3
Output:
[
  [1,null,3,2],
  [3,2,null,1],
  [3,1,null,null,2],
  [2,1,3],
  [1,null,2,null,3]
]
Explanation:
The above output corresponds to the 5 unique BST's shown below:

   1         3     3      2      1
    \       /     /      / \      \
     3     2     1      1   3      2
    /     /       \                 \
   2     1         2                 3
   
Solution: ---------------------------- Backtracking -------------------------------------- https://www.youtube.com/watch?v=GZ0qvkTAjmw
# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution(object):
    def generateTrees(self, n):
        """
        :type n: int
        :rtype: List[TreeNode]                                # For example, when n == 3, we should return [1, 1, 2, 3, 3]
        """
        return self.backtracking(1, n)
    def backtracking(self, min, max):
        res = []
        if min > max:                                         # Exiting Condition
            return None
        for rt in range(min, max + 1):                        # Step no.1: create root -> every root inside [min, max]
            leftnodelist = self.backtracking(min, rt - 1)     # Step no.2: use helper function to get list of left and list of right
            rightnodelist = self.backtracking(rt + 1, max)
            if not leftnodelist and not rightnodelist:        # Step no.3: use if, elif, elif, else to generate list of BST
                root = TreeNode(rt)                         
                res.append(root)
            elif not leftnodelist:
                for rightnode in rightnodelist:
                    root = TreeNode(rt)                       # The root must be initialized inside every for loop
                                                              # since every for loop requires a totally new root node for creating BST
                    root.right = rightnode
                    res.append(root)
            elif not rightnodelist:
                for leftnode in leftnodelist:
                    root = TreeNode(rt)
                    root.left = leftnode
                    res.append(root)
            else:
                for leftnode in leftnodelist:
                    for rightnode in rightnodelist:
                        root = TreeNode(rt)
                        root.left = leftnode
                        root.right = rightnode
                        res.append(root)
        return res                                           # Step no.4: return the res at the end of each helper function
