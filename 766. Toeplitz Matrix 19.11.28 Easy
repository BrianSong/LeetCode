A matrix is Toeplitz if every diagonal from top-left to bottom-right has the same element.

Now given an M x N matrix, return True if and only if the matrix is Toeplitz.
 

Example 1:

Input:
matrix = [
  [1,2,3,4],
  [5,1,2,3],
  [9,5,1,2]
]
Output: True
Explanation:
In the above grid, the diagonals are:
"[9]", "[5, 5]", "[1, 1, 1]", "[2, 2, 2]", "[3, 3]", "[4]".
In each diagonal all elements are the same, so the answer is True.
Example 2:

Input:
matrix = [
  [1,2],
  [2,2]
]
Output: False
Explanation:
The diagonal "[1, 2]" has different elements.

Note:

matrix will be a 2D array of integers.
matrix will have a number of rows and columns in range [1, 20].
matrix[i][j] will be integers in range [0, 99].

Follow up:

What if the matrix is stored on disk, 
and the memory is limited such that you can only load at most one row of the matrix into the memory at once?
What if the matrix is so large that you can only load up a partial row into the memory at once?


Solution no: ------------------------------------------------ my own
------------------------------------------------------------- O(m * n) T and O(1) S
class Solution(object):
    def isToeplitzMatrix(self, matrix):
        """
        :type matrix: List[List[int]]
        :rtype: bool
        """
        # Check the edge cases
        if not matrix or not matrix[0]:
            return False
        if len(matrix) == 1 or len(matrix[0]) == 1:
            return True
        # First check over every element in the first row except the last
        for j in range(len(matrix[0]) - 1):
            # Implement a helper function to do the checking for me
            if not self.check(matrix, 0, j, matrix[0][j]):
                return False
        # Second, I check every element in the first column except the first and last
        for i in range(1, len(matrix) - 1):
            if not self.check(matrix, i, 0, matrix[i][0]):
                return False
        # If pass all check
        return True


    # Helper function
    def check(self, matrix, r, c, base):
        r += 1
        c += 1
        # Use a while loop
        while r < len(matrix) and c < len(matrix[0]):
            if matrix[r][c] != base:
                return False
            r += 1
            c += 1
        return True
