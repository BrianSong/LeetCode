Reverse a linked list from position m to n. Do it in one-pass.

Note: 1 ≤ m ≤ n ≤ length of list.

Example:

Input: 1->2->3->4->5->NULL, m = 2, n = 4
Output: 1->4->3->2->5->NULL

Solution: ---------------------------- Two Pointers ---------------------------------- https://www.youtube.com/watch?v=esl_A_pzBcg
-------------------------------------- O(n) T, O(1) S
# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution(object):
    def reverseBetween(self, head, m, n):
        """
        :type head: ListNode
        :type m: int
        :type n: int
        :rtype: ListNode
        """
        if not head or m > n:
            return None
        dummynode = ListNode(0)
        dummynode.next = head
        left, right, prevnode = head, head, dummynode
        for i in range(1, m):
            prevnode = prevnode.next
            left = left.next
        for i in range(1, n):
            right = right.next
        while left != right:                               # 把 left node 插入 right node 的后面，直到他们重合
            prevnode.next = left.next
            left.next = right.next
            right.next = left
            left = prevnode.next
        return dummynode.next
