Reverse a linked list from position m to n. Do it in one-pass.

Note: 1 ≤ m ≤ n ≤ length of list.

Example:

Input: 1->2->3->4->5->NULL, m = 2, n = 4
Output: 1->4->3->2->5->NULL

Solution: ---------------------------- Two Pointers ---------------------------------- https://www.youtube.com/watch?v=esl_A_pzBcg
# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution(object):
    def reverseBetween(self, head, m, n):
        """
        :type head: ListNode
        :type m: int
        :type n: int
        :rtype: ListNode
        """
        dummynode, Mnode, Nnode = ListNode(0), head, head
        dummynode.next = head
        prenode = dummynode
        for i in range(1, m):
            prenode = prenode.next
            Mnode = Mnode.next
        for i in range(1, n):
            Nnode = Nnode.next
        while Mnode != Nnode:                                # 把 Mnode 插入 Nnode 的后面，直到他们重合
            prenode.next = Mnode.next
            Mnode.next = Nnode.next
            Nnode.next = Mnode
            Mnode = prenode.next
        return dummynode.next
