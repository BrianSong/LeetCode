Given an integer array nums, find the contiguous subarray (containing at least one number) which has the largest sum and return its sum.

Example:

Input: [-2,1,-3,4,-1,2,1,-5,4],
Output: 6
Explanation: [4,-1,2,1] has the largest sum = 6.
Follow up:

If you have figured out the O(n) solution, try coding another solution using the divide and conquer approach, which is more subtle.

Solution no.1: --------------------------------------------------- Greedy
------------------------------------------ O(N) T, O(1) S
class Solution(object):
    def maxSubArray(self, nums):
        if not nums:
            return 0
        if max(nums) < 0:                               # IMPORTANT !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
                                                        # MUST consider the negative number situation, when nums = [-1],
            return max(nums)                            # what we need to return is -1 instead of 0 !!!!!!!!!!!!!!!!!!!!!!!!
        res, currsum = 0, 0
        for num in nums:
            if currsum + num <= 0:                      # Keep updating  只要大于零，就是值得保留的
                                                        # Why compare to 0?
                                                        # if local_max + num < 0, even there is a very large number later,
                                                        # the previous number will still be useless,
                                                        # because we can start from this very large number instead.
                                                        # As long as local_max + num > 0, it is still valuable,
                                                        # because it can make contribution to the later addition
                currsum = 0
            else:
                currsum += num
                res = max(res, currsum)                 # Keep updating  在所有大于零的subset中选出最大的作为result
        return res
        """
        :type nums: List[int]
        :rtype: int
        """
        
        
Solution no.2: ---------------------------- Divide and Conquer
------------------------------------------- T(n) = 2 * T(n / 2) + n then, by Master Method: https://www.youtube.com/watch?v=6CX7s7JnXs0
'''
In T(n) = a * T(n / b) + f(n) where n: size of the current problem, a: number of subproblem, b: size of subproblem, 
f(n): the cost of work that has to be done outside
Case 1: n^logb(a - X) = f(n) where X > 0, then T(n) = O(n^logb(a))
Case 2: n^logb(a) = f(n), then T(n) = O(n^logb(a) * logn) ----------------------------- In our case we are in case 2
Case 3: n^logb(a + X) = f(n) where X > 0, then T(n) = O(f(n))
But for case 3, we must do a regularity check, the formula of case 3 can only be used when a * f(n / b) <= c * f(n) where c < 1
'''
------------------------------------------- T(n) = nlog(n) where a = 2, b = 2, f(n) = n so in case 2
------------------------------------------- O(logn) S: the recursion depth of divide and conquer
'''
Divide and Conquer
3 steps:
1. 把一个大问题分解为许多个小的，独立的，解决方法相同的小问题
2. 在当前的小问题的规模足够小的时候，就地解决 (Boundary Condition), 如果不够小，则继续分解
3. 合并结果
In this question, we basically like divide the whole big list into seveal smaller sublist with fixed left and right boundary,
then we compute its maximum out of three of its' possible configuration: 
maximum subarray of it exists on the left, right or cross the middle. After we find it, we pass it to the upper recursion,
and being others' possible left, right maximum subarray.
'''
'''
1) Divide the given array in two halves
2) Return the maximum of following three
….a) Maximum subarray sum in left half (Make a recursive call)
….b) Maximum subarray sum in right half (Make a recursive call)
….c) Maximum subarray sum such that the subarray crosses the midpoint
'''
class Solution(object):
    def maxSubArray(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        if not nums:
            return 0
        return self.dnc(nums, 0, len(nums) - 1)
    
    def dnc(self, nums, left, right):
        if left == right:
            return nums[left]
        mid = left + (right - left) / 2
        l = self.dnc(nums, left, mid)
        r = self.dnc(nums, mid + 1, right)
        m = self.crossMiddle(nums, left, mid, right)
        return max(l, r, m)
    
    def crossMiddle(self, nums, left, mid, right):  
        leftsum, temp = float('-inf'), 0
        for i in range(mid, left - 1, -1):                        # Instead of "for i in range(mid - 1, left - 1, -1):"
                                                                  # and "return nums[mid] + leftsum + rightsum"
                                                                  # what we should do is "for i in range(mid, left - 1, -1):"
                                                                  # and "return leftsum + rightsum"
                                                                  # why? As long as we add nums[mid], even not nums[mid - 1]
                                                                  # this already means we cross the middle and combine left and right
                                                                  # because mid belongs to left in this question
            temp += nums[i]                                       
            leftsum = max(leftsum, temp)
        rightsum, temp = float('-inf'), 0
        for i in range(mid + 1, right + 1):
            temp += nums[i]
            rightsum = max(rightsum, temp)
        return leftsum + rightsum                                 # leftsum and rightsum can never be float('-inf'), 
                                                                  # They are at least one element since left != right
