Given an array of n positive integers and a positive integer s, find the minimal length of a contiguous subarray of which the sum â‰¥ s. 
If there isn't one, return 0 instead.

Example: 

Input: s = 7, nums = [2,3,1,2,4,3]
Output: 2
Explanation: the subarray [4,3] has the minimal length under the problem constraint.
Follow up:
If you have figured out the O(n) solution, try coding another solution of which the time complexity is O(n log n). 

Solution: ---------------------------------------------------- Two Pointers + Sliding Window
-------------------------------------------------------------- O(n) T, O(1) S
class Solution(object):
    def minSubArrayLen(self, s, nums):
        """
        :type s: int
        :type nums: List[int]
        :rtype: int
        """
        if not s or not nums or sum(nums) < s:
            return 0
        slow, fast, curr, res = 0, 0, 0, float('inf')
        while fast < len(nums):
            curr += nums[fast]                            # Keep expanding the fast
            while slow < len(nums) and curr >= s:         # until curr >= s where we need to move slow to the right for extracting
                res = min(res, fast - slow + 1)
                curr -= nums[slow]
                slow += 1
            fast += 1
        return res
