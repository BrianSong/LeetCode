Given a string s, find the longest palindromic subsequence's length in s. You may assume that the maximum length of s is 1000.

Example 1:
Input:

"bbbab"
Output:
4
One possible longest palindromic subsequence is "bbbb".
 

Example 2:
Input:

"cbbd"
Output:
2
One possible longest palindromic subsequence is "bb".
 

Constraints:

1 <= s.length <= 1000
s consists only of lowercase English letters.


Solution: O(n^2) T and S -------------------------------------- https://www.youtube.com/watch?v=_nCsPn7_OgI
class Solution:
    """
    @param s: the maximum length of s is 1000
    @return: the longest palindromic subsequence's length
    """
    def longestPalindromeSubseq(self, s):
        # write your code here
        if not s:
            return 0 
        
        dp = [[0 for j in range(len(s))] for i in range(len(s))]
        
        for i in range(len(s)):
            dp[i][i] = 1
        
        for length in range(2, len(s) + 1):
            for i in range(0, len(s) - length + 1):
                j = i + length - 1 
                if s[i] == s[j]:
                    dp[i][j] = 2 + dp[i + 1][j - 1]
                else:
                    dp[i][j] = max(dp[i][j - 1], dp[i + 1][j])
        
        return dp[0][-1]
