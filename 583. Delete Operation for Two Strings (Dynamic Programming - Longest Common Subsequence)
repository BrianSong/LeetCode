Given two words word1 and word2, find the minimum number of steps required to make word1 and word2 the same, 
where in each step you can delete one character in either string.

Example 1:
Input: "sea", "eat"
Output: 2
Explanation: You need one step to make "sea" to "ea" and another step to make "eat" to "ea".
Note:
The length of given words won't exceed 500.
Characters in given words can only be lower-case letters.


Solution: -------------------------------------- Dynamic Programming - Longest Common Subsequence 
'''
In order to determine the minimum number of delete operations needed, the easiest way is to make use of 
the length of the longest common sequence among the two given strings s1 and s2, say given by lcs. 
If we can find this lcs value, we can easily determine the required result as m + n - 2*lcs. 
'''
class Solution(object):
    def minDistance(self, word1, word2):
        """
        :type word1: str
        :type word2: str
        :rtype: int
        """
        dp = [[0 for j in range(len(word2) + 1)] for i in range(len(word1) + 1)]   # dp[i][j] here means the length of the 
                                                                                   # longest common subsequence between the ith
                                                                                   # (index i - 1) character of string word1 
                                                                                   # and jth (index j - 1) character of string word2
                                                                                   # It is very classic to leave dp[0][0] as init
                                                                                   # preprocessing contain no real meaningful purpose
                                                                                   # Here, dp[i][j] does not means the delete steps
                                                                                   # as I was going to do in the beginning
        print dp
        for i in range(1, len(word1) + 1):
            for j in range(1, len(word2) + 1):
                if word1[i - 1] == word2[j - 1]:                                   # word1[i - 1] instead of word1[i]
                    dp[i][j] = dp[i - 1][j - 1] + 1
                else:
                    dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])                     # Why takes the maximum instead of assign to 0 ?
                                                                                   # Because here, the longest common subsequence
                                                                                   # does not require to be continuous 
        return len(word1) + len(word2) - 2 * dp[-1][-1]
