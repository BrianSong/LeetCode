Suppose Andy and Doris want to choose a restaurant for dinner, and they both have a list of favorite restaurants represented by strings.

You need to help them find out their common interest with the least list index sum. If there is a choice tie between answers, 
output all of them with no order requirement. You could assume there always exists an answer.

Example 1:
Input:
["Shogun", "Tapioca Express", "Burger King", "KFC"]
["Piatti", "The Grill at Torrey Pines", "Hungry Hunter Steakhouse", "Shogun"]
Output: ["Shogun"]
Explanation: The only restaurant they both like is "Shogun".
Example 2:
Input:
["Shogun", "Tapioca Express", "Burger King", "KFC"]
["KFC", "Shogun", "Burger King"]
Output: ["Shogun"]
Explanation: The restaurant they both like and have the least index sum is "Shogun" with index sum 1 (0+1).
Note:
The length of both lists will be in the range of [1, 1000].
The length of strings in both lists will be in the range of [1, 30].
The index is starting from 0 to the list length minus 1.
No duplicates in both lists.



Solution: -------------------------------------------------------------- HashTable
-------------------------------------------------------------- O(l1 + l2) T, where l1 is the length of list1, l2 is the list2 length
-------------------------------------------------------------- O(l1 * x) S, where x is the average length of words in list1
class Solution(object):
    def findRestaurant(self, list1, list2):
        """
        :type list1: List[str]
        :type list2: List[str]
        :rtype: List[str]
        """
        if not list1 or not list2:
            return None
        HashTable, idxsum, res = {}, float('inf'), []
        for i, item in enumerate(list1):
            HashTable[item] = i
        for i, item in enumerate(list2):
            if item in HashTable and i + HashTable[item] < idxsum:
                res = []
                res.append(item)
                idxsum = i + HashTable[item]
            elif item in HashTable and i + HashTable[item] == idxsum:       # IMPORTANT !!!!!!!!!!!!!!!!!!!!!!!!!!!!!
                                                                            # MUST consider tie cases
                res.append(item)
        return res
