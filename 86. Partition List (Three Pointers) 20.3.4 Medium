Given a linked list and a value x, partition it such that all nodes less than x come before nodes greater than or equal to x.

You should preserve the original relative order of the nodes in each of the two partitions.

Example:

Input: head = 1->4->3->2->5->2, x = 3
Output: 1->2->2->4->3->5

Solution: --------------------------------------------------------- https://www.youtube.com/watch?v=TARvjokaGxg
-------------------------------------------------------- O(n) T, O(1) S 
# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution(object):
    def partition(self, head, x):
        dummynode = ListNode(0)             # For linked list problem, a dummynode is usually created to point to the head node 
        dummynode.next = head
        left = dummynode                    # Here, three pointers are used, left, pre and curr
                                            # left points to the boundary line, 
                                            # curr points to the current check node, pre points before it
  
        pre = dummynode
        curr = head
        while curr:
            if pre == left:                 # Speical case 
                if curr.val >= x:
                    pre = pre.next
                    curr = curr.next
                else:
                    pre = pre.next
                    curr = curr.next
                    left = left.next
            else:                           # Normal case
                if curr.val >= x:
                    pre = pre.next
                    curr = curr.next
                else:
                    pre.next = curr.next
                    curr.next = left.next
                    left.next = curr
                    curr = pre.next
                    left = left.next
        return dummynode.next
        """
        :type head: ListNode
        :type x: int
        :rtype: ListNode
        """


Java Version:
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
class Solution {
    public ListNode partition(ListNode head, int x) {
        if (head == null) {
            return head;
        }
        ListNode dummyNode = new ListNode(0);
        dummyNode.next = head;
        ListNode boundaryNode = dummyNode, prevNode = dummyNode, currNode = head;
        while (currNode != null) {
            if (boundaryNode == prevNode) {
                if (currNode.val >= x) {
                    currNode = currNode.next;
                    prevNode = prevNode.next;
                } else {
                    boundaryNode = boundaryNode.next;
                    currNode = currNode.next;
                    prevNode = prevNode.next;
                }
            } else {
                if (currNode.val >= x) {
                    currNode = currNode.next;
                    prevNode = prevNode.next;
                } else {
                    prevNode.next = currNode.next;
                    ListNode nextNode = boundaryNode.next;
                    currNode.next = nextNode;
                    boundaryNode.next = currNode;
                    currNode = prevNode.next;
                    boundaryNode = boundaryNode.next;
                }
            }
        }
        return dummyNode.next;
    }
}
