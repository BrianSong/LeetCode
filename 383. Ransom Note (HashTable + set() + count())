Given an arbitrary ransom note string and another string containing letters from all the magazines, 
write a function that will return true if the ransom note can be constructed from the magazines ; otherwise, it will return false.

Each letter in the magazine string can only be used once in your ransom note.

Note:
You may assume that both strings contain only lowercase letters.

canConstruct("a", "b") -> false
canConstruct("aa", "ab") -> false
canConstruct("aa", "aab") -> true

Solution no.1: -------------------------------------------- HashTable
----------------------------------------------------------- O(n) T, O(n) S
class Solution(object):
    def canConstruct(self, ransomNote, magazine):
        """
        :type ransomNote: str
        :type magazine: str
        :rtype: bool
        """
        HashTable = collections.defaultdict(int)
        for w in magazine:
            HashTable[w] += 1
        for w in ransomNote:
            if not w in HashTable:
                return False
            else:
                HashTable[w] -= 1
                if HashTable[w] == 0:
                    del HashTable[w]
        return True

Solution no.2: -------------------------------------------------- set() + count()
----------------------------------------------------------------- O(n^2) T, O(1) S
class Solution(object):
    def canConstruct(self, ransomNote, magazine):
        """
        :type ransomNote: str
        :type magazine: str
        :rtype: bool
        """
        for w in set(ransomNote):
            if ransomNote.count(w) - magazine.count(w) > 0:      # a = 'abcde'
                                                                 # a.count('w') => 0
                return False
        return True
