You are given a list of non-negative integers, a1, a2, ..., an, and a target, S. Now you have 2 symbols + and -. 
For each integer, you should choose one from + and - as its new symbol.

Find out how many ways to assign symbols to make sum of integers equal to target S.

Example 1:
Input: nums is [1, 1, 1, 1, 1], S is 3. 
Output: 5
Explanation: 

-1+1+1+1+1 = 3
+1-1+1+1+1 = 3
+1+1-1+1+1 = 3
+1+1+1-1+1 = 3
+1+1+1+1-1 = 3

There are 5 ways to assign symbols to make the sum of nums be target 3.
Note:
The length of the given array is positive and will not exceed 20.
The sum of elements in the given array will not exceed 1000.
Your output answer is guaranteed to be fitted in a 32-bit integer.


Solution no.1: ----------------------------- Backtracking (Brute Force) ------- TLE error
----------------------------- Time complexity : O(2^n). Size of recursion tree will be 2^n. n refers to the size of numsnums array.
----------------------------- Space complexity : O(n). The depth of the recursion tree can go up to n.
class Solution(object):
    def findTargetSumWays(self, nums, S):
        """
        :type nums: List[int]
        :type S: int
        :rtype: int
        """
        self.res = 0
        self.dfs(nums, S, 0, 0)
        return self.res
    
    def dfs(self, nums, S, currsum, idx):
        if idx == len(nums):
            if currsum == S:
                self.res += 1
            return
        else:
            self.dfs(nums, S, currsum + nums[idx], idx + 1)
            self.dfs(nums, S, currsum - nums[idx], idx + 1)
            
            
Solution no.2: --------------------------------- Backtracking with Memo: HashTable
'''
It can be easily observed that in the last approach, a lot of redundant function calls could be made 
with the same value of i as the current index and the same value of currsum as the current sum, 
since the same values could be obtained through multiple paths in the recursion tree. 
In order to remove this redundancy, we make use of memoization(HashTable) to store the results which have been calculated earlier.
'''
class Solution(object):
    def findTargetSumWays(self, nums, S):
        """
        :type nums: List[int]
        :type S: int
        :rtype: int
        """
        if not nums or len(nums) == 0:
            return 0
        return self.dfs(nums, S, 0, 0, {})
    
    def dfs(self, nums, S, currsum, idx, HashTable):
        encodeString = str(idx) + "+" + str(currsum)
        if encodeString in HashTable:                                          # If we store it before as memoization, just return it
            return HashTable[encodeString]                                        
        if idx == len(nums):
            if currsum == S:
                return 1                                                       # return 1 means find 1 combination
            return 0                                                           # return 0 means None
        else:
            plus = self.dfs(nums, S, currsum + nums[idx], idx + 1, HashTable)
            minus = self.dfs(nums, S, currsum - nums[idx], idx + 1, HashTable)
            HashTable[encodeString] = plus + minus
            return plus + minus                                                # return all the combination possible from plus and minus
            
            
Solution no.3: ------------------------------------------ Dynamic Programming
'''
this is a classic knapsack problem
in knapsack, we decide whether we choose this element or not
in this question, we decide whether we add this element or minus it

So start with a two dimensional array dp[i][j] which means the number of ways for first i-th element to reach a Sum j

we can easily observe that dp[i][j] = dp[i-1][j+nums[i-1]] + dp[i-1][j-nums[i-1]],

Another part which is quite confusing is return value, here we return dp[Sum+S], why is that?
because dp's range starts from -Sum --> 0 --> +Sum
so we need to add Sum first, then the total starts from 0, then we add S
'''
class Solution(object):
    def findTargetSumWays(self, nums, S):
        """
        :type nums: List[int]
        :type S: int
        :rtype: int
        """
        Sum = 0
        for num in nums:
            Sum += num
        if S > Sum or S < -Sum:
            return 0
        dp = [[0 for j in range(2*Sum + 1 + 1)] for i in range(len(nums) + 1 + 1)]
        dp[0][0 + Sum] = 1                                                                 # 0 + Sum means 0, 0 means -Sum
        for i in range(1, len(nums) + 1):
            for j in range(2*Sum + 1):
                if j + nums[i - 1] < 2*Sum + 1:                     # There two if makes sure that j + nums[i - 1] and j - nums[i - 1]
                    dp[i][j] += dp[i - 1][j + nums[i - 1]]          # will not bring List Index Out of Range Error
                if j - nums[i - 1] >= 0:
                    dp[i][j] += dp[i - 1][j - nums[i - 1]]
        return dp[len(nums)][Sum + S]
