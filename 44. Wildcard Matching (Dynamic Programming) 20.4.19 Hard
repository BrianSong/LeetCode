Given an input string (s) and a pattern (p), implement wildcard pattern matching with support for '?' and '*'.

'?' Matches any single character.
'*' Matches any sequence of characters (including the empty sequence).
The matching should cover the entire input string (not partial).

Note:

s could be empty and contains only lowercase letters a-z.
p could be empty and contains only lowercase letters a-z, and characters like ? or *.
Example 1:

Input:
s = "aa"
p = "a"
Output: false
Explanation: "a" does not match the entire string "aa".
Example 2:

Input:
s = "aa"
p = "*"
Output: true
Explanation: '*' matches any sequence.
Example 3:

Input:
s = "cb"
p = "?a"
Output: false
Explanation: '?' matches 'c', but the second letter is 'a', which does not match 'b'.
Example 4:

Input:
s = "adceb"
p = "*a*b"
Output: true
Explanation: The first '*' matches the empty sequence, while the second '*' matches the substring "dce".
Example 5:

Input:
s = "acdcb"
p = "a*c?b"
Output: false


Solution: ------------ Dynamic Programming --------------- https://www.youtube.com/watch?v=9OnS06RYQiw (看讲题思路不要看代码，代码是反的)
----------------------- O(len(s)*len(p)) T O(len(s)*len(p)) S
class Solution(object):
    def isMatch(self, s, p):
        """
        :type s: str
        :type p: str
        :rtype: bool
        """
        match = [[False for i in range(len(s) + 1)] for j in range(len(p) + 1)]   # Step no.1: state
        match[0][0] = True                                                        # Step no.2: init
        for i in range(1, len(p) + 1):
            if p[i - 1] == '*':                                                 
                match[i][0] = match[i - 1][0]
        for i in range(1, len(p) + 1):                                            # Step no.3: transform function
            for j in range(1, len(s) + 1):
                if s[j - 1] == p[i - 1] or p[i - 1] == '?':                       # "?" matches any single character
                    match[i][j] = match[i - 1][j - 1]
                elif p[i - 1] == '*':                                             # When p[i - 1] == '*', two cases:
                                                                                  # 1. '*' used as empty sequence: ab and ab*
                                                                                  # => match[i][j] = match[i - 1][j]
                                                                                  # 2. '*' used as any sequence: abc and ab*
                                                                                  # => match[i][j] = match[i][j - 1]
                    match[i][j] = match[i - 1][j] or match[i][j - 1]              # Why we do not consider 斜上方？
                                                                                  # Because 就算斜上方是True, 在前一个i循环，
                                                                                  # 斜上方的T已经被pass到正上方的True了，不会MISS
        return match[-1][-1]                                                      # Step no.4: return



Java Version:
class Solution {
    public boolean isMatch(String s, String p) {
        if (s == null || p == null) {
            return false;
        }
        if (s.length() == 0 && p.length() == 0) {
            return true;
        }
        boolean[][] dp = new boolean[p.length() + 1][s.length() + 1];
        dp[0][0] = true;
        for (int i = 1; i < dp.length; i ++) {
            if (p.charAt(i - 1) == '*') {
                dp[i][0] = dp[i - 1][0];
            }
        }
        for (int i = 1; i < dp.length; i ++) {
            for (int j = 1; j < dp[0].length; j ++) {
                if (p.charAt(i - 1) == s.charAt(j - 1) || p.charAt(i - 1) == '?') {
                    dp[i][j] = dp[i - 1][j - 1];
                } else if (p.charAt(i - 1) == '*') {
                    dp[i][j] = (dp[i - 1][j] || dp[i][j - 1]);
                }
            }
        }
        return dp[dp.length - 1][dp[0].length - 1];
    }
}
