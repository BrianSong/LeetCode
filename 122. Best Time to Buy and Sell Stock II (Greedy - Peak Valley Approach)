Say you have an array for which the ith element is the price of a given stock on day i.

Design an algorithm to find the maximum profit. You may complete as many transactions as you like 
(i.e., buy one and sell one share of the stock multiple times).

Note: You may not engage in multiple transactions at the same time (i.e., you must sell the stock before you buy again).

Example 1:

Input: [7,1,5,3,6,4]
Output: 7
Explanation: Buy on day 2 (price = 1) and sell on day 3 (price = 5), profit = 5-1 = 4.
             Then buy on day 4 (price = 3) and sell on day 5 (price = 6), profit = 6-3 = 3.
Example 2:

Input: [1,2,3,4,5]
Output: 4
Explanation: Buy on day 1 (price = 1) and sell on day 5 (price = 5), profit = 5-1 = 4.
             Note that you cannot buy on day 1, buy on day 2 and sell them later, as you are
             engaging multiple transactions at the same time. You must sell before buying again.
Example 3:

Input: [7,6,4,3,1]
Output: 0
Explanation: In this case, no transaction is done, i.e. max profit = 0.

Solution: -------------------------------------------------- Greedy - Peak Valley Approach
'''
The key point is we need to consider every peak immediately following a valley to maximize the profit.  ---- Greedy Algorithm
In case we skip one of the peaks (trying to obtain more profit), 
we will end up losing the profit over one of the transactions leading to an overall lesser profit.
For example, in the above case, if we skip peaki and valleyj for trying to obtain more profit by considering points 
with more difference in heights, the net profit obtained will always be lesser than the one obtained by including them, 
since C will always be lesser than A+B.
'''
class Solution(object):
    def maxProfit(self, prices):
        """
        :type prices: List[int]
        :rtype: int
        """
        if len(prices) == 0:
            return 0
        valley, peak, res, i = prices[0], prices[0], 0, 0
        while i < len(prices) - 1:                                      # "while" instead of "for", i < len - 1 instead of i < len
            while i < len(prices) - 1 and prices[i] >= prices[i + 1]:   # Find valley first and then find peak
                i += 1
            valley = prices[i]
            while i < len(prices) - 1 and prices[i] <= prices[i + 1]:
                i += 1
            peak = prices[i]
            res += peak - valley
        return res
