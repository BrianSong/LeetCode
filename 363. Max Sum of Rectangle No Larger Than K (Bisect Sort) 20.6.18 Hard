Given a non-empty 2D matrix matrix and an integer k, 
find the max sum of a rectangle in the matrix such that its sum is no larger than k.

Example:

Input: matrix = [[1,0,1],[0,-2,3]], k = 2
Output: 2 
Explanation: Because the sum of rectangle [[0, 1], [-2, 3]] is 2,
             and 2 is the max number no larger than k (k = 2).
Note:

The rectangle inside the matrix must have an area > 0.
What if the number of rows is much larger than the number of columns?


Solution: O(n^2 * m^2) T and O(m) S
'''
For each row, calculate the prefix sum. For each pair of columns, calculate the sum of rows.
Now this problem is changed to a 1D problem: max subarray sum no more than k.
'''
class Solution(object):
    def maxSumSubmatrix(self, matrix, k):
        """
        :type matrix: List[List[int]]
        :type k: int
        :rtype: int
        """
        m, n = len(matrix), len(matrix[0])
        for i in range(m):
            for j in range(n - 1):
                matrix[i][j + 1] += matrix[i][j]
        res = float('-inf')
        for y1 in range(n):
            for y2 in range(y1, n):
                arr = [matrix[x][y2] - (matrix[x][y1 - 1] if y1 > 0 else 0) for x in range(m)]
                res = max(res, self.maxSubarraySum(arr, k))
        return res
    
    def maxSubarraySum(self, arr, k):
        curr_max_sum = float('-inf')
        pre_sum_arr = [float('inf')]
        curr_pre_sum = 0
        for x in arr:
            bisect.insort(pre_sum_arr, curr_pre_sum)                             # O(1) T
            curr_pre_sum += x
            i = bisect.bisect_left(pre_sum_arr, curr_pre_sum - k)                # O(1) T
            curr_max_sum = max(curr_max_sum, curr_pre_sum - pre_sum_arr[i])
        return curr_max_sum
