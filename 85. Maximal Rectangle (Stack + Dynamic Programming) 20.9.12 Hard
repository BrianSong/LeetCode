Given a 2D binary matrix filled with 0's and 1's, find the largest rectangle containing only 1's and return its area.

Example:

Input:
[
  ["1","0","1","0","0"],
  ["1","0","1","1","1"],
  ["1","1","1","1","1"],
  ["1","0","0","1","0"]
]
Output: 6

Native Version: O(N^2M) T and O(NM) S
class Solution(object):
    def maximalRectangle(self, matrix):
        """
        :type matrix: List[List[str]]
        :rtype: int
        """
        if not matrix or len(matrix) == 0 or len(matrix[0]) == 0:
            return 0
        n, m = len(matrix), len(matrix[0])
        max_area = 0
        dp = [[0] * m for _ in range(n)]
        for i in range(n):
            for j in range(m):
                if matrix[i][j] == '0':
                    continue
                max_width = dp[i][j] = dp[i][j - 1] + 1 if j else 1
                for k in range(i, - 1, -1):
                    max_width = min(max_width, dp[k][j])
                    max_area = max(max_area, max_width * (i - k + 1))
        
        return max_area


Solution: -------------------------------- Stack + Dynamic Programming ------------------ https://www.youtube.com/watch?v=2Yk3Avrzauk
------------------------------------------ Basically the same as 84. Largest Rectangle in Histogram
class Solution(object):
    def maximalRectangle(self, matrix):
        """
        :type matrix: List[List[str]]
        :rtype: int
        """
        if not matrix or len(matrix) == 0 or len(matrix[0]) == 0:
            return 0
        res, heights = 0, [0] * len(matrix[0])  
        for i in range(len(matrix)):
            for j in range(len(matrix[0])):
                if matrix[i][j] == '1':
                    heights[j] += 1
                else:
                    heights[j] = 0
            max_area = self.largestRectangleArea(heights)                 # Create the heights list and pass it to the no.84's function
            res = max(res, max_area)
        return res
    
    def largestRectangleArea(self, heights):
        if not heights or len(heights) == 0:
            return 0
        res, stack, curridx = 0, [], 0
        while curridx < len(heights):
            if not stack or heights[curridx] >= heights[stack[-1]]:
                stack.append(curridx)
                curridx += 1
            else:
                right = curridx
                height = stack.pop()
                while len(stack) != 0 and heights[height] == heights[stack[-1]]:
                    height = stack.pop()
                if len(stack) != 0:
                    left = stack[-1]
                else:
                    left = -1
                res = max(res, (right - left - 1) * heights[height])
        if stack: 
            right = stack[-1] + 1
        while stack:
            height = stack.pop()
            if stack:
                left = stack[-1]
            else:
                left = -1
            res = max(res, (right - left - 1) * heights[height])
        return res


Updated Version:
class Solution(object):
    def maximalRectangle(self, matrix):
        """
        :type matrix: List[List[str]]
        :rtype: int
        """
        if not matrix or len(matrix) == 0 or len(matrix[0]) == 0:
            return 0
        
        heights = [0] * len(matrix[0])
        max_area = 0
        for i in range(len(matrix)):
            for j in range(len(matrix[0])):
                if matrix[i][j] == '1':
                    heights[j] += 1 
                else:
                    heights[j] = 0
            max_area = max(max_area, self.largestRectangleArea(heights))
        
        return max_area
    
    def largestRectangleArea(self, heights):
        """
        :type heights: List[int]
        :rtype: int
        """
        if not heights or len(heights) == 0:
            return 0
        
        stack = []
        stack.append(-1)
        max_area = 0
        for i in range(len(heights)):
            # i 此刻为右边界
            while stack[-1] != -1 and heights[stack[-1]] > heights[i]:
                # stack[-1] 此刻为左边界
                max_area = max(max_area, heights[stack.pop()] * (i - stack[-1] - 1))
            stack.append(i)
        
        while stack[-1] != -1:
            max_area = max(max_area, heights[stack.pop()] * (len(heights) - stack[-1] -1))
        
        return max_area
