Given a m x n grid filled with non-negative numbers, 
find a path from top left to bottom right which minimizes the sum of all numbers along its path.

Note: You can only move either down or right at any point in time.

Example:

Input:
[
  [1,3,1],
  [1,5,1],
  [4,2,1]
]
Output: 7
Explanation: Because the path 1→3→1→1→1 minimizes the sum.

Solution: ---------------------------------------------------------------"Minimum" -> DP
class Solution(object):
    def minPathSum(self, grid):
        m, n = len(grid), len(grid[0])                                                  # The way to find out the dimension of 2D array
        sum = [[0 for x in range(n)] for y in range(m)]                                 # Step 1
        sum[0][0] = grid[0][0]
        for x in range(1, n):                                                           # Step 2
            sum[0][x] += sum[0][x-1] + grid[0][x]
        for y in range(1, m):                               
            sum[y][0] += sum[y-1][0] + grid[y][0]
        for i in range(1, m): 
            for j in range(1, n):
                print i, j
                sum[i][j] = min((sum[i-1][j] + grid[i][j]), (sum[i][j-1] + grid[i][j]))     # Step 3, remember to add grid[i][j]
        return sum[m-1][n-1]                                                                # Step 4
        """
        :type grid: List[List[int]]
        :rtype: int
        """


Java Version:
class Solution {
    public int minPathSum(int[][] grid) {
        if (grid == null || grid.length == 0 || grid[0].length == 0) {
            return 0;
        }
        int m = grid.length, n = grid[0].length;
        int[][] dp = new int[m][n];
        dp[0][0] = grid[0][0];
        for (int i = 1; i < m; i ++) {
            dp[i][0] = dp[i - 1][0] + grid[i][0]; 
        }
        for (int j = 1; j < n; j ++) {
            dp[0][j] = dp[0][j - 1] + grid[0][j];
        }
        for (int i = 1; i < m; i ++) {
            for (int j = 1; j < n; j ++) {
                dp[i][j] = Math.min(dp[i - 1][j] + grid[i][j], dp[i][j - 1] + grid[i][j]);
            }
        }
        return dp[m - 1][n - 1];
    }
}
