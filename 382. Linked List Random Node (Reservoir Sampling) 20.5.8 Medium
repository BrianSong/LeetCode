Given a singly linked list, return a random node's value from the linked list. Each node must have the same probability of being chosen.

Follow up:
What if the linked list is extremely large and its length is unknown to you? Could you solve this efficiently without using extra space?

Example:

// Init a singly linked list [1,2,3].
ListNode head = new ListNode(1);
head.next = new ListNode(2);
head.next.next = new ListNode(3);
Solution solution = new Solution(head);

// getRandom() should return either 1, 2, or 3 randomly. Each element should have equal probability of returning.
solution.getRandom();


Solution no.1: -------------------------------------------- Come up with the linked list length first
# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution(object):

    def __init__(self, head):
        """
        @param head The linked list's head.
        Note that the head is guaranteed to be not null, so it contains at least one node.
        :type head: ListNode
        """
        self.head = head
        self.size = 0
        curr = self.head
        while curr:
            self.size += 1
            curr = curr.next

    def getRandom(self):
        """
        Returns a random node's value.
        :rtype: int
        """
        k = random.randint(1, self.size)
        curr = self.head 
        while k > 1:
            curr = curr.next
            k -= 1
        return curr.val
        
# Your Solution object will be instantiated and called as such:
# obj = Solution(head)
# param_1 = obj.getRandom()

Follow up:
What if the linked list is extremely large and its length is unknown to you? 
Could you solve this efficiently without using extra space?

Solution no.2: ------------------------------------------------ Reservoir Sampling (for more details, refers to 398é¢˜)
----------------------------------------------- O(1) T for __init__(), O(n) T for getRandom(), O(1) S
# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution(object):

    def __init__(self, head):
        """
        @param head The linked list's head.
        Note that the head is guaranteed to be not null, so it contains at least one node.
        :type head: ListNode
        """
        self.head = head
        

    def getRandom(self):
        """
        Returns a random node's value.
        :rtype: int
        """
        currnode = self.head
        count, res = 0, 0
        while currnode:
            count += 1
            if random.randint(1, count) == count:
                res = currnode.val
            currnode = currnode.next
        return res
        


# Your Solution object will be instantiated and called as such:
# obj = Solution(head)
# param_1 = obj.getRandom()


Java Version no.1:
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {

    /** @param head The linked list's head.
        Note that the head is guaranteed to be not null, so it contains at least one node. */
    int length;
    Random rand;
    ListNode head;
    public Solution(ListNode head) {
        length = 0;
        rand = new Random();
        this.head = head;
        ListNode currNode = head;
        while (currNode != null) {
            length ++;
            currNode = currNode.next;
        }
    }
    
    /** Returns a random node's value. */
    public int getRandom() {
        int randomInt = rand.nextInt(length);
        ListNode currNode = head;
        ListNode returnNode = currNode;
        while (randomInt >= 0) {
            returnNode = currNode;
            currNode = currNode.next;
            randomInt --;
        }
        return returnNode.val;
    }
}

/**
 * Your Solution object will be instantiated and called as such:
 * Solution obj = new Solution(head);
 * int param_1 = obj.getRandom();
 */
 
 
 Java Version no.2:
 /**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {

    /** @param head The linked list's head.
        Note that the head is guaranteed to be not null, so it contains at least one node. */
    ListNode head;
    Random rand;
    public Solution(ListNode head) {
        this.head = head;
        rand = new Random();
    }
    
    /** Returns a random node's value. */
    public int getRandom() {
        int res = 0, count = 0;
        ListNode currNode = head;
        while (currNode != null) {
            count ++;
            int currGuess = rand.nextInt(count) + 1;
            if (count == currGuess) {
                res = currNode.val;
            }
            currNode = currNode.next;
        }
        return res;
    }
}

/**
 * Your Solution object will be instantiated and called as such:
 * Solution obj = new Solution(head);
 * int param_1 = obj.getRandom();
 */
