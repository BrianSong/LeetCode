You are given two non-empty linked lists representing two non-negative integers. 
The digits are stored in reverse order and each of their nodes contain a single digit. 
Add the two numbers and return it as a linked list.

You may assume the two numbers do not contain any leading zero, except the number 0 itself.

Example:

Input: (2 -> 4 -> 3) + (5 -> 6 -> 4)
Output: 7 -> 0 -> 8
Explanation: 342 + 465 = 807.


Solution no.1: ------------------------------------------------ my own
# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution(object):
    def addTwoNumbers(self, l1, l2):
        """
        :type l1: ListNode
        :type l2: ListNode
        :rtype: ListNode
        """
        dummynode, reminder = ListNode(0), 0
        prev = dummynode
        while l1 and l2:
            head = ListNode(0)
            head.val = l1.val + l2.val + reminder
            if head.val >= 10:
                reminder = head.val / 10
                head.val %= 10
            else:
                reminder = 0
            l1 = l1.next
            l2 = l2.next
            prev.next = head
            prev = head
        if l1:
            while l1:
                print reminder
                head = ListNode(0)
                head.val = l1.val + reminder
                if head.val >= 10:
                    reminder = head.val / 10
                    head.val %= 10
                else:
                    reminder = 0
                l1 = l1.next
                prev.next = head
                prev = head
        elif l2:
            while l2:
                head = ListNode(0)
                head.val = l2.val + reminder
                if head.val >= 10:
                    reminder = head.val / 10
                    head.val %= 10
                else:
                    reminder = 0
                l2 = l2.next
                prev.next = head
                prev = head
        if reminder != 0:                                               # Must check reminder for all cases
            head = ListNode(reminder)
            prev.next = head
        return dummynode.next
        
        
Solution no.2: ----------------------------------------- Integrated and much concise version
# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution(object):
    def addTwoNumbers(self, l1, l2):
        """
        :type l1: ListNode
        :type l2: ListNode
        :rtype: ListNode
        """
        dummynode, reminder = ListNode(0), 0
        prev = dummynode
        while l1 or l2 or reminder:              # As long as one is not None, we continue
            head, v1, v2 = ListNode(0), 0, 0     # Must initilize v1 and v2, we cannot let l1.val = 0 or l2.val = 0 if l1 or l2 is None
            if l1:                                    
                v1 = l1.val
            if l2:
                v2 = l2.val
            head.val = v1 + v2 + reminder
            if head.val >= 10:
                reminder = head.val / 10
                head.val %= 10
            else:
                reminder = 0
            if l1: l1 = l1.next
            if l2: l2 = l2.next
            prev.next = head
            prev = head
        return dummynode.next
