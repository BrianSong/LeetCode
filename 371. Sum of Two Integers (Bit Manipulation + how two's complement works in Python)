Calculate the sum of two integers a and b, but you are not allowed to use the operator + and -.

Example 1:

Input: a = 1, b = 2
Output: 3
Example 2:

Input: a = -2, b = 3
Output: 1

Solution: --------------------- https://www.youtube.com/watch?time_continue=139&v=qq64FrA2UXQ (works for both positive)
----------------------------------------------------------------- O(1) T, O(1) S
'''
For this, problem, for example, we have a = 1, b = 3,

In bit representation, a = 0001, b = 0011,

First, we can use "and"("&") operation between a and b to find a carry.

carry = a & b, then carry = 0001

Second, we can use "xor" ("^") operation between a and b to find the different bit, and assign it to a,

Then, we shift carry one position left and assign it to b, b = 0010.

Iterate until there is no carry (or b == 0)

IDEALY,
let's try for a = 46, b = -14

46 = 101110
14 = 001110
-14 = 1's complement of (14) + 1 ( 1's complement = invert all bits)
so -14 = 110001
1 (+)
110010

so now all we have to do is add 46 and -14

46 = 101110
-14 = 110010 (+)
we get 100000 (which is 32 )

Note : we don't have to do the two's complement, the negative number will be already represented in two's complement.

HOWEVER, In python: the recursion will not end given input a=1, b=-1, as a and b just keeping increasing. => TLE ERROR

The issue is due to the way python performs left shift on negative numbers. 

Python 3 has arbitrary-precision integers ("bignums"). 
This means that anytime x is negative, x << 1 will make x a negative number with twice the magnitude. 
Zeros shifting in from the right will just push the number larger and larger.

In two's complement, positive numbers have a 0 in the highest bit and negative numbers have a 1 in the highest bit. 
That means that, when only one of a and b is negative, the top bits of a and b will differ. 
Therefore, x will be positive (1 & 0 = 0) and y will be negative (1 ^ 0 = 1). 
Thus the new a will be positive (x<<1) and the new b will be negative (y).

Now: arbitrary-precision negative integers actually have an infinite number of leading 1 bits, at least mathematicallly. 
So a is a larger and larger positive number, expanding by 2 each iteration.  
b keeps getting more and more leading 1 bits added to be able to carry out the bitwise & and ^ with  a. 
Thus whatever bits of a are turned on line up with one of the added 1 bits of b, so a & b is always true, so the loop runs forever.

For example, a = 4, b = -3:
in each iteration, print bin(a) and bin(b), the results are:
-0b111 0b1000
-0b1111 0b10000
-0b11111 0b100000
-0b111111 0b1000000
-0b1111111 0b10000000
-0b11111111 0b100000000
-0b111111111 0b1000000000
-0b1111111111 0b10000000000
-0b11111111111 0b100000000000
-0b111111111111 0b1000000000000
-0b1111111111111 0b10000000000000
-0b11111111111111 0b100000000000000
-0b111111111111111 0b1000000000000000
-0b1111111111111111 0b10000000000000000
-0b11111111111111111 0b100000000000000000
-0b111111111111111111 0b1000000000000000000
-0b1111111111111111111 0b10000000000000000000
-0b11111111111111111111 0b100000000000000000000
-0b111111111111111111111 0b1000000000000000000000
-0b1111111111111111111111 0b10000000000000000000000
-0b11111111111111111111111 0b100000000000000000000000
-0b111111111111111111111111 0b1000000000000000000000000
-0b1111111111111111111111111 0b10000000000000000000000000
-0b11111111111111111111111111 0b100000000000000000000000000
-0b111111111111111111111111111 0b1000000000000000000000000000
-0b1111111111111111111111111111 0b10000000000000000000000000000
-0b11111111111111111111111111111 0b100000000000000000000000000000
-0b111111111111111111111111111111 0b1000000000000000000000000000000
-0b1111111111111111111111111111111 0b10000000000000000000000000000000
-0b11111111111111111111111111111111 0b100000000000000000000000000000000
-0b111111111111111111111111111111111 0b1000000000000000000000000000000000
-0b1111111111111111111111111111111111 0b10000000000000000000000000000000000
-0b11111111111111111111111111111111111 0b100000000000000000000000000000000000
-0b111111111111111111111111111111111111 0b1000000000000000000000000000000000000
-0b1111111111111111111111111111111111111 0b10000000000000000000000000000000000000
-0b11111111111111111111111111111111111111 0b100000000000000000000000000000000000000
-0b111111111111111111111111111111111111111 0b1000000000000000000000000000000000000000
-0b1111111111111111111111111111111111111111 0b10000000000000000000000000000000000000000
-0b11111111111111111111111111111111111111111 0b100000000000000000000000000000000000000000
-0b111111111111111111111111111111111111111111 0b1000000000000000000000000000000000000000000
-0b1111111111111111111111111111111111111111111 0b10000000000000000000000000000000000000000000
-0b11111111111111111111111111111111111111111111 0b100000000000000000000000000000000000000000000
-0b111111111111111111111111111111111111111111111 0b1000000000000000000000000000000000000000000000
-0b1111111111111111111111111111111111111111111111 0b10000000000000000000000000000000000000000000000
-0b11111111111111111111111111111111111111111111111 0b100000000000000000000000000000000000000000000000
-0b111111111111111111111111111111111111111111111111 0b1000000000000000000000000000000000000000000000000
-0b1111111111111111111111111111111111111111111111111 0b10000000000000000000000000000000000000000000000000
-0b11111111111111111111111111111111111111111111111111 0b100000000000000000000000000000000000000000000000000
-0b111111111111111111111111111111111111111111111111111 0b1000000000000000000000000000000000000000000000000000
-0b1111111111111111111111111111111111111111111111111111 0b10000000000000000000000000000000000000000000000000000
-0b11111111111111111111111111111111111111111111111111111 0b100000000000000000000000000000000000000000000000000000
-0b111111111111111111111111111111111111111111111111111111 0b1000000000000000000000000000000000000000000000000000000
-0b1111111111111111111111111111111111111111111111111111111 0b10000000000000000000000000000000000000000000000000000000
-0b11111111111111111111111111111111111111111111111111111111 0b100000000000000000000000000000000000000000000000000000000
-0b111111111111111111111111111111111111111111111111111111111 0b1000000000000000000000000000000000000000000000000000000000
-0b1111111111111111111111111111111111111111111111111111111111 0b10000000000000000000000000000000000000000000000000000000000
-0b11111111111111111111111111111111111111111111111111111111111 0b100000000000000000000000000000000000000000000000000000000000
-0b111111111111111111111111111111111111111111111111111111111111 0b1000000000000000000000000000000000000000000000000000000000000
-0b1111111111111111111111111111111111111111111111111111111111111 0b10000000000000000000000000000000000000000000000000000000000000
-0b11111111111111111111111111111111111111111111111111111111111111 0b100000000000000000000000000000000000000000000000000000000000000
-0b111111111111111111111111111111111111111111111111111111111111111 0b1000000000000000000000000000000000000000000000000000000000000000
-0b1111111111111111111111111111111111111111111111111111111111111111 0b10000000000000000000000000000000000000000000000000000000000000000
....................................................
Nonstop => TLE ERROR
'''
class Solution(object):
    def getSum(self, a, b):
        """
        :type a: int
        :type b: int
        :rtype: int
        """
        mask = 0xFFFFFFFF                   # Therefore, we introduce a mask 0xFFFFFFFF
                                            # bin(mask) = 0b11111111111111111111111111111111
                                            # mask to get last 32 bits for avoiding TLE error
        
        while b:
            carry = a & b
            a = (a^b) & mask                # Use mask to & (a ^ b) and (carry << 1) will contain these two in 32 bits
            b = (carry << 1) & mask
       
        if a > 2**31:                       # if a is negative, then a is the two's complement in 32 bits of a negative number
                                            # However in Python, we can not directly use bin() to convert the negative two's complement
                                            # So, what we do in this if loop is to convert the two's complement of a negative number
                                            # into the real negative integer in Python
                                            # For exampel, if a == -4, how to get its two's complement?
                                            # -4 <=> 3 says for a four-bit situation
                                            # bin(3) = 0011, then bin(-4) = 1100
                                            # in 32 bits, bin(a) => 0b11111111111111111111111111111100
                                            # bin(a^mask) => 0b11
                                            # a^mask is to basically reverse all bits
                                            # the use ~ operator to change 0b to -0b and add 1 to the latter bits
            return ~(a^mask)                # bin(~(a^mask)) => -0b100 which is the -4 binary representation in Python
            
                                            # Python has its own way to represent negative number in binary form
                                            # e.x.: -10 in two's complement will be 0b11111111111111111111111111110110
                                            # however, in Python, it is -0b1010
                                            # the above ~(a^mask) is to transform 0b11111111111111111111111111110110 to -0b1010
        
        else:
            return a
            
'''
Two's Complement binary for Negative Integers:

Negative numbers are written with a leading one instead of a leading zero. 
So if you are using only 8 bits for your twos-complement numbers, 
then you treat patterns from "00000000" to "01111111" as the whole numbers from 0 to 127, 
and reserve "1xxxxxxx" for writing negative numbers. 
A negative number, -x, is written using the bit pattern for (x-1) with all of the bits complemented (switched from 1 to 0 or 0 to 1). 
So -1 is complement(1 - 1) = complement(0) = "11111111", 
and -10 is complement(10 - 1) = complement(9) = complement("00001001") = "11110110". 
This means that negative numbers go all the way down to -128 ("10000000").

What we talking above is signed integer,
let's look at 4-bit integers:
1. Unsigned int:
bits  value
0000    0
0001    1
0010    2
0011    3
0100    4
0101    5
0110    6
0111    7
1000    8
1001    9
1010   10
1011   11
1100   12
1101   13
1110   14
1111   15
So, for a unsigned integer, 32 bits range from 0 ~ 2^32 - 1 and Python doesn't have built-in unsigned types
2. Signed int
bits  value
0000    0
0001    1
0010    2
0011    3
0100    4
0101    5
0110    6
0111    7
1000   -8
1001   -7
1010   -6
1011   -5
1100   -4
1101   -3
1110   -2
1111   -1
So, for a signed integer, 32 bits range from -2^31 ~ 2^31 - 1
'''
