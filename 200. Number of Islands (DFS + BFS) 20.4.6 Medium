Given a 2d grid map of '1's (land) and '0's (water), count the number of islands. 
An island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. 
You may assume all four edges of the grid are all surrounded by water.

Example 1:

Input:
11110
11010
11000
00000

Output: 1
Example 2:

Input:
11000
11000
00100
00011

Output: 3

Solution no.1: ------------------------------------------- DFS --------- https://www.youtube.com/watch?v=hhBiPyr1Byo
------------------ Time complexity : O(M×N) where M is the number of rows and N is the number of columns.
------------------ Space complexity : worst case O(M×N) in case that the map is filled with 1 where DFS goes by M×N deep.
class Solution(object):
    def numIslands(self, grid):
        """
        :type grid: List[List[str]]
        :rtype: int
        """
        if not grid:
            return 0
        res = 0
        self.dirs = [[1, 0], [-1, 0], [0, 1], [0, -1]] # Four directions to go
        for i in range(len(grid)):                     # Traverse every element inside the 2-D matrix
            for j in range(len(grid[0])):
                if grid[i][j] == '1':
                    self.dfs(grid, i, j)
                    res += 1
        return res
    
    def dfs(self, grid, i, j):
        if i < 0 or i >= len(grid) or j < 0 or j >= len(grid[0]) or grid[i][j] != '1':
            return
        grid[i][j] = '#'                              # MISTAKE THAT TOOK ME 20 MINS TO FIND OUT !!!!!!!!!! "=" NOT "==" !!!!!!!!!!!
                                                      # After we find out the land that can connect to the previous land and form an 
                                                      # island, we change it to be '#' so that in the next for loop inside the 
                                                      # main function, it will not be considered as a new island
        for dir in self.dirs:
            self.dfs(grid, i + dir[0], j + dir[1])    # TRY OUT EVERY POSSIBILITIES until reach the exiting condition ------ DFS!!!!
            
            
Solution no.2: ----------------------------------------------------- BFS
-------------------------------------------------------------------- O(m * n) T and S
class Solution(object):
    def numIslands(self, grid):
        """
        :type grid: List[List[str]]
        :rtype: int
        """
        # Now solve this in BFS
        # Check the edge cases
        if not grid or not grid[0]:
            return 0
        res = 0
        queue = collections.deque()
        visited = set()
        for i in range(len(grid)):
            for j in range(len(grid[0])):
                if grid[i][j] == '1':
                    res += 1
                    queue.append((i, j))
                    visited.add((i, j))
                    while queue:
                        pop_x, pop_y = queue.popleft()
                        grid[pop_x][pop_y] = '#'
                        for dir in [[1, 0], [-1, 0], [0, 1], [0, -1]]:
                            new_x = pop_x + dir[0]
                            new_y = pop_y + dir[1]
                            if 0 <= new_x < len(grid) and 0 <= new_y < len(grid[0]) 
                            / and grid[new_x][new_y] == '1' and not (new_x, new_y) in visited:
                                queue.append((new_x, new_y))
                                visited.add((new_x, new_y))
        return res



Java Version DFS:
class Solution {
    public int numIslands(char[][] grid) {
        if (grid == null || grid.length == 0 || grid[0].length == 0) {
            return 0;
        }
        int island = 0, m = grid.length, n = grid[0].length;
        for (int i = 0; i < m; i ++) {
            for (int j = 0; j < n; j ++) {
                if (grid[i][j] == '1') {
                    expand(grid, i, j);
                    island ++;
                }
            }
        }
        return island;
    }
    
    public void expand(char[][] grid, int r, int c) {
        grid[r][c] = '*';
        for (int[] dir : new int[][] {{1, 0}, {-1, 0}, {0, 1}, {0, -1}}) {
            int newR = r + dir[0], newC = c + dir[1];
            if (newR < 0 || newR >= grid.length || newC < 0 || newC >= grid[0].length || grid[newR][newC] != '1') {
                continue;
            } else {
                expand(grid, newR, newC);
            }
        }
    }
}



Java Version BFS:
class Solution {
    public int numIslands(char[][] grid) {
        if (grid == null || grid.length == 0 || grid[0].length == 0) {
            return 0;
        }
        int island = 0, m = grid.length, n = grid[0].length;
        Queue<int[]> q = new LinkedList<>();
        for (int i = 0; i < m; i ++) {
            for (int j = 0; j < n; j ++) {
                if (grid[i][j] == '1') {
                    island ++;
                    q.offer(new int[] {i, j});
                    grid[i][j] = '*';
                }
                while (q.size() != 0) {
                    int[] curr = q.poll();
                    int r = curr[0], c = curr[1];
                    for (int[] dir : new int[][] {{1, 0}, {-1, 0}, {0, 1}, {0, -1}}) {
                        int newR = r + dir[0], newC = c + dir[1];
                        if (newR >= 0 && newR < m && newC >= 0 && newC < n && grid[newR][newC] == '1') {
                            q.offer(new int[] {newR, newC});
                            grid[newR][newC] = '*';
                        }
                    }
                }
            }
        }
        return island;
    }
}
