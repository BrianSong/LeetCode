Given a matrix of m x n elements (m rows, n columns), return all elements of the matrix in spiral order.

Example 1:

Input:
[
 [ 1, 2, 3 ],
 [ 4, 5, 6 ],
 [ 7, 8, 9 ]
]
Output: [1,2,3,6,9,8,7,4,5]
Example 2:

Input:
[
  [1, 2, 3, 4],
  [5, 6, 7, 8],
  [9,10,11,12]
]
Output: [1,2,3,4,8,12,11,10,9,5,6,7]

Solution: -------------------------------------------------- Layer-by-Layer ---- https://www.youtube.com/watch?v=dfGhf-Ko0L4
--------------------------------------------------------- O(N) T, O(N) S due to res
class Solution(object):
    def spiralOrder(self, matrix):
        if matrix == []:
            return []
        top, bot, left, right, res = 0, len(matrix) - 1, 0, len(matrix[0]) - 1, []  # len(matrix) - 1 and len(matrix[0]) - 1!!!!!!!!!!! 
                                                    # Defining four variables is very common in 2-D matrix to track the current location
        while left < right and top < buttom:
            for i in range(left, right):
                res.append(matrix[top][i])
            for i in range(top, buttom):
                res.append(matrix[i][right])
            for i in range(right, left, -1):
                res.append(matrix[buttom][i])
            for i in range(buttom, top, -1):
                res.append(matrix[i][left])
            top += 1                            # IMPORTANT!!!!!!!!!!!!!Always to remember update the arguments!!!!!!!!!!!!!!!!!!!!
            buttom -= 1
            left += 1
            right -= 1
        if top == buttom and right > left:      # Special case 1: leave one row
            for i in range(left, right + 1):    # (left, right + 1) now since we need to include every one last elements
                res.append(matrix[top][i])
        elif top == buttom and right == left:     # Special case 2: leave one element
            res.append(matrix[top][right])
        elif top < buttom and right == left:
            for i in range(top, buttom + 1):    # Special case 3: leave one column
                res.append(matrix[i][left])
        return res
            
        """
        :type matrix: List[List[int]]
        :rtype: List[int]
        """

Java Version:
class Solution {
    public List<Integer> spiralOrder(int[][] matrix) {
        List<Integer> res = new ArrayList<>();
        if (matrix == null || matrix.length == 0 || matrix[0].length == 0) {
            return res;
        }
        int m = matrix.length, n = matrix[0].length;
        int top = 0, bot = m - 1, left = 0, right = n - 1;
        while (top < bot && left < right) {
            for (int i = 0; i < n - 1; i ++) {
                res.add(matrix[top][left + i]);
            }
            for (int i = 0; i < m - 1; i ++) {
                res.add(matrix[top + i][right]);
            }
            for (int i = 0; i < n - 1; i ++) {
                res.add(matrix[bot][right - i]);
            }
            for (int i = 0; i < m - 1; i ++) {
                res.add(matrix[bot - i][left]);
            }
            n -= 2;
            m -= 2;
            left ++;
            right --;
            top ++;
            bot --;
        }
        if (top == bot && left < right) {
            for (int i = left; i <= right; i ++) {
                res.add(matrix[top][i]);
            }
        }
        if (top < bot && left == right) {
            for (int i = top; i <= bot; i ++) {
                res.add(matrix[i][left]);
            }
        }
        if (top == bot && left == right) {
            res.add(matrix[top][left]);
        }
        return res;
    }
}
