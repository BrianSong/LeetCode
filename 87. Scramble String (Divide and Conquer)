Given a string s1, we may represent it as a binary tree by partitioning it to two non-empty substrings recursively.

Below is one possible representation of s1 = "great":

    great
   /    \
  gr    eat
 / \    /  \
g   r  e   at
           / \
          a   t
To scramble the string, we may choose any non-leaf node and swap its two children.

For example, if we choose the node "gr" and swap its two children, it produces a scrambled string "rgeat".

    rgeat
   /    \
  rg    eat
 / \    /  \
r   g  e   at
           / \
          a   t
We say that "rgeat" is a scrambled string of "great".

Similarly, if we continue to swap the children of nodes "eat" and "at", it produces a scrambled string "rgtae".

    rgtae
   /    \
  rg    tae
 / \    /  \
r   g  ta  e
       / \
      t   a
We say that "rgtae" is a scrambled string of "great".

Given two strings s1 and s2 of the same length, determine if s2 is a scrambled string of s1.

Example 1:

Input: s1 = "great", s2 = "rgeat"
Output: true
Example 2:

Input: s1 = "abcde", s2 = "caebd"
Output: false


Solution: ---------------------------------- Divide and Conquer ---------------- https://www.youtube.com/watch?v=Lq3Kr7-qXGI
class Solution(object):
    def isScramble(self, s1, s2):
        """
        :type s1: str
        :type s2: str
        :rtype: bool
        """
        if not s1 or not s2 or len(s1) != len(s2):
            return False
        if len(s1) == len(s2) == 1 and s1 == s2:                                            # Base case
            return True
        if ''.join(sorted(s1)) != ''.join(sorted(s2)):                                      # ''.join() is to turn the returned unicode
                                                                                            # from sorted() into string
            return False
        for i in range(1, len(s1)):
            if (self.isScramble(s1[:i], s2[:i]) and self.isScramble(s1[i:], s2[i:])) or \   # 左 match 左 and 右 match 右
               (self.isScramble(s1[:i], s2[-i:]) and self.isScramble(s1[i:], s2[:-i])):     # 或者 左 match 右 and 右 match 左
            '''
            IMPORTANT !!!!!!!!!!!!!!!!!!!!
            Instead of "if (self.isScramble(s1[:i], s2[:i]) and self.isScramble(s1[i:], s2[i:])) or \
                        (self.isScramble(s1[:i], s2[i:]) and self.isScramble(s1[i:], s2[:i])):", why?
            Because s1[:i] has the same length as s[-i:] instead of s[i:]
            For example, s1 = [1,2,3,4,5,6]
            s1[-2:] = [5,6], s1[:-2] = [1,2,3,4]
            s[-i:] => 只要后i个, s[:-i] => 不要后i个
            Just like s1[i:] 与 s[:i]互补， s1[-i:]与s1[:-i]也同样互补
            '''
                return True
        return False
