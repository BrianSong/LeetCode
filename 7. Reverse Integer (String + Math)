Given a 32-bit signed integer, reverse digits of an integer.

Example 1:

Input: 123
Output: 321
Example 2:

Input: -123
Output: -321
Example 3:

Input: 120
Output: 21
Note:
Assume we are dealing with an environment which could only store integers within the 32-bit signed integer range: [âˆ’2**31,  2**31 âˆ’ 1]. 
For the purpose of this problem, assume that your function returns 0 when the reversed integer overflows.

Solution no.1: ----------------------------------------------- String
----------------------------------------------- O(N) T and S
class Solution(object):
    def reverse(self, x):
        """
        :type x: int
        :rtype: int
        """
        if not x:
            return x
        num = abs(x)
        if int(str(num)[::-1]) >= 2**31 - 1:
            return 0
        return int(str(num)[::-1]) if x > 0 else -int(str(num)[::-1])
        
Solutio no.2: ------------------------------------------ Math
-------------------------------------------------------- O(log10(x)) T, because there are roughly log10(x) digits in x, O(1) S
class Solution(object):
    def reverse(self, x):
        """
        :type x: int
        :rtype: int
        """
        curr, rev = abs(x), 0
        while curr:
            rev = rev * 10 + curr % 10
            curr = curr / 10
        if x > 0:
            if rev > 2**31 - 1:                      # Hand over overflow cases
                return 0
            else:
                return rev
        else:                                        # Hand over negative cases
            if -rev < -2**31:                        # Hand over overflow cases
                return 0
            else:
                return -rev
