Given a sorted array and a target value, return the index if the target is found. If not, 
return the index where it would be if it were inserted in order.

You may assume no duplicates in the array.

Example 1:

Input: [1,3,5,6], 5
Output: 2
Example 2:

Input: [1,3,5,6], 2
Output: 1
Example 3:

Input: [1,3,5,6], 7
Output: 4
Example 4:

Input: [1,3,5,6], 0
Output: 0

Solution no.1:
class Solution(object):
    def searchInsert(self, nums, target):
        left, right = 0, len(nums) - 1           # Two Pointer - Binary Search
        if target > nums[len(nums) - 1]:         # Outside the nums : case no.1
            return len(nums)
        elif target < nums[0]:                   # Outside the nums: case no.2
            return 0
        while left < right:
            mid = (left + right) / 2
            if nums[mid] == target:
                return mid
            elif nums[mid] < target:
                left += 1
            else:
                right -= 1
        return left                              # Why we return left and use "left < right" as the while condition?
                                                 # if the target is in the range of the nums:
                                                 # finially, it will be caught between left and right like this:
                                                 #            left     target      right
                                                 # what we want is the index that this target will be inserted which is the left + 1
                                                 # next iteration, mid = (left + right) / 2 which wil be equal to left
                                                 # and nums[mid] = nums[left] will be smaller than target, so left will be = left + 1
                                                 # and we must end the iteration here because left here is exactly what we want
                                                 # and now, left = right, we set the "left < right" as the while condition.
                                                      
        """
        :type nums: List[int]
        :type target: int
        :rtype: int
        """
Solution no.2: much more concise
class Solution(object):
    def searchInsert(self, nums, target):
        left, right = 0, len(nums) - 1
        while left <= right:                     # here, left <= right is also ok, because after left = right, right will --
                                                 # and left > right, end the iteration and we can still return left
                                                 # for the case when target is Outside the nums, it can still work
                                                 # case 1: left  = 0, right  = 0, right --, return left
                                                 # case 2: left = right = len(nums) - 1, left ++, return left
            mid = (left + right) / 2
            if nums[mid] == target:
                return mid
            elif nums[mid] < target:
                left += 1
            else:
                right -= 1
        return left
        """
        :type nums: List[int]
        :type target: int
        :rtype: int
        """
'''
Why left <= right and return left?????????????????????????????????
第二次悟出了
if target is not in nums,
there will be 3 cases
1.                                 left    target    right
                                nums[middle] == nums[left] < target
                                         left = left + 1
                                         return left -> correct
                                         
2.                                        target    nums
                                     nums[middle] == nums[0] == nums[left] > target
                                          return left --- 0 -> correct
                                            
3.                                         nums     target
                                     nums[middle] == nums[left] == nums[len(nums) - 2] < target
                                           left = left + 1
                                          return left --- len(nums) - 1 -> correct
'''
