Given four lists A, B, C, D of integer values, 
compute how many tuples (i, j, k, l) there are such that A[i] + B[j] + C[k] + D[l] is zero.

To make problem a bit easier, all A, B, C, D have same length of N where 0 ≤ N ≤ 500. 
All integers are in the range of -228 to 228 - 1 and the result is guaranteed to be at most 231 - 1.

Example:

Input:
A = [ 1, 2]
B = [-2,-1]
C = [-1, 2]
D = [ 0, 2]

Output:
2

Explanation:
The two tuples are:
1. (0, 0, 0, 1) -> A[0] + B[0] + C[0] + D[1] = 1 + (-2) + (-1) + 2 = 0
2. (1, 1, 0, 0) -> A[1] + B[1] + C[0] + D[0] = 2 + (-1) + (-1) + 0 = 0


Solution: ---------------------------------------------- HashTable
-------------------------------------------------------- O(n^2) T O(n) S
class Solution(object):
    def fourSumCount(self, A, B, C, D):
        """
        :type A: List[int]
        :type B: List[int]
        :type C: List[int]
        :type D: List[int]
        :rtype: int
        """
        HashTable = {}
        for a in A:
            for b in B:
                if a + b in HashTable:
                    HashTable[a + b] += 1
                else:
                    HashTable[a + b] = 1
        res = 0
        for c in C:
            for d in D:
                if - c - d in HashTable:
                    res += HashTable[- c - d]
        return res

Java Version:
class Solution {
    public int fourSumCount(int[] A, int[] B, int[] C, int[] D) {
        if (A == null || A.length == 0 || B == null || B.length == 0 || C == null || C.length == 0 || D == null || D.length == 0) {
            return 0;
        }
        
        int res = 0;
        
        Map<Integer, Integer> hashMap = new HashMap<>();
        for (int a : A) {
            for (int b : B) {
                hashMap.put(a + b, hashMap.getOrDefault(a + b, 0) + 1);
            }
        }
        
        
        for (int c : C) {
            for (int d : D) {
                if (hashMap.containsKey(-c - d)) {
                    res += hashMap.get(-c - d);
                }
            }
        }
        
        return res;
        
    }
}
