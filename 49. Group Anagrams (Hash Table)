Given an array of strings, group anagrams together.

Example:

Input: ["eat", "tea", "tan", "ate", "nat", "bat"],
Output:
[
  ["ate","eat","tea"],
  ["nat","tan"],
  ["bat"]
]
Note:

All inputs will be in lowercase.
The order of your output does not matter.

Solution: ------------------ data structure "dictionary" in python is a Hash Table-------https://www.youtube.com/watch?v=BgibAOHgioY
class Solution(object):
    def groupAnagrams(self, strs):
        hashmap = collections.defaultdict(list)     # collections.defaultdic(list) can assign a default list-type value so that we can use
                                                    # append() or += or -= operators
        for item in strs:
            hashmap[str(sorted(item))].append(item) # key can only be integer, string or tuple
                                                    # sort() is a very useful tool for "Anagrams" problems
        return hashmap.values()                     # dictionary.values() return all its values
        """
        :type strs: List[str]
        :rtype: List[List[str]]
        """
Solution no.2:
class Solution(object):
    def groupAnagrams(self, strs):
        d = {}
        for w in sorted(strs):
            key = tuple(sorted(w))
            d[key] = d.get(key, []) + [w]          # get(key, []) means if there is no this key in the dictionary, return a default []
                                                   # print ["abc"] + ["hhh"] >>>>>>>>>>>>>>>>>>>> ['abc', 'hhh']
        return d.values()
