Evaluate the value of an arithmetic expression in Reverse Polish Notation.

Valid operators are +, -, *, /. Each operand may be an integer or another expression.

Note:

Division between two integers should truncate toward zero.
The given RPN expression is always valid. That means the expression would always evaluate to a result and 
there won't be any divide by zero operation.
Example 1:

Input: ["2", "1", "+", "3", "*"]
Output: 9
Explanation: ((2 + 1) * 3) = 9
Example 2:

Input: ["4", "13", "5", "/", "+"]
Output: 6
Explanation: (4 + (13 / 5)) = 6
Example 3:

Input: ["10", "6", "9", "3", "+", "-11", "*", "/", "*", "17", "+", "5", "+"]
Output: 22
Explanation: 
  ((10 * (6 / ((9 + 3) * -11))) + 17) + 5
= ((10 * (6 / (12 * -11))) + 17) + 5
= ((10 * (6 / -132)) + 17) + 5
= ((10 * 0) + 17) + 5
= (0 + 17) + 5
= 17 + 5
= 22

Solution: ---------------------------------------------- Stack  -------------------------- https://www.youtube.com/watch?v=SAb1kWV7_PY
class Solution(object):
    def evalRPN(self, tokens):
        """
        :type tokens: List[str]
        :rtype: int
        """
        if len(tokens) == 0: return 0
        stack = []
        for token in tokens:
            if token.lstrip("-").isdigit():                         # isdigit() cannot recognize negetive number like -11
                                                                    # so we add lstrip("-") function to remove any "-"
                stack.append(int(token))
            else:
                if token == "+":
                    new_token = stack.pop() + stack.pop()
                elif token == "*":
                    new_token = stack.pop() * stack.pop()
                elif token == "-":                                  # "-" and "/" is a little different, what comes after must be on top
                    temp = stack.pop()
                    new_token = stack.pop() - temp
                else:
                    temp = stack.pop()
                    new_token = int(stack.pop() / float(temp))      # Due to python divide characteristic, use int(A / float(B))
                stack.append(new_token)
        return stack.pop()
