Given a binary tree, check whether it is a mirror of itself (ie, symmetric around its center).

For example, this binary tree [1,2,2,3,4,4,3] is symmetric:

    1
   / \
  2   2
 / \ / \
3  4 4  3
But the following [1,2,2,null,3,null,3] is not:
    1
   / \
  2   2
   \   \
   3    3
   
Solution: ----------------------------------------------------------- Divide and Conquer ----- https://www.youtube.com/watch?v=hL4sXXZ1K1Y
class Solution(object):
    def isSymmetric(self, root):
        if root is None:
            return True
        return self.helper(root.left, root.right)
        """
        :type root: TreeNode
        :rtype: bool
        """
    def helper(self, left, right):
        if left is None and right is None:        # Boundary Condition 1: Both come to an end and still symmetric
            return True
        if left is None or right is None:         # Boundary Condition 2: One end come to the end but the other does not, so not symmetric
            return False
        return left.val == right.val and self.helper(left.left, right.right) and self.helper(left.right, right.left)
        # Divide and Conquer: Divide the big problem into smaller ones 
