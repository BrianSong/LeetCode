You are given an integer array nums and you have to return a new counts array. 
The counts array has the property where counts[i] is the number of smaller elements to the right of nums[i].

Example:

Input: [5,2,6,1]
Output: [2,1,1,0] 
Explanation:
To the right of 5 there are 2 smaller elements (2 and 1).
To the right of 2 there is only 1 smaller element (1).
To the right of 6 there is 1 smaller element (1).
To the right of 1 there is 0 smaller element.


Solution: ------------------------------------------------------- MergeSort
------------------------------------------------- O(nlogn) T => logn step and n comparison per step, O(n) S
'''
The smaller numbers on the right of a number are exactly those that jump from its right to its left during a stable merge sort. 
So I do mergesort with added tracking of those right-to-left jumps.
'''
class Solution(object):
    def countSmaller(self, nums):
        """
        :type nums: List[int]
        :rtype: List[int]
        """
        self.res = [0 for i in range(len(nums))]
        self.mergeSort(list(enumerate(nums)))                                          # For example, nums = [5,2,6,1]
                                                                                       # list(enumerate(nums)): 
                                                                                       # [(0, 5), (1, 2), (2, 6), (3, 1)]
        return self.res
    
    def mergeSort(self, enum):
            half = len(enum) / 2
            if half:                                                                   # Use half to decide whether hit the base case:
                                                                                       # len(enum) == 1 or 0 => just return enum
                                                                                       # No need to do mergeSort
                left, right = self.mergeSort(enum[:half]), self.mergeSort(enum[half:]) # use left and right sublist => typical mergesort
                                                                                       # After this step,
                                                                                       # left and right has already been sorted
                for i in range(len(enum))[::-1]:                                       # Reverse Order !!!!!!!!!!!!!!!!!!1
                        if right and left and left[-1][1] > right[-1][1]:
                            self.res[left[-1][0]] += len(right)                        # Since the right has already been sorted, 
                                                                                       # as long as the rightest(biggest) is smaller, 
                                                                                       # the whole right array is smaller, so we can add
                                                                                       # len(right) to according res's index position
                            enum[i] = left.pop()
                        elif right and left and left[-1][1] <= right[-1][1]:
                            enum[i] = right.pop()
                        elif not right:
                            enum[i] = left.pop()
                        elif not left:                                                 # 4 cases, for "not left and not right",
                                                                                       # it will not be passed to here due to
                                                                                       # for i in range(len(enum))[::-1], len(enum) = 0
                            enum[i] = right.pop()
                        '''
                        IMPORTANT !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
                        How to deal with "and"/"or" in python?
                        if a statement is followed by a "or", as long as it is true, the whole condition will be true
                        and the further statment behind "or" will not be processed.
                        elif a statement is followed by a "and", as long as it is false, whole will be false, no need further processing
                        else, we will process the further statements.
                        '''
            return enum                                                                # Return the sorted list to upper level
