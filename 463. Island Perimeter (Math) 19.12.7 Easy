You are given a map in form of a two-dimensional integer grid where 1 represents land and 0 represents water.

Grid cells are connected horizontally/vertically (not diagonally). The grid is completely surrounded by water, 
and there is exactly one island (i.e., one or more connected land cells).

The island doesn't have "lakes" (water inside that isn't connected to the water around the island). 
One cell is a square with side length 1. The grid is rectangular, width and height don't exceed 100. 
Determine the perimeter of the island.

 

Example:

Input:
[[0,1,0,0],
 [1,1,1,0],
 [0,1,0,0],
 [1,1,0,0]]

Output: 16

Solution: --------------------------------- Math
------------------------------------------- O(N) T, O(1) S
'''
1. loop over the matrix and count the number of islands;
2. if the current dot is an island, count if it has any right neighbour or down neighbour;
3. the result is islands * 4 - neighbours * 2
'''
class Solution(object):
    def islandPerimeter(self, grid):
        """
        :type grid: List[List[int]]
        :rtype: int
        """
        islands, neighbours = 0, 0
        for i in range(len(grid)):
            for j in range(len(grid[0])):
                if grid[i][j] == 1:
                    islands += 1
                    if j < len(grid[0]) - 1 and grid[i][j + 1] == 1:       # Why only count right and down? => to avoid repetition
                        neighbours += 1
                    if i < len(grid) - 1 and grid[i + 1][j] == 1:
                        neighbours += 1
        return islands * 4 - neighbours * 2                                # the pattern is islands * 4 - neighbours * 2, 
                                                                           # since every adjacent islands made two sides disappeared
                                                                           
                                                                           
                                                                           
My original solution, PASS BUT A LITTLE SLOW:
class Solution(object):
    def islandPerimeter(self, grid):
        """
        :type grid: List[List[int]]
        :rtype: int
        """
        # Check the edge cases
        if not grid or not grid[0]:
            return 0
        # Loop over the grid, find any land cell and count their contribution to the total perimeter
        res = 0
        for i in range(len(grid)):
            for j in range(len(grid[0])):
                if grid[i][j] == 1:
                    # Use a helper function to do the counting for me
                    curr_count = self.count(grid, i, j)
                    if curr_count == 0:
                        return 4
                    elif curr_count == 1:
                        res += 3
                    elif curr_count == 2:
                        res += 2
                    elif curr_count == 3:
                        res += 1
                    else:
                        continue
        return res
    
    # Helper function
    def count(self, grid, i, j):
        count = 0
        for dir in [[1, 0], [-1, 0], [0, 1], [0, -1]]:
            new_i = i + dir[0]
            new_j = j + dir[1]
            if 0 <= new_i < len(grid) and 0 <= new_j < len(grid[0]) and grid[new_i][new_j] == 1:
                count += 1
        return count
