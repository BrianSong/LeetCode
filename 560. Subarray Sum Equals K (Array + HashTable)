Given an array of integers and an integer k, you need to find the total number of continuous subarrays whose sum equals to k.

Example 1:
Input:nums = [1,1,1], k = 2
Output: 2
Note:
The length of the array is in range [1, 20,000].
The range of numbers in the array is [-1000, 1000] and the range of the integer k is [-1e7, 1e7].


Solution no.1: -------------------------------- Brute Force TLE ERROR
class Solution(object):
    def subarraySum(self, nums, k):
        """
        :type nums: List[int]
        :type k: int
        :rtype: int
        """
        if not nums or len(nums) == 0:
            return 0
        res = 0
        for i in range(len(nums)):
            currsum = nums[i]
            if currsum == k:
                res += 1
            for j in range(i + 1, len(nums)):
                currsum += nums[j]
                if currsum == k:
                    res += 1
        return res
        
        
Solution no.2: ------------------------------------------ HashTable
'''
Solution 1. Brute force. We just need two loops (i, j) and test if SUM[i, j] = k. Time complexity O(n^2), Space complexity O(1). 
I bet this solution will TLE.

Solution 2. From solution 1, we know the key to solve this problem is SUM[i, j]. 
So if we know SUM[0, i - 1] and SUM[0, j], then we can easily get SUM[i, j]. 
To achieve this, we just need to go through the array, calculate the current sum and save number of all seen PreSum to a HashMap. 
Time complexity O(n), Space complexity O(n).
'''
class Solution(object):
    def subarraySum(self, nums, k):
        """
        :type nums: List[int]
        :type k: int
        :rtype: int
        """
        presum, currsum, res = {0:1}, 0, 0
        for num in nums:
            currsum += num
            res += presum.get(currsum - k, 0)
            presum[currsum] = presum.get(currsum, 0) + 1
        return res
