Given an array of citations sorted in ascending order (each citation is a non-negative integer) of a researcher, 
write a function to compute the researcher's h-index.

According to the definition of h-index on Wikipedia: "A scientist has index h if h of his/her N papers have at least h citations each, 
and the other N âˆ’ h papers have no more than h citations each."

Example:

Input: citations = [0,1,3,5,6]
Output: 3 
Explanation: [0,1,3,5,6] means the researcher has 5 papers in total and each of them had 
             received 0, 1, 3, 5, 6 citations respectively. 
             Since the researcher has 3 papers with at least 3 citations each and the remaining 
             two with no more than 3 citations each, her h-index is 3.
Note:

If there are several possible values for h, the maximum one is taken as the h-index.

Follow up:

This is a follow up problem to H-Index, where citations is now guaranteed to be sorted in ascending order.
Could you solve it in logarithmic time complexity?

Solution: ------------------------------------ Binary Search ------------------------- logarithmic time complexity
---------------------------------------------- O(logn) T, O(1) S 
class Solution(object):
    def hIndex(self, citations):
        """
        :type citations: List[int]
        :rtype: int
        """
        start, end = 0, len(citations) - 1
        while start <= end:                                   # Classic binary search: using two pointers, >= must be applied here
            middle = (start + end) / 2
            if citations[middle] == len(citations) - middle:  # If we find it, just return it right now
                return citations[middle]                      # the citations is in ascending order, there is no possible bigger result
            elif citations[middle] > len(citations) - middle: 
                end = middle - 1
            else:
                start = middle + 1
        return len(citations) - start                         # why return len - start? ------ must be paired with "while start <= end"
                                                              # After passing the while loop, start now is the first element in
                                                              # citations that meet the h-index requirement, we should return
                                                              # the length of how many passed papers instead of citation
                                                              # usually in binary search, we return start or end, seldom middle
        
