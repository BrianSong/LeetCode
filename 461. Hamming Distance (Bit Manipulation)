The Hamming distance between two integers is the number of positions at which the corresponding bits are different.

Given two integers x and y, calculate the Hamming distance.

Note:
0 ≤ x, y < 231.

Example:

Input: x = 1, y = 4

Output: 2

Explanation:
1   (0 0 0 1)
4   (0 1 0 0)
       ↑   ↑

The above arrows point to positions where the corresponding bits are different.


Solution: ------------------------------------------------------- Bit Manipulation
class Solution(object):
    def hammingDistance(self, x, y):
        """
        :type x: int
        :type y: int
        :rtype: int
        """
        res = 0
        for i in range(32):
            if (x >> i & 1) != (y >> i & 1):    # x >> i will return an integer, for example, 4(0 1 0 0) >> 1 == 2(0 0 1 0)
                                                # But here, what we want is the last digit of the binary representation
                                                # So, we use "& 1"
                                                # Why? 1 => 00000000...0001 and & will return 1 if the last digit is 1 else 0
                                                # Any number & with 1, what really matters is only the last digit
                                                # The number with last digit 1 will return 1, with last digit 0 will return 0
                                                # This is how we can get the last digit of a specific binary representation for a number
                res += 1
        return res
