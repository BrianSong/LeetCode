Given a non-empty string s and a dictionary wordDict containing a list of non-empty words, 
determine if s can be segmented into a space-separated sequence of one or more dictionary words.

Note:

The same word in the dictionary may be reused multiple times in the segmentation.
You may assume the dictionary does not contain duplicate words.
Example 1:

Input: s = "leetcode", wordDict = ["leet", "code"]
Output: true
Explanation: Return true because "leetcode" can be segmented as "leet code".
Example 2:

Input: s = "applepenapple", wordDict = ["apple", "pen"]
Output: true
Explanation: Return true because "applepenapple" can be segmented as "apple pen apple".
             Note that you are allowed to reuse a dictionary word.
Example 3:

Input: s = "catsandog", wordDict = ["cats", "dog", "sand", "and", "cat"]
Output: false

Solution: ----------------------------------- Dynamic Programming ---------------------- https://www.youtube.com/watch?v=pYKGRZwbuzs
class Solution(object):
    def wordBreak(self, s, wordDict):
        """
        :type s: str
        :type wordDict: List[str]
        :rtype: bool
        """
        dp = [False] * (len(s) + 1)          # Step no.1: 题目要求我们返回一个Boolean，大概率就是DP，并且DP state 也应设为Boolean
                                             # dp[i] is used for recording the result of length i substring in s
        dp[0] = True                         # Step no.2
        for i in range(1, len(dp)):          # Step no.3: 用i先遍历整个s
            for j in range(i, 0, -1):
                if s[j-1:i] in wordDict:     # Why s[j - 1 : i] instead of s[j:i + 1] ??? because now we are dealing with string starts
                                             # from index 0 !!!!! not dp start from index 1 !!!! (assmue dp[0] is true)
                    if dp[j - 1] == True:    # 多设置了一个j变量用来从后往前看，如果从后往前看时，再wordDict中，只要前面的状态是True，
                                             # 此时的状态也是True
                        dp[i] = True
                        break
        return dp[-1]                        # Step no.4
