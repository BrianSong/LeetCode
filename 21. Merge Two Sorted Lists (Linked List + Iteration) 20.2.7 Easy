Merge two sorted linked lists and return it as a new list. 
The new list should be made by splicing together the nodes of the first two lists.

Example:

Input: 1->2->4, 1->3->4
Output: 1->1->2->3->4->4

Solution: --------------------------------------------- Linked List + Iteration
------------------------------------------ O(m + n) T, O(1) S
# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution(object):
    def mergeTwoLists(self, l1, l2):
        """
        :type l1: ListNode
        :type l2: ListNode
        :rtype: ListNode
        """
        if not l1:
            return l2
        if not l2:
            return l1
        dummy = ListNode(0)
        prev = dummy
        while l1 and l2:
            if l1.val <= l2.val:
                newNode = ListNode(l1.val)
                prev.next = newNode
                prev = newNode                                          # prev = newNode instead of newNode = prev !!!!!!!!!!!!
                l1 = l1.next
            else:
                newNode = ListNode(l2.val)
                prev.next = newNode
                prev = newNode
                l2 = l2.next
        if not l1 and l2:
            prev.next = l2
        elif not l2 and l1:
            prev.next = l1
        return dummy.next
        
        
Java Version:
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
class Solution {
    public ListNode mergeTwoLists(ListNode l1, ListNode l2) {
        if (l1 == null) {
            return l2;
        }
        
        if (l2 == null) {
            return l1;
        }
        
        ListNode dummyNode = new ListNode(0);
        ListNode prevNode = dummyNode;
        
        while (l1 != null && l2 != null) {
            if (l1.val > l2.val) {
                ListNode currNode = new ListNode(l2.val);
                prevNode.next = currNode;
                prevNode = currNode;
                l2 = l2.next;
            } else {
                ListNode currNode = new ListNode(l1.val);
                prevNode.next = currNode;
                prevNode = currNode;
                l1 = l1.next;
            }
        }
        
        if (l1 != null) {
            prevNode.next = l1;
        }
        
        if (l2 != null) {
            prevNode.next = l2;
        }
        
        return dummyNode.next;
    }
}
