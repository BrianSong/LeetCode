Shuffle a set of numbers without duplicates.

Example:

// Init an array with set 1, 2, and 3.
int[] nums = {1,2,3};
Solution solution = new Solution(nums);

// Shuffle the array [1,2,3] and return its result. Any permutation of [1,2,3] must equally likely to be returned.
solution.shuffle();

// Resets the array back to its original configuration [1,2,3].
solution.reset();

// Returns the random shuffling of array [1,2,3].
solution.shuffle();


Solution no.1: ------------------------------------- Brute Force ---------------- Why we use list() between list assignment??
---------------------------------------------------- O(n^2) time due to "aux.pop(remove_idx)", O(n) space
'''
The correctness of the algorithm follows from the fact that an element (without loss of generality) 
is equally likely to be selected during all iterations of the for loop.
See detailed proof in the original attached solution.
'''
class Solution(object):

    def __init__(self, nums):
        """
        :type nums: List[int]
        """
        self.array = nums
        self.original = list(nums)                               

    def reset(self):
        """
        Resets the array to its original configuration and return it.
        :rtype: List[int]
        """
        self.array = list(self.original)                                       # Everytime we assign = to two different array,
        return self.array                                                      # if we do not want any connections between them         
                                                                               # we MUST use list() in between !!!!!!!!!!!!!!!!!!!!!!!
    def shuffle(self):
        """
        Returns a random shuffling of the array.
        :rtype: List[int]
        """
        aux = list(self.array)                                                 # Why use list() ? 
                                                                               # In python, = between list means direct assignment, 
                                                                               # if we let aux = self.array, instead of putting a list()
                                                                               # When aux.pop(), self.array will also pop()
                                                                               # for example:
                                                                               # a = [3,4]
                                                                               # b = a
                                                                               # b.pop()
                                                                               # print(a) => [3]
        for i in range(len(self.array)):
            remove_idx = random.randrange(len(aux))
            self.array[i] = aux.pop(remove_idx)
        return self.array
        
        
Solution no.2: -------------------------------------- Fisher-Yates Algorithm
----------------------------------------------------- O(n) time, O(n) space
'''
On each iteration of the algorithm, we generate a random integer between the current index and the last index of the array. 
Then, we swap the elements at the current index and the chosen index - this simulates drawing (and removing) the element from the hat, 
as the next range from which we select a random index will not include the most recently processed one. 
One small, yet important detail is that it is possible to swap an element with itself, 
otherwise, some array permutations would be more likely than others. 
'''
class Solution(object):

    def __init__(self, nums):
        """
        :type nums: List[int]
        """
        self.array = nums
        self.original = list(nums)

    def reset(self):
        """
        Resets the array to its original configuration and return it.
        :rtype: List[int]
        """
        self.array = self.original
        self.original = list(self.original)
        return self.array
    
    def shuffle(self):
        """
        Returns a random shuffling of the array.
        :rtype: List[int]
        """
        for i in range(len(self.array)):
            idx = random.randrange(i, len(self.array))                      # How does this algorithm work? Consider a case: [1,2,3]
            self.array[i], self.array[idx] = self.array[idx], self.array[i] # When i == 0, 1, 2, 3 should be equally likely to be picked
        return self.array                                                   # Say, 1 want to be at index 0,
                                                                            # then its possibility to be picked at index 0 is 1/3
                                                                            # if 1 want to be at index 1,
                                                                            # the possibility will be 2/3 * 1 / 2 = 1 /3
                                                                            # for index 2, it will be 2 /3 * 1 / 2 * 1 = 1 / 3
                                                                            # In this algo, the swap is the equal as pick from the rest



Java Version:
class Solution {
    private int[] original;
    private int[] array;
    
    Random rand = new Random();
    
    public Solution(int[] nums) {
        array = nums;
        original = nums.clone();
    }
    
    /** Resets the array to its original configuration and return it. */
    public int[] reset() {
        array = original;
        original = original.clone();
        return original;
    }
    
    /** Returns a random shuffling of the array. */
    public int[] shuffle() {
        for (int i = 0; i < array.length; i++) {
            int swapIndex = rand.nextInt(array.length - i) + i;
            int temp = array[i];
            array[i] = array[swapIndex];
            array[swapIndex] = temp;
        }
        return array;
    }
}

/**
 * Your Solution object will be instantiated and called as such:
 * Solution obj = new Solution(nums);
 * int[] param_1 = obj.reset();
 * int[] param_2 = obj.shuffle();
 */
