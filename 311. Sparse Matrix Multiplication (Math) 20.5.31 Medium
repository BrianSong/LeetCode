Given two sparse matrices A and B, return the result of AB.

You may assume that A's column number is equal to B's row number.

Example:

Input:

A = [
  [ 1, 0, 0],
  [-1, 0, 3]
]

B = [
  [ 7, 0, 0 ],
  [ 0, 0, 0 ],
  [ 0, 0, 1 ]
]

Output:

     |  1 0 0 |   | 7 0 0 |   |  7 0 0 |
AB = | -1 0 3 | x | 0 0 0 | = | -7 0 3 |
                  | 0 0 1 |
                  
                  
                  
Solution no.1: BF O(m*l*n) T and O(m*n) S
class Solution(object):
    def multiply(self, A, B):
        """
        :type A: List[List[int]]
        :type B: List[List[int]]
        :rtype: List[List[int]]
        """
        res = [[0 for j in range(len(B[0]))] for i in range(len(A))]
        for i in range(len(res)):
            for j in range(len(res[0])):
                for k in range(len(A[0])):
                    res[i][j] += A[i][k] * B[k][j]
        return res
        
The smart solution, the key part of smart solution is that: it does not calculate the final result at once, 
and it takes each value from A, and calculate and partial sum and accumulate it into the final spot

For i from 0 to len(A)
C[i][0]=A[i][0]*B[0][0] + A[i][1]*B[1][0] + A[i][2]*B[2][0] + ... A[i][k]B[k][0] .... A[i][K]*B[K][0]
C[i][1]=A[i][0]*B[0][1] + A[i][1]*B[1][1] + A[i][2]*B[2][1] + ... A[i][k]B[k][0] .... A[i][K]*B[K][1]
...
C[i][len(B[0])]=A[i][0]*B[0][len(B[0])] + A[i][1]*B[1][len(B[0])] + A[i][2]*B[2][len(B[0])] 
                + ... A[i][k]B[k][len(B[0])] .... A[i][K]*B[K][len(B[0])]
                
Key part: the C[ i ][ j ] by now is not the final value in the result matrix !! 
Remember, in the brute force solution, the final value of C[i][j], 
takes sum of all multiplication values of K corresponding values from A and B? 
here C[ i ][ j ] is only sum of some multiplication values, NOT ALL until the program is done

BY NOW, it is very clear that, if the value A[ i ][ k ] from matrix is zero, 
we skip a For-loop- calculation, which is a loop iterating len(A[0]) times, 
and this is the key part of why the smart solution is smart!!!

Solution no.2: Smart solution
class Solution(object):
    def multiply(self, A, B):
        """
        :type A: List[List[int]]
        :type B: List[List[int]]
        :rtype: List[List[int]]
        """
        res = [[0 for j in range(len(B[0]))] for i in range(len(A))]
        for i in range(len(res)):
            for k in range(len(A[0])):
                if A[i][k] != 0:
                    for j in range(len(res[0])):
                        res[i][j] += A[i][k] * B[k][j]
        return res
        
C++ Version will be followed up in the future.
