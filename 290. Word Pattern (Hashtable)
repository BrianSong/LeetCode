Given a pattern and a string str, find if str follows the same pattern.

Here follow means a full match, such that there is a bijection between a letter in pattern and a non-empty word in str.

Example 1:

Input: pattern = "abba", str = "dog cat cat dog"
Output: true
Example 2:

Input:pattern = "abba", str = "dog cat cat fish"
Output: false
Example 3:

Input: pattern = "aaaa", str = "dog cat cat dog"
Output: false
Example 4:

Input: pattern = "abba", str = "dog dog dog dog"
Output: false
Notes:
You may assume pattern contains only lowercase letters, and str contains lowercase letters that may be separated by a single space.

Solution:
class Solution(object):
    def wordPattern(self, pattern, str):
        """
        :type pattern: str
        :type str: str
        :rtype: bool
        """
        dic = {}
        str = str.split()                                                              # split() can split the string using 空格 inside
        patternlist = [x for x in pattern]
        if len(str) != len(patternlist) or len(set(str)) != len(set(patternlist)):     # Very important to consider set()
                                                                              # for case like: pattern = "abba", str = "dog dog dog dog"
                                                                              # and pattern = "aaaa", str = "dog cat cat dog"
            return False
        for i, value in enumerate(pattern):
            if value in dic:
                if dic[value] != str[i]:
                    return False
            dic[value] = str[i]
        return True
