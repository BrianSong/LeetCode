Find all possible combinations of k numbers that add up to a number n, given that only numbers from 1 to 9 can be used and each combination should be a unique set of numbers.

Note:

All numbers will be positive integers.
The solution set must not contain duplicate combinations.
Example 1:

Input: k = 3, n = 7
Output: [[1,2,4]]
Example 2:

Input: k = 3, n = 9
Output: [[1,2,6], [1,3,5], [2,3,4]]

Solution:                                                    # VERY VERY SMART WAY AND CONCISE
class Solution(object):
    def combinationSum3(self, k, n):
        res = []
        self.combin_help(k, n, 0, [], res, range(1, 10))    # DIFINE THE INPUT ARGUMENT DIRECTLY to make the code concise
        return res
    
    def combin_help(self, k, n, index, path, res, nums):
        if n < 0:           # Set the exit condition outside the for loop! GREAT!
            return          # Break is used to end loops while return is used to end a function (and return a value).
                            # So if a function only has foor loop, return(of course will return something) and break will do the same thing
        if len(path) == k and n == 0:
            res.append(path)
            return
        for i in range(index, len(nums)): # Always remember to include a index for backtracking problem to know the current position
            self.combin_help(k, n-nums[i], i + 1, path+[nums[i]], res, nums) # VERY VERY SMART path + []
                                                                            # This way we do not need a clist for this problem or any pop()
