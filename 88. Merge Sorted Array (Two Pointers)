Given two sorted integer arrays nums1 and nums2, merge nums2 into nums1 as one sorted array.

Note:

The number of elements initialized in nums1 and nums2 are m and n respectively.
You may assume that nums1 has enough space (size that is greater or equal to m + n) to hold additional elements from nums2.
Example:

Input:
nums1 = [1,2,3,0,0,0], m = 3
nums2 = [2,5,6],       n = 3

Output: [1,2,2,3,5,6]

Solution: ---------------------------------------------------------- https://www.youtube.com/watch?v=ANUDq_2Bs04
class Solution(object):
    def merge(self, nums1, m, nums2, n):
        """
        :type nums1: List[int]
        :type m: int
        :type nums2: List[int]
        :type n: int
        :rtype: None Do not return anything, modify nums1 in-place instead.
        """
        while m > 0 and n > 0:                                                   # 当两个数列都还没读完时
            if nums1[m - 1] <= nums2[n - 1]:                                     # case no.1: nums2 > nums1, insert in the end
                                                                                 # IMPORTANT !!!!! BOTH LISTS HAVE BEEN SORTED
                nums1[m - 1 + n] = nums2[n - 1]                                  # nums1[m - 1 + n] is the rightest 0 in the nums1 list
                n -= 1
            else:                                                                # case no.2: nums2 < nums1, swap the current biggest
                                                                                 # number nums2[m - 1] to the back of the array
                nums1[m - 1 + n], nums1[m - 1] = nums1[m - 1], nums1[m - 1 + n]
                m -= 1
        if m == 0 and n > 0:                                                     # Special case: we do not need to worry when n == 0
                                                                                 # which means all nums2's elements have been merged
                                                                                 # What we should worry about is that m == 0 and n > 0
                                                                                 # which means there are still element in nums2 
                                                                                 # that have not been merged to nums1
                                                                           # So, we just merge all left element into nums1 for this case
                                                                           # because what left must satify nums1[m - 1] > nums2[n - 1]
                                                                           # which means they are the smallest elements now.
            nums1[:n] = nums2[:n]
