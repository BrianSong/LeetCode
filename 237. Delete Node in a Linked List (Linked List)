Write a function to delete a node (except the tail) in a singly linked list, given only access to that node.

Example:

Input: head = [4,5,1,9], node = 5
Output: [4,1,9]
Explanation: You are given the second node with value 5, the linked list should become 4 -> 1 -> 9 after calling your function.

Solution: --------------------------------- Bad question !!!!!!!!!! not even given a head ?????????????????????????
--------------------------------------------- O(1) T and S
# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.next = None
class Solution(object):
    def deleteNode(self, node):
        if node.next: # As mentioned in the statement, "EXCEPT THE TAIL"
            node.val = node.next.val # STEP NO.1: replace this node's value with its next node's value
            node.next = node.next.next # STEP NO.2: Assign this node's next's next to this node's next so that we can get rid of the 
                                       # repeated node
        """
        :type node: ListNode
        :rtype: void Do not return anything, modify node in-place instead.
        """
