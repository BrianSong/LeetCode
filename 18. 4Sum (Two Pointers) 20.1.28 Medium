Given an array nums of n integers and an integer target, are there elements a, b, c, and d in nums such that a + b + c + d = target? 
Find all unique quadruplets in the array which gives the sum of target.

Note:

The solution set must not contain duplicate quadruplets.

Example:

Given array nums = [1, 0, -1, 0, -2, 2], and target = 0.

A solution set is:
[
  [-1,  0, 0, 1],
  [-2, -1, 1, 2],
  [-2,  0, 0, 2]
]

Solution: ----------------------------------------- Two Pointers -------------------------- https://www.youtube.com/watch?v=4wFQdfTZdzI
--------------------------------------------------- O(n^3) T O(1) S
class Solution(object):
    def fourSum(self, nums, target):
        """
        :type nums: List[int]
        :type target: int
        :rtype: List[List[int]]
        """
        if not nums or len(nums) < 4:
            return None
        nums.sort()
        res = []
        for i in range(len(nums) - 3):
            if i == 0 or nums[i] != nums[i - 1]:                                            # 4 sum 去重
                for j in range(i + 1, len(nums) - 2):
                    if j == i + 1 or nums[j] != nums[j - 1]:                                # 3 sum 去重
                        start, end = j + 1, len(nums) - 1
                        while start < end:
                            if nums[start] + nums[end] == target - nums[i] - nums[j]:
                                res.append([nums[i], nums[j], nums[start], nums[end]])
                                while start < end and nums[start] == nums[start + 1]:       # 2 sum 去重
                                    start += 1
                                while start < end and nums[end] == nums[end - 1]:
                                    end -= 1
                                start += 1
                                end -= 1
                            elif nums[start] + nums[end] > target - nums[i] - nums[j]:
                                end -= 1
                            else:
                                start += 1
        return res

Java Version:
class Solution {
    public List<List<Integer>> fourSum(int[] nums, int target) {
        List<List<Integer>> res = new ArrayList<>();
        
        if (nums == null || nums.length < 4) {
            return res;
        }
        
        Arrays.sort(nums);
        
        for (int i = 0; i < nums.length - 3; i ++ ){
            if (i != 0 && nums[i] == nums[i - 1]) {
                continue;
            } else {
                for (int j = i + 1; j < nums.length - 2; j ++) {
                    if (j != i + 1 && nums[j] == nums[j - 1]) {
                        continue;
                    } else {
                        int left = j + 1;
                        int right = nums.length - 1;
                        while (left < right) {
                            if (nums[i] + nums[j] + nums[left] + nums[right] == target) {
                                res.add(Arrays.asList(nums[i], nums[j], nums[left], nums[right]));
                                while (left < right && nums[left] == nums[left + 1]) {
                                    left += 1;
                                }
                                while (left < right && nums[right] == nums[right - 1]) {
                                    right -= 1;
                                }
                                left += 1;
                                right -= 1;
                            } else if (nums[i] + nums[j] + nums[left] + nums[right] > target) {
                                right -= 1;
                            } else {
                                left += 1;
                            }
                    }
                }
            }
        }
    }
        return res;
    }
}
