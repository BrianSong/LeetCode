A string of brackets is considered correctly matched if every opening bracket 
in the string can be paired up with a later closing bracket, 
and vice versa. For instance, “(())()” is correctly matched, whereas “)(“ and “((” aren’t. For instance, 
“((” could become correctly matched by adding two closing brackets at the end, so you’d return 2.

Given a string that consists of brackets, write a function bracketMatch that takes a bracket string as an input 
and returns the minimum number of brackets you’d need to add to the input in order to make it correctly matched.

Explain the correctness of your code, and analyze its time and space complexities.

Examples:

input:  text = “(()”
output: 1

input:  text = “(())”
output: 0

input:  text = “())(”
output: 2
Constraints:

[time limit] 5000ms

[input] string text

1 ≤ text.length ≤ 5000
[output] integer


Solution no.1: ----------------------------------------- Stack
-------------------------------------------------------- O(n) T and S
def bracket_match(text):
    # Check the edge cases
    if not text:
      return -1
    if len(text) == 1:
      return 1
    stack = []
    # Traverse the text
    for c in text:
      # Two conditions we need to consider
      if c == '(':
        stack.append(c)
      elif c == ')':
        if stack:
          if stack[-1] == '(':
            stack.pop()
            continue
          else:
            stack.append(c)
        else:
          stack.append(c)
    return len(stack)
    

Solution no.2: ------------------------------------------ Optimize to O(1) S
def bracket_match(text):
    # Check the edge cases
    if not text:
      return -1
    if len(text) == 1:
      return 1
    top_element, count, length = None, 0, 0
    # Traverse the text
    for c in text:
      # Two conditions we need to consider
      if c == '(':
        top_element = c
        count += 1
      elif c == ')':
        if top_element == '(':
          count -= 1
          if count == 0:
            top_element = None
        else:
          length += 1
    return length + count
