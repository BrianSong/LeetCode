A linked list is given such that each node contains an additional random pointer which could point to any node in the list or null.

Return a deep copy of the list.

 

Example 1:



Input:
{"$id":"1","next":{"$id":"2","next":null,"random":{"$ref":"2"},"val":2},"random":{"$ref":"2"},"val":1}

Explanation:
Node 1's value is 1, both of its next and random pointer points to Node 2.
Node 2's value is 2, its next pointer points to null and its random pointer points to itself.
 

Note:

You must return the copy of the given head as a reference to the cloned list.


Solution: ---------------------------------------------------- HashTable
"""
# Definition for a Node.
class Node(object):
    def __init__(self, val, next, random):
        self.val = val
        self.next = next
        self.random = random
"""
def factory():
	return Node(0, None, None)

class Solution(object):
    def copyRandomList(self, head):
        """
        :type head: Node
        :rtype: Node
        """
        if not head:
            return None
        NodeTable = collections.defaultdict(factory)          # Can not be NodeTable = collections.defaultdict(Node(0, None, None))
                                                              # the argument inside collections.defaultdict must be
                                                              # callable or None !!!!!!!!!!!!!!
        NodeTable[None] = None                                # Avoid None as key to generate a RandomListNode
        temp = head
        while temp:
            NodeTable[temp].val = temp.val
            NodeTable[temp].next = NodeTable[temp.next]
            NodeTable[temp].random = NodeTable[temp.random]
            temp = temp.next
        del NodeTable[None]
        return NodeTable[head]
