Given n pairs of parentheses, write a function to generate all combinations of well-formed parentheses.

For example, given n = 3, a solution set is:

[
  "((()))",
  "(()())",
  "(())()",
  "()(())",
  "()()()"
]

Solution:
class Solution(object):
    def generateParenthesis(self, n):
        if not n: #Always good to consider the worse input 
            return[]
        left, right, res, string = n, n, [], ""
        self.pare_helper(left, right, res, string)
        return res
        """
        :type n: int
        :rtype: List[str]
        """
        
    def pare_helper(self, left, right, res, string):
        if not left and not right: #Exit condition no.1: Running out of left and right parentheses
            res.append(string)
            return
        if left > right: 
        '''
        Exit condition no.2: For the output string to be right, stack of ")" most be larger than stack of "(". 
        If not, it creates string like "())"
        '''
            return
        if left:
            self.pare_helper(left-1, right, res, string + "(")
        if right:
            self.pare_helper(left, right-1, res, string + ")")
