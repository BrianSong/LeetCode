Roman numerals are represented by seven different symbols: I, V, X, L, C, D and M.

Symbol       Value
I             1
V             5
X             10
L             50
C             100
D             500
M             1000
For example, two is written as II in Roman numeral, just two one's added together. 
Twelve is written as, XII, which is simply X + II. The number twenty seven is written as XXVII, which is XX + V + II.

Roman numerals are usually written largest to smallest from left to right. 
However, the numeral for four is not IIII. Instead, the number four is written as IV. 
Because the one is before the five we subtract it making four. 
The same principle applies to the number nine, which is written as IX. There are six instances where subtraction is used:

I can be placed before V (5) and X (10) to make 4 and 9. 
X can be placed before L (50) and C (100) to make 40 and 90. 
C can be placed before D (500) and M (1000) to make 400 and 900.
Given a roman numeral, convert it to an integer. Input is guaranteed to be within the range from 1 to 3999.

Example 1:

Input: "III"
Output: 3
Example 2:

Input: "IV"
Output: 4
Example 3:

Input: "IX"
Output: 9
Example 4:

Input: "LVIII"
Output: 58
Explanation: L = 50, V= 5, III = 3.
Example 5:

Input: "MCMXCIV"
Output: 1994
Explanation: M = 1000, CM = 900, XC = 90 and IV = 4.


Solution no.1: -------------------------------------------------------------- HashTable
-------------------------------------------------- O(n^2) worst T for replace() in Python, O(k) S
class Solution(object):
    def romanToInt(self,s):
        translation = {                        # We must set it as "I": 1, instead of 1: "I",
                                               # because we would like to call dic[key] to obtain the value later
            "I" : 1,
            "V" : 5,
            "X" : 10,
            "L" : 50,
            "C" : 100,
            "D" : 500,
            "M" : 1000  
        }
        number = 0
        s = s.replace("IV", "IIII")            # string.replace() will replace all satisfied old pieces with new pieces, 
                                               # however, replace() do not modify the original string
                                               # so, we must do the direct assignment here to modify the original string
        s = s.replace("IX", "VIIII")
        s = s.replace("XL", "XXXX")
        s = s.replace("XC", "LXXXX")
        s = s.replace("CD", "CCCC")
        s = s.replace("CM", "DCCCC")
        for w in s:
            number += translation[w]
        return number

Solution no.2: -------------------------------------------------------- A much more efficient way
----------------------------------------------- O(n) T, O(1) S
class Solution(object):
    def romanToInt(self, s):
        """
        :type s: str
        :rtype: int
        """
        if not s:
            return 0
        res = 0
        for i in range(len(s) - 1, -1, -1):
            c = s[i]    
            if c == 'I':
                res += 1 if res < 5 else -1                 # For case "IV", "IX"
            elif c == 'V':
                res += 5
            elif c == 'X':
                res += 10 if res < 50 else -10              # For case "XL", "XC"
            elif c == 'L':
                res += 50
            elif c == 'C':
                res += 100 if res < 500 else -100           # For case "CD", "CM"
            elif c == 'D':
                res += 500
            elif c == 'M':
                res += 1000
        return res
