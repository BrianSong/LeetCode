Given an array of meeting time intervals consisting of start and end times [[s1,e1],[s2,e2],...] (si < ei), 
find the minimum number of conference rooms required.

Example 1:

Input: [[0, 30],[5, 10],[15, 20]]
Output: 2
Example 2:

Input: [[7,10],[2,4]]
Output: 1

Solution: ------------------------------------------------------ Heap
----------------------------- O(NlogN) T: 1. Sorting of the array that takes O(NlogN) considering that the array consists of N elements
------- 2. Then we have the min-heap. In the worst case, all N meetings will collide with each other. 
------- In any case we have N add operations on the heap. In the worst case we will have N extract-min operations as well.
------- Overall complexity being NlogN since extract-min operation on a heap takes O(logN).
------- O(N) S because we construct the min-heap and that can contain N elements in the worst case.
'''
1. Sort the given meetings by their start time.
2. Initialize a new min-heap and add the first meeting's ending time to the heap. 
   We simply need to keep track of the ending times as that tells us when a meeting room will get free.
3. For every meeting room check if the minimum element of the heap i.e. the room at the top of the heap is free or not.
   If the room is free, then we pop the top element and add the ending time of the current meeting we are processing into the heap.
   If not, then we allocate a new room and add it to the heap.
4. After processing all the meetings, the size of the heap will tell us the number of rooms allocated. 
   This will be the minimum number of rooms needed to accommodate all the meetings.
'''
class Solution(object):
    def minMeetingRooms(self, intervals):
        """
        :type intervals: List[List[int]]
        :rtype: int
        """
        if not intervals:
            return 0
        room = []
        intervals.sort(key = lambda x: x[0])    
        heapq.heappush(room, intervals[0][1])             # Instead of pushing the whole tuple into the pq, we can just push its endtime
        for interval in intervals[1:]:                    # IMPORTANT !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
                                                          # START from intervals[1:] !!!!!!!!!!!!!!!! not intervals !!!!!!!!!!!!!!!!
                                                          # Since we already push the first element into the heap !!!!
            if interval[0] >= room[0]:
                   heapq.heappop(room)                    # heapq is a binary heap, with O(1):average / O(logn): worst push 
                                                          # and O(logn) pop
            heapq.heappush(room, interval[1])
        return len(room)                                  # We just return the length of the heap



Java Version:
class Solution {
    public int minMeetingRooms(int[][] intervals) {
        if (intervals == null || intervals.length == 0 || intervals[0].length == 0) {
            return 0;
        }
        Arrays.sort(intervals, (a, b) -> a[0] - b[0]);
        PriorityQueue<Integer> pq = new PriorityQueue<Integer>(intervals.length, (a, b) -> a - b);
        
        pq.add(intervals[0][1]);
        
        for (int i = 1; i < intervals.length; i ++) {
            if (intervals[i][0] >= pq.peek()) {
                pq.remove();
            }
            pq.add(intervals[i][1]);  
        }
        return pq.size();
    }
}
