Implement next permutation, which rearranges numbers into the lexicographically next greater permutation of numbers.

If such arrangement is not possible, it must rearrange it as the lowest possible order (ie, sorted in ascending order).

The replacement must be in-place and use only constant extra memory.

Here are some examples. Inputs are in the left-hand column and its corresponding outputs are in the right-hand column.

1,2,3 → 1,3,2
3,2,1 → 1,2,3
1,1,5 → 1,5,1


Solution: ---------------------------------------------- https://www.youtube.com/watch?v=w58KFpW5Pjk
class Solution(object):
    def nextPermutation(self, nums):
        """
        :type nums: List[int]
        :rtype: None Do not return anything, modify nums in-place instead.
        """
        if not nums or len(nums) == 0:
            return None
        replaceidx = len(nums) - 2
        while replaceidx >= 0:                                              # Step no.1: find the element that needed to be replaced
            if nums[replaceidx] < nums[replaceidx + 1]:
                break
            replaceidx -= 1
        if replaceidx < 0:                                                  # Special case: e.x.: 5 4 3 2 1
            self.reverse(nums, 0, len(nums) - 1)
        else:                                                               # Normal cases e.x. 5 3 4 2 1, the element is 3
            laridx = replaceidx + 1
            while laridx < len(nums) and nums[laridx] > nums[replaceidx]:   # Step no.2: Find the closest larger element for replacing
                                                                            # here, the element is 4
                laridx += 1
            temp = nums[laridx - 1]
            nums[laridx - 1] = nums[replaceidx]
            nums[replaceidx] = temp
            self.reverse(nums, replaceidx + 1, len(nums) - 1)               # After the swapping, (5 4 3 2 1) reverse the part after
                                                                            # the replaced element (5 4 1 2 3)
                
    def reverse(self, nums, start, end):
        while start < end:
                temp = nums[end]
                nums[end] = nums[start]
                nums[start] = temp
                start += 1
                end -= 1
