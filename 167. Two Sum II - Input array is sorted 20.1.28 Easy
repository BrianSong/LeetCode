Given an array of integers that is already sorted in ascending order, find two numbers such that they add up to a specific target number.

The function twoSum should return indices of the two numbers such that they add up to the target, where index1 must be less than index2.

Note:

Your returned answers (both index1 and index2) are not zero-based.
You may assume that each input would have exactly one solution and you may not use the same element twice.
Example:

Input: numbers = [2,7,11,15], target = 9
Output: [1,2]
Explanation: The sum of 2 and 7 is 9. Therefore index1 = 1, index2 = 2.

Solution: --------------------------------------------- Two Pointers
------------------------------------------------------- O(n) T O(1) S
class Solution(object):
    def twoSum(self, numbers, target):
        start, end = 0, len(numbers) - 1                   # Two Pointers: usually used for sorted ascending order list
        while start < end:                                 # Typical condition for two pointer algorithm
            s = numbers[start] + numbers[end]
            if s == target:
                return start + 1, end + 1
            if s > target:
                end -= 1
            if s < target:
                start += 1
            
        """
        :type numbers: List[int]
        :type target: int
        :rtype: List[int]
        """

Java Version:
class Solution {
    public int[] twoSum(int[] numbers, int target) {
        if (numbers == null || numbers.length == 0) {
            return null;
        }
        
        int left = 0;
        int right = numbers.length - 1;
        
        while (left < right) {
            if (numbers[left] + numbers[right] == target) {
                return new int[] {left + 1, right + 1};
            } else if (numbers[left] + numbers[right] > target) {
                right -= 1;
            } else {
                left += 1;
            }
        }
        return null;
    }
}
