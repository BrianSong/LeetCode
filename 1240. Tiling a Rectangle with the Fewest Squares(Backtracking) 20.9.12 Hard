Given a rectangle of size n x m, find the minimum number of integer-sided squares that tile the rectangle.

 

Example 1:



Input: n = 2, m = 3
Output: 3
Explanation: 3 squares are necessary to cover the rectangle.
2 (squares of 1x1)
1 (square of 2x2)
Example 2:



Input: n = 5, m = 8
Output: 5
Example 3:



Input: n = 11, m = 13
Output: 6
 

Constraints:

1 <= n <= 13
1 <= m <= 13


Solution: 
'''
Place squares in the order of bottom to top and left to right
'''
class Solution(object):
    def tilingRectangle(self, n, m):
        """
        :type n: int
        :type m: int
        :rtype: int
        """
        self.move = float('inf')
        self.dfs(n, [0] * (m), 0)
        return self.move
    
    def dfs(self, n, heights, curr):
        if all(h == n for h in heights):
            self.move = min(self.move, curr)
            return
        if curr >= self.move:
            return
        min_height = min(heights)
        idx = heights.index(min_height)
        ridx = idx + 1
        while ridx < len(heights) and heights[ridx] == heights[idx]:
            ridx += 1 
        max_width = ridx - idx                                                  # Width
        for width in range(min(max_width, n - min_height), 0, -1):              # n - min_height is the Height here
            new_heights = heights[:]
            for i in range(width):
                new_heights[idx + i] += width
            self.dfs(n, new_heights, curr + 1)
