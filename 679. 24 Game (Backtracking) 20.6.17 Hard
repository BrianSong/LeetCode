You have 4 cards each containing a number from 1 to 9. 
You need to judge whether they could operated through *, /, +, -, (, ) to get the value of 24.

Example 1:
Input: [4, 1, 8, 7]
Output: True
Explanation: (8-4) * (7-1) = 24
Example 2:
Input: [1, 2, 1, 2]
Output: False
Note:
The division operator / represents real division, not integer division. For example, 4 / (1 - 2/3) = 12.
Every operation done is between two numbers. In particular, we cannot use - as a unary operator. 
For example, with [1, 1, 1, 1] as input, the expression -1 - 1 - 1 - 1 is not allowed.
You cannot concatenate numbers together. For example, if the input is [1, 2, 1, 2], we cannot write this as 12 + 12.


Solution:
class Solution(object):
    def judgePoint24(self, nums):
        """
        :type nums: List[int]
        :rtype: bool
        """
        if len(nums) == 1 and abs(nums[0] - 24) < 0.001:
            return True
        for i in range(len(nums)):
            for j in range(len(nums)):
                if i != j:
                    base = [nums[k] for k in range(len(nums)) if k != i and k != j]
                    if self.judgePoint24(base + [nums[i] * nums[j]]):
                        return True
                    if self.judgePoint24(base + [nums[i] + nums[j]]):
                        return True
                    if self.judgePoint24(base + [nums[i] - nums[j]]):
                        return True
                    if self.judgePoint24(base + [nums[j] - nums[i]]):
                        return True
                    if nums[i] != 0 and self.judgePoint24(base + [nums[j] / float(nums[i])]):
                        return True
                    if nums[j] != 0 and self.judgePoint24(base + [nums[i] / float(nums[j])]):
                        return True
        return False
