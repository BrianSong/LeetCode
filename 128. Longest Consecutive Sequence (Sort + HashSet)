Given an unsorted array of integers, find the length of the longest consecutive elements sequence.

Your algorithm should run in O(n) complexity.

Example:

Input: [100, 4, 200, 1, 3, 2]
Output: 4
Explanation: The longest consecutive elements sequence is [1, 2, 3, 4]. Therefore its length is 4.


Solution no.1: ---------------------------------------- Sort O(nlogn) time complexity
class Solution(object):
    def longestConsecutive(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        if not nums:
            return 0
        nums.sort()
        res, curr = 1, 1
        for i in range(1, len(nums)):
            if nums[i] != nums[i - 1]:              # If the current number and the previous are equal, 
                                                    # then our current sequence is neither extended nor broken, 
                                                    # so we simply move on to the next number.
                                                    # for example: [100,4,200,1,3,2,2]
                if nums[i] == nums[i - 1] + 1:
                    curr += 1
                else:
                    res = max(res, curr)            # Only need to compare res when the sequence break => reduce computational cost
                    curr = 1
        return max(res, curr)                       # It is possible that the last element of nums is part of the longest sequence, 
                                                    # so we return the maximum of the current sequence and the longest one.
                                                    
                                                    
Solution no.2: --------------------------------------- HashSet O(1) time compl.
class Solution(object):
    def longestConsecutive(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        res = 0
        nums_set = set(nums)                             # set in Python allows O(1) lookups
        
        for num in set(nums):
            if num - 1 not in nums_set:                  # We try to find the begin element of every possible consecutive sequence
                                                         # This "if" further reduce the time complexity
                                                         # For those who got confused by if the last solution is O(n^2) or O(n), 
                                                         # please take a close look at the entering of the logic: 
                                                         # if num - 1 not in nums_set:
                                                         # That means, for example, 6,5,4,3,2,1 input, only the value 1 is valid 
                                                         # for continuing the further process, which reduces O(n) to O(1) for this step.
                currnum = num
                currres = 1
                while currnum + 1 in nums_set:           # If the current consecutive sequence can extend, we continue
                    currres += 1
                    currnum += 1
                res = max(currres, res)                  # Update the res everytime we finish one possible consecutive sequence
        return res
