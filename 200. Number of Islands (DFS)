Given a 2d grid map of '1's (land) and '0's (water), count the number of islands. 
An island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. 
You may assume all four edges of the grid are all surrounded by water.

Example 1:

Input:
11110
11010
11000
00000

Output: 1
Example 2:

Input:
11000
11000
00100
00011

Output: 3

Solution: ------------------------------------------- DFS --------- https://www.youtube.com/watch?v=hhBiPyr1Byo
----------------------------------------------------- O(n^2) T, O(n) S
class Solution(object):
    def numIslands(self, grid):
        """
        :type grid: List[List[str]]
        :rtype: int
        """
        if not grid:
            return 0
        res = 0
        self.dirs = [[1, 0], [-1, 0], [0, 1], [0, -1]] # Four directions to go
        for i in range(len(grid)):                     # Traverse every element inside the 2-D matrix
            for j in range(len(grid[0])):
                if grid[i][j] == '1':
                    self.dfs(grid, i, j)
                    res += 1
        return res
    
    def dfs(self, grid, i, j):
        if i < 0 or i >= len(grid) or j < 0 or j >= len(grid[0]) or grid[i][j] != '1':
            return
        grid[i][j] = '#'                              # MISTAKE THAT TOOK ME 20 MINS TO FIND OUT !!!!!!!!!! "=" NOT "==" !!!!!!!!!!!
                                                      # After we find out the land that can connect to the previous land and form an 
                                                      # island, we change it to be '#' so that in the next for loop inside the 
                                                      # main function, it will not be considered as a new island
        for dir in self.dirs:
            self.dfs(grid, i + dir[0], j + dir[1])    # TRY OUT EVERY POSSIBILITIES until reach the exiting condition ------ DFS!!!!
