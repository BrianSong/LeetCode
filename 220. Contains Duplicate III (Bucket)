Given an array of integers, 
find out whether there are two distinct indices i and j in the array such that the absolute difference between nums[i] and nums[j] 
is at most t and the absolute difference between i and j is at most k.

Example 1:

Input: nums = [1,2,3,1], k = 3, t = 0
Output: true
Example 2:

Input: nums = [1,0,1,1], k = 1, t = 2
Output: true
Example 3:

Input: nums = [1,5,9,1,5,9], k = 2, t = 3
Output: false

Solution: ----------------------------- Bucket ---------------------------------- https://www.youtube.com/watch?v=yc4hCFzNNQc
'''
The idea is like the bucket sort algorithm. 
Suppose we have consecutive buckets covering the range of nums with each bucket a width of (t+1). 
If there are two item with difference <= t, one of the two will happen:

(1) the two in the same bucket
(2) the two in neighbor buckets
'''
class Solution(object):
    def containsNearbyAlmostDuplicate(self, nums, k, t):
        """
        :type nums: List[int]
        :type k: int
        :type t: int
        :rtype: bool
        """
        if k <= 0 or t < 0:
            return False
        d = {}
        for i in range(len(nums)):
            if nums[i] / (t + 1) in d:                                                         # t + 1 is for when t == 0 (nums[i] / 0)
                return True
            if nums[i] / (t + 1) - 1 in d and abs(nums[i] - d[nums[i] / (t + 1) - 1]) <= t:    # neighbor basket in the left
                return True 
            if nums[i] / (t + 1) + 1 in d and abs(nums[i] - d[nums[i] / (t + 1) + 1]) <= t:    # neighbor basket in the right 
                return True
            d[nums[i] / (t + 1)] = nums[i]
            if i >= k:                                                                         # Keep the "diff(i, j) <= k" condition
                                                                                               # Must be <= instead of <
                                                                                               # because i == k, in the next for level,
                                                                                               # i = k + 1, 0 and k + 1 will break the 
                                                                                               # condition
                del d[nums[i - k] / (t + 1)]
        return False
