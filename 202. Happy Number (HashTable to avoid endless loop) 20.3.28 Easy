Write an algorithm to determine if a number is "happy".

A happy number is a number defined by the following process: Starting with any positive integer, 
replace the number by the sum of the squares of its digits, and repeat the process until the number equals 1 (where it will stay), 
or it loops endlessly in a cycle which does not include 1. Those numbers for which this process ends in 1 are happy numbers.

Example: 

Input: 19
Output: true
Explanation: 
12 + 92 = 82
82 + 22 = 68
62 + 82 = 100
12 + 02 + 02 = 1

Solution: -------------------------------------------------- HashTable to avoid endless loop
------------------------------------ O(logn) T and S
class Solution(object):
    def isHappy(self, n):
        """
        :type n: int
        :rtype: bool
        """
        if not n:
            return False
        HashTable = {}
        while True:
            if n in HashTable:
                return False
            HashTable[n] = 1
            curr = 0
            for i in range(len(str(n))):
                curr += int(str(n)[i]) ** 2
            if curr == 1:
                return True
            n = curr


Java Version:
class Solution {
    public boolean isHappy(int n) {
        if (n <= 0) {
            return false;
        }
        Set<Integer> set = new HashSet<>();
        while (true) {
            int temp = 0;
            while (n != 0) {
                temp += Math.pow((n % 10), 2);
                n /= 10;
            }
            n = temp;
            if (set.contains(n)) {
                return false;
            }
            set.add(n);
            if (n == 1) {
                return true;
            }
        }
    }
}
