Given a binary tree containing digits from 0-9 only, each root-to-leaf path could represent a number.

An example is the root-to-leaf path 1->2->3 which represents the number 123.

Find the total sum of all root-to-leaf numbers.

Note: A leaf is a node with no children.

Example:

Input: [1,2,3]
    1
   / \
  2   3
Output: 25
Explanation:
The root-to-leaf path 1->2 represents the number 12.
The root-to-leaf path 1->3 represents the number 13.
Therefore, sum = 12 + 13 = 25.
Example 2:

Input: [4,9,0,5,1]
    4
   / \
  9   0
 / \
5   1
Output: 1026
Explanation:
The root-to-leaf path 4->9->5 represents the number 495.
The root-to-leaf path 4->9->1 represents the number 491.
The root-to-leaf path 4->0 represents the number 40.
Therefore, sum = 495 + 491 + 40 = 1026.

Solution no.1: ----------------------------- my own --------------- DFS
-------------------------------------------------------------- O(n^2) T ? anyway, not efficient, O(n) S
# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None
class Solution(object):
    def sumNumbers(self, root):
        """
        :type root: TreeNode
        :rtype: int
        """
        if not root:
            return 0
        final_comb = self.dfs(root)
        res = 0
        for item in final_comb:
            res += int(item)
        return res
    
    def dfs(self, root):
        if not root:
            return []
        left_comb = self.dfs(root.left)
        right_comb = self.dfs(root.right)
        if not (left_comb + right_comb):
            return [str(root.val)]
        curr_comb = []
        for item in (left_comb + right_comb):
            curr_comb.append(str(root.val) + item)
        return curr_comb
        
        
Solution no.2: ----------------------------------------------- Much more clever approach
-------------------------------------------------------------- O(n) T, O(n) S
class Solution(object):
    def sumNumbers(self, root):
        self.res = 0
        self.dfs(root, 0)
        return self.res

    def dfs(self, root, value):
        if root:                                                 # Classic boundary condition for dfs
                                                                 # Must check if root is None beforehead
                                                                 # because we refer to root.left and root.right later,
                                                                 # if the root is None, will bring Error
            if not root.left and not root.right:                 # Encounter the leaf node, time to add the result
                self.res += value*10 + root.val
                return
            self.dfs(root.left, value*10+root.val)               # Go left, "* 10" here is very clever
            self.dfs(root.right, value*10+root.val)              # Go right



Java Version but without using global variable:
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public int sumNumbers(TreeNode root) {
        if (root == null) {
            return 0;
        }
        return dfs(root, 0);
    }
    
    public int dfs(TreeNode currNode, int currSum) {
        if (currNode.left == null && currNode.right == null) {
            return currSum * 10 + currNode.val;
        }
        int left = 0, right = 0;
        if (currNode.left != null) {
            left = dfs(currNode.left, currSum * 10 + currNode.val);
        }
        if (currNode.right != null) {
            right = dfs(currNode.right, currSum * 10 + currNode.val);
        }
        return left + right;
    }
}
