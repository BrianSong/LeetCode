Given a sorted integer array nums, where the range of elements are in the inclusive range [lower, upper], 
return its missing ranges.

Example:

Input: nums = [0, 1, 3, 50, 75], lower = 0 and upper = 99,
Output: ["2", "4->49", "51->74", "76->99"]


Solution: O(n) T, O(n) S
class Solution(object):
    def findMissingRanges(self, nums, lower, upper):
        """
        :type nums: List[int]
        :type lower: int
        :type upper: int
        :rtype: List[str]
        """
        nums.append(upper + 1)
        prev = lower - 1
        res = []
        for num in nums:
            if num - prev == 2:
                res.append(str(prev + 1))
            elif num - prev > 2:
                res.append(str(prev + 1) + "->" + str(num - 1))
            prev = num
        return res
        
        
C++ Version:
class Solution {
public:
    vector<string> findMissingRanges(vector<int>& nums, int lower, int upper) { # Need to consider the case when upper+ 1 overflow
                                                                                # or lower - 1 underflow       
        long prev = (long) lower - 1;
        vector<string> res {};
        for (int i = 0; i <= nums.size(); ++i) {
            long curr = i == nums.size() ? (long) upper + 1 : (long) nums[i];
            if (curr - prev == 2) {
                res.push_back(to_string(prev + 1));
            } else if (curr - prev > 2) {
                string curr_string = to_string(prev + 1) + "->" + to_string(curr - 1);
                res.push_back(curr_string);
            }
            prev = curr;
        }
        return res;
    }
};
