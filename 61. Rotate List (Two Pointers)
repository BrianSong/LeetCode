Given a linked list, rotate the list to the right by k places, where k is non-negative.

Example 1:

Input: 1->2->3->4->5->NULL, k = 2
Output: 4->5->1->2->3->NULL
Explanation:
rotate 1 steps to the right: 5->1->2->3->4->NULL
rotate 2 steps to the right: 4->5->1->2->3->NULL
Example 2:

Input: 0->1->2->NULL, k = 4
Output: 2->0->1->NULL
Explanation:
rotate 1 steps to the right: 2->0->1->NULL
rotate 2 steps to the right: 1->2->0->NULL
rotate 3 steps to the right: 0->1->2->NULL
rotate 4 steps to the right: 2->0->1->NULL


Solution: ---------------------------------------- Two Pointers ------------------------- https://www.youtube.com/watch?v=E99Wmfb1Hwc
# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution(object):
    def rotateRight(self, head, k):
        """
        :type head: ListNode
        :type k: int
        :rtype: ListNode
        """
        if not head or k < 0:
            return None
        slow, fast, length = head, head, 0
        while fast:
            length += 1
            fast = fast.next
        k, fast = k % length, head               # Find out the length of the linked list and update k
        while k > 0:                             # Create a certain length of linked list by moving fast pointer and remain slow pointer
            fast = fast.next
            k -= 1
        while fast.next:                         # Move this certain length of linked list to the right               
            slow = slow.next
            fast = fast.next
        fast.next = head
        head = slow.next
        slow.next = None
        return head
