Given a binary tree, imagine yourself standing on the right side of it, 
return the values of the nodes you can see ordered from top to bottom.

Example:

Input: [1,2,3,null,5,null,4]
Output: [1, 3, 4]
Explanation:

   1            <---
 /   \
2     3         <---
 \     \
  5     4       <---
  
  
Solution no.1: ------------------------------ DFS -------------------------- https://www.youtube.com/watch?v=f72I2qz9K7k
--------------------------------------------- O(n) T, O(n) S
# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution(object):
    def rightSideView(self, root):
        if root is None:
            return []
        res = []
        self.dfs_help(root, 0, res)
        return res
        
        """
        :type root: TreeNode
        :rtype: List[int]
        """
    def dfs_help(self, root, currlevel, res):          
        if root:
            if currlevel == len(res):                       # Record a level: Each time we reach a new level, we add the 
                res.append(root.val)                        # current visiting node into our solution
            self.dfs_help(root.right, currlevel + 1, res)   # DFS visiting order: self -> right -> left
            self.dfs_help(root.left, currlevel + 1, res)    # Since the question is "Right Side View"
                                                            # If "Left Side View", then self -> left -> right

Solution no.2: ---------------------------- BFS -------------------------------- https://www.youtube.com/watch?v=f72I2qz9K7k
------------------------------------------- O(n) T, O(n) S
# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution(object):
    def rightSideView(self, root):
        """
        :type root: TreeNode
        :rtype: List[int]
        """
        if not root:
            return None
        queue, res = [root], []
        while queue:
            size = len(queue)
            for i in range(len(queue)):
                pop_element = queue.pop(0)
                if i == size - 1:                         # Must be "if i == size - 1" instead of "if i == len(queue) - 1"
                                                          # because here the len(queue) is not the len(queue) inside line 71
                                                          # here, since we pop(0) the element beforehead, the len(queue) has changed
                    res.append(pop_element.val)
                if pop_element.left:
                    queue.append(pop_element.left)
                if pop_element.right:
                    queue.append(pop_element.right)
        return res
