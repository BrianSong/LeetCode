Given a string, find the length of the longest substring without repeating characters.

Example 1:

Input: "abcabcbb"
Output: 3 
Explanation: The answer is "abc", with the length of 3. 
Example 2:

Input: "bbbbb"
Output: 1
Explanation: The answer is "b", with the length of 1.
Example 3:

Input: "pwwkew"
Output: 3
Explanation: The answer is "wke", with the length of 3. 
             Note that the answer must be a substring, "pwke" is a subsequence and not a substring.
             
Solution: ------------------------------------------------- HashTable
----------------------------------------------------------- O(n) T, O(n) S
class Solution(object):
    def lengthOfLongestSubstring(self, s):
        """
        :type s: str
        :rtype: int
        """
        if not s:
            return 0
        HashTable, start, res = {}, 0, 0                       # Instead of thinking about how we can delete all the element that
                                                               # appeared before the duplicate element, which is very time consuming
                                                               # we can create a start pointer to indicate that !!!!!!!!
        for i in range(len(s)):
            if not s[i] in HashTable:
                HashTable[s[i]] = i
                res = max(res, i - start + 1)
            else:
                start = max(start, HashTable[s[i]] + 1)        # We can only take the max() here !!!!!!!!!!!!!!!!!!!!!!
                                                               # start can only increase !! else, for example: "abba"
                                                               # for the last "a", if we do not take max(), start will decrease
                                                               # from 2 to 1, which bring the result to 3 - 1 + 1 = 3 !!!!!!!!!
                HashTable[s[i]] = i
                res = max(res, i - start + 1)                  # Update the res no matter under what condition
        return res
