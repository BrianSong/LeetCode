Given a string, find the length of the longest substring without repeating characters.

Example 1:

Input: "abcabcbb"
Output: 3 
Explanation: The answer is "abc", with the length of 3. 
Example 2:

Input: "bbbbb"
Output: 1
Explanation: The answer is "b", with the length of 1.
Example 3:

Input: "pwwkew"
Output: 3
Explanation: The answer is "wke", with the length of 3. 
             Note that the answer must be a substring, "pwke" is a subsequence and not a substring.
             
Solution: ------------------------------------------------- HashTable
class Solution(object):
    def lengthOfLongestSubstring(self, s):
        """
        :type s: str
        :rtype: int
        """
        currlist, maxlength, start = {}, 0, 0
        for i in range(len(s)):
            if s[i] in currlist and start <= currlist[s[i]]:  # Must add start <= currlist[s[i]] since if start > currlist[s[i]],
                                                              # even s[i] is existed in currlist, it does not matter
                                                              # We only account the elements behind the start pointer
                start = currlist[s[i]] + 1
            else:
                maxlength = max(maxlength, i - start + 1)
            currlist[s[i]] = i
        return maxlength
