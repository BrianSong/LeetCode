Given an array of integers with possible duplicates, randomly output the index of a given target number. 
You can assume that the given target number must exist in the array.

Note:
The array size can be very large. Solution that uses too much extra space will not pass the judge.

Example:

int[] nums = new int[] {1,2,3,3,3};
Solution solution = new Solution(nums);

// pick(3) should return either index 2, 3, or 4 randomly. Each index should have equal probability of returning.
solution.pick(3);

// pick(1) should return 0. Since in the array only nums[0] is equal to 1.
solution.pick(1);


Solution no.1: --------------------------------------------- HashTable
-------------------------------------------------- O(n) T for both __init__() and pick(), O(n) S
class Solution(object):

    def __init__(self, nums):
        """
        :type nums: List[int]
        """
        self.HashTable = collections.defaultdict(list)
        for i, num in enumerate(nums):
            self.HashTable[num].append(i)
            

    def pick(self, target):
        """
        :type target: int
        :rtype: int
        """
        return random.choice(self.HashTable[target])
        


# Your Solution object will be instantiated and called as such:
# obj = Solution(nums)
# param_1 = obj.pick(target)


Solution no.2: -------------------------------------------- Reservoir Sampling
----------------------------------------------------------- O(1) T for __init__(), O(n) T pick() and O(1) S
class Solution(object):

    def __init__(self, nums):
        """
        :type nums: List[int]
        """
        self.nums = nums

    def pick(self, target):
        """
        :type target: int
        :rtype: int
        """                                                        
        res, count = 0, 0                                # count here is used to count how many target number in nums
        for i, num in enumerate(self.nums):              # random.randint(a, b) => return a random integer N such that a <= N <= b.
            if num == target:                            # if the num == target, the count will increase by 1
                count += 1
                currchance = random.randint(1, count)    # After that, picking a random number between 1 and count
                if currchance == count:                  # If the picking up number is equal to count, then, update res
                                                         # Why? Say we now we have nums=[1,5,5,6,5,7,9,0] and the target is 5
                                                         # Now let's focus on the loop. When i=1, we get the first target number, 
                                                         # and currchance can only be 1 == count, 
                                                         # so the probability of making result = 1 is 1 at this state
                                                         # Keep going. In the loop where i = 2, we get the second number. 
                                                         # So what should we do if we want to keep result = 1? 
                                                         # It's simple: we have to make sure that, at this time, the random number 
                                                         # generated should be 1 rather than 2 
                                                         # (otherwise the value of result will be changed), 
                                                         # so the probability of keeping result = 1 is 1 * 1/2.
                                                         # It is similar when we get the third target number, i.e., i = 4. 
                                                         # Now currchance may be 1, 2, and 3. 
                                                         # If we still wish to keep result = 1, the only way is to randomly 
                                                         # get number 1 or 2 rather than 3, and the probability is 2/3. 
                                                         # So the total probability of keeping result = 1 will be 1 * 1/2 * 2/3 = 1/3
                                                         # As for picking up the middle index 2,
                                                         # the total probability will also be 1/2 * 2/3 = 1/3.
                                                         # You may ask what is the probability of picking the last possible index 4? 
                                                         # Well, it simpler. 
                                                         # You may ignore all operations before the loop where i = 4, 
                                                         # and the only thing you have to do is to get the random number 3 
                                                         # among {1,2,3} in the loop where i = 4, so the probability is exactly 1/3.
                    res = i
        


# Your Solution object will be instantiated and called as such:
# obj = Solution(nums)
# param_1 = obj.pick(target)



Java Version:
class Solution {
    int[] nums;
    Random rand;
    public Solution(int[] nums) {
        this.nums = nums;
        rand = new Random();
    }
    
    public int pick(int target) {
        int res = 0, count = 0;
        for (int i = 0; i < nums.length; i ++) {
            int num = nums[i];
            if (num == target) {
                count ++;
                int currGuess = rand.nextInt(count) + 1;
                if (currGuess == count) {
                    res = i;
                }
            }
        }
        return res;
    }
}

/**
 * Your Solution object will be instantiated and called as such:
 * Solution obj = new Solution(nums);
 * int param_1 = obj.pick(target);
 */
