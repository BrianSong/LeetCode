Evaluate the value of an arithmetic expression in Reverse Polish Notation.

Valid operators are +, -, *, /. Each operand may be an integer or another expression.

Note:

Division between two integers should truncate toward zero.
The given RPN expression is always valid. That means the expression would always evaluate to a result and 
there won't be any divide by zero operation.
Example 1:

Input: ["2", "1", "+", "3", "*"]
Output: 9
Explanation: ((2 + 1) * 3) = 9
Example 2:

Input: ["4", "13", "5", "/", "+"]
Output: 6
Explanation: (4 + (13 / 5)) = 6
Example 3:

Input: ["10", "6", "9", "3", "+", "-11", "*", "/", "*", "17", "+", "5", "+"]
Output: 22
Explanation: 
  ((10 * (6 / ((9 + 3) * -11))) + 17) + 5
= ((10 * (6 / (12 * -11))) + 17) + 5
= ((10 * (6 / -132)) + 17) + 5
= ((10 * 0) + 17) + 5
= (0 + 17) + 5
= 17 + 5
= 22

Solution: ----------------------------- Stack + lstrip("-")  -------------------------- https://www.youtube.com/watch?v=SAb1kWV7_PY
-------------------------------------------- O(n) T, O(n) S

class Solution(object):
    def evalRPN(self, tokens):
        """
        :type tokens: List[str]
        :rtype: int
        """
        if not tokens:
            return 0
        stack = []
        for token in tokens:
            if token.lstrip('-').isdigit():                      # isdigit() cannot recognize negetive number like -11
                                                                 # so we add lstrip("-") function to remove any "-"
                stack.append(int(token))
            elif token == '+':
                item1 = stack.pop()
                item2 = stack.pop()
                curr = item1 + item2
                stack.append(curr)
            elif token == '-':                                   # "-" and "/" is a little different, what comes after must be on top
                item1 = stack.pop()
                item2 = stack.pop()
                curr = item2 - item1
                stack.append(curr)
            elif token == '*':
                item1 = stack.pop()
                item2 = stack.pop()
                curr = item1 * item2
                stack.append(curr)
            elif token == '/':
                item1 = stack.pop()
                item2 = stack.pop()
                curr = int(float(item2) / item1)                # Due to python divide characteristic, use int(float(A) / B)
                                                                # instead of direct "item2 / item1"
                                                                # For example: 6 / -132 = -1 while int(float(6) / -132) = 0
                                                                # / 整除 is OK for 6 / 132 = 0
                stack.append(curr)
        return stack[0]
