Given a string s and a non-empty string p, find all the start indices of p's anagrams in s.

Strings consists of lowercase English letters only and the length of both strings s and p will not be larger than 20,100.

The order of output does not matter.

Example 1:

Input:
s: "cbaebabacd" p: "abc"

Output:
[0, 6]

Explanation:
The substring with start index = 0 is "cba", which is an anagram of "abc".
The substring with start index = 6 is "bac", which is an anagram of "abc".
Example 2:

Input:
s: "abab" p: "ab"

Output:
[0, 1, 2]

Explanation:
The substring with start index = 0 is "ab", which is an anagram of "ab".
The substring with start index = 1 is "ba", which is an anagram of "ab".
The substring with start index = 2 is "ab", which is an anagram of "ab".


Solution no.1: my own -------------------------------- TLE ERROR
class Solution(object):
    def findAnagrams(self, s, p):
        """
        :type s: str
        :type p: str
        :rtype: List[int]
        """
        res = []
        for i in range(len(s) - (len(p) - 1)):
            if sorted(s[i:i + len(p)]) == sorted(p):
                res.append(i)
        return res
        
        
Solution no.2: ---------------------------------------- Sliding Window Solution using Counter
class Solution(object):
    def findAnagrams(self, s, p):
        """
        :type s: str
        :type p: str
        :rtype: List[int]
        """
        res = []
        scounter, pcounter = collections.Counter(s[:(len(p) - 1)]), collections.Counter(p)
        for i in range(len(p) - 1, len(s)):                         # Maintain a window of len(p) in s, and slide to right until finish
            scounter[s[i]] += 1                                     # include a new char in the window
            if scounter == pcounter:                                # This step is O(1), since there are at most 26 English letters 
                res.append(i - len(p) + 1)
            scounter[s[i - len(p) + 1]] -= 1                        # decrease the count of oldest char in the window
            if scounter[s[i - len(p) + 1]] == 0:                    # remove the count if it is 0 using "del"
                del scounter[s[i - len(p) + 1]]
        return res
