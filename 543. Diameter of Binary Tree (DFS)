Given a binary tree, you need to compute the length of the diameter of the tree. 
The diameter of a binary tree is the length of the longest path between any two nodes in a tree. 
This path may or may not pass through the root.

Example:
Given a binary tree 
          1
         / \
        2   3
       / \     
      4   5    
Return 3, which is the length of the path [4,2,1,3] or [5,2,1,3].

Note: The length of path between two nodes is represented by the number of edges between them.


Solution: --------------------------------------------------------- DFS 
# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution(object):
    def diameterOfBinaryTree(self, root):
        """
        :type root: TreeNode
        :rtype: int
        """
        self.res = 0
        self.dfs(root)
        return self.res
    
    def dfs(self, root):
        if not root:
            return 0
        left_nodes = self.dfs(root.left)                           # Here, what we get is the maximum single connected （一条线连着的）
                                                                   # node number in the leftsub tree
        right_nodes = self.dfs(root.right)
        self.res = max(self.res, left_nodes + right_nodes)         # Why max(self.res, left_nodes + right_nodes) but with '+1' ???
                                                                   # Because as 4    , where left_nodes = 3, left_nodes = 1
                                                                               / \   , the maximum path is 1-5-3-4-1
                                                                              3   1  , the length here is calculated as 4 not 5
                                                                             / \
                                                                            2   5
                                                                               /
                                                                              1
        return max(left_nodes, right_nodes) + 1                    # Why here we '+1', since the totally node increases by 1
                                                                   # due to the exist of the current root node
