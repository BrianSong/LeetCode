A message containing letters from A-Z is being encoded to numbers using the following mapping:

'A' -> 1
'B' -> 2
...
'Z' -> 26
Given a non-empty string containing only digits, determine the total number of ways to decode it.

Example 1:

Input: "12"
Output: 2
Explanation: It could be decoded as "AB" (1 2) or "L" (12).
Example 2:

Input: "226"
Output: 3
Explanation: It could be decoded as "BZ" (2 26), "VF" (22 6), or "BBF" (2 2 6).


Solution: --------------- Dynamic Programming + O(1) spcae -------------- https://www.youtube.com/watch?v=hFuj6GaaGpY
class Solution(object):
    def numDecodings(self, s):
        """
        :type s: str
        :rtype: int
        """
        if not s or s[0] == '0':
            return 0
        curr, prev = 1, 1                                                # curr, prev = dp[i - 1], dp[i - 2]
        for i in range(1, len(s)):
            temp = curr
            if s[i] == '0':
                if int(s[i - 1]) >= 3 or int(s[i - 1]) <= 0:
                    return 0
                curr = prev
            else:
                if s[i - 1] != '0' and int(s[i - 1] + s[i]) <= 26:
                    curr += prev
                else:
                    curr = curr
            prev = temp
        return curr
