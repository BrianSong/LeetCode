Count the number of prime numbers less than a non-negative number, n.

Example:

Input: 10
Output: 4
Explanation: There are 4 prime numbers less than 10, they are 2, 3, 5, 7.


Solution no.1 : ---------------------- Math ---------------------------- Time Limit Exceeded
--------------------------------------- O(n^1.5) T, O(1) S
class Solution(object):
    def countPrimes(self, n):
        """
        :type n: int
        :rtype: int
        """
        res = 0
        for i in range(2, n):
            if self.TestIfPrime(i):
                res += 1
        return res
            
    def TestIfPrime(self, num):
        if num == 2:
            return True
        if num % 2 == 0:
            return False
        for i in range(3, int(num ** 0.5) + 1, 2):  # How to optimize finding prime number? 
                                                    # n => n / 2 => n ** 0.5
                                                    # https://www.youtube.com/watch?time_continue=49&v=2p3kwF04xcA
            if num % i == 0:
                return False
        return True
        
        
Solution no.2: ------------------------------------ Dynamic Programming
--------------------------------------- O(n) T, O(n) S
class Solution(object):
    def countPrimes(self, n):
        """
        :type n: int
        :rtype: int
        """
        if n <= 2:                                  # Edge cases analyse:
                                                    # As long as n is 0 or 1, there is no prime number at all, just return 0
            return 0
        res = [True] * n                      
        res[0] = res[1] = False
        for i in range(2, n):
            if res[i] == True:                      # A little optimization, we can still pass the question without this line but slower
                                                    # Why ? Because every non-prime number must have a prime factor !!!!!!!!!!!!!!!!!
                for j in range(2, (n - 1) / i + 1): # i * j <= n - 1 => j <= (n - 1) / j => j in range(2, (n - 1) / j + 1)
                    res[i * j] = False
        return sum(res)
