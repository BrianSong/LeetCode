Given an array nums of n integers, are there elements a, b, c in nums such that a + b + c = 0? 
Find all unique triplets in the array which gives the sum of zero.

Note:

The solution set must not contain duplicate triplets.

Example:

Given array nums = [-1, 0, 1, 2, -1, -4],

A solution set is:
[
  [-1, 0, 1],
  [-1, -1, 2]
]

Solution:
class Solution(object):
    def threeSum(self, nums):
        nums.sort()
        res, currlist = [], []
        for i in range(len(nums) - 2):                       # we let i in range(len(nums) - 2), we do not need to worry 
                                                             # out of index and len(nums) == 0 or 1 or 2 problem
            if i > 0 and nums[i] == nums[i - 1]:             # i > 0 !!!!!!!!!!!!!!!!!!!!!!!!!!!!!! and nums[i] == nums[i - 1]      
                                                             # Make sure the base pointer will not repeat and create duplicate triplets
                continue                                     # "continue" means finish the current loop immediately and 
                                                             # jump into the next one
            left, right, currsum = i + 1, len(nums) - 1, 0
            while(left < right):
                currsum = nums[i] + nums[left] + nums[right]
                currlist = [nums[i], nums[left], nums[right]]              # Since "currlist =" insteand of "currlist.append"
                                                                           # we do not need to currlist.pop() later
                if currsum == 0:
                    res.append(currlist[:])
                    while left < right and nums[left] == nums[left + 1]:   # IMPORTANT!!!!!!!!!!!!!!
                                                                           # MUST BE left < right and nums[left] == nums[left + 1]
                                                                           # INSTEAD OF nums[left] == nums[left + 1] and left < right!!
                                                                           # because the computer will run nums[left + 1] in this,
                                                                           # and return ERROR!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
                                                                           # Make sure the left pointer will not repeat
                                                                           # and create duplicate triplets
                        left += 1
                    while left < right and nums[right] == nums[right - 1]: # Make sure the right pointer will not repeat
                                                                           # and create duplicate triplets
                        right -= 1
                    left += 1                                              # Remember to  move left pointer and right pointer 
                    right -= 1                                             # expecially after appending the res list
                elif currsum > 0:                                          # If currsum != 0, we do not need to worry duplicate problem
                                                                           # because it will not be append to res anyway
                    right -= 1
                else:
                    left += 1
        return res
        """
        :type nums: List[int]
        :rtype: List[List[int]]
        """
        
'''
The correct way to remove left and right duplicate is to do:
while left < right:
      if nums[left] + nums[right] == currsum:
          res.append([nums[i], nums[left], nums[right]])
          while left < right and nums[left] == nums[left + 1]:
              left += 1
          while left < right and nums[right] == nums[right - 1]:
              right -= 1
          left += 1
          right -= 1
      elif nums[left] + nums[right] > currsum:
          right -= 1
      else:
          left += 1
Instead of:
while left < right:
      while left < right and nums[left] == nums[left + 1]:      # We cannot do the left, right duplicate remove here
          left += 1                                             # Because in this way, for example [0, 0, 0, 1]
      while left < right and nums[right] == nums[right - 1]:    # the [0, 0, 0] solution will be automatically removed 
          right -= 1                                            # We can only remove left and right duplicate after we find one solution
      if nums[left] + nums[right] == currsum:                   # and try to find the next one (afraid nums[left] and nums[left + 1]
                                                                # is the same and create duplicate triplets now)
          res.append([nums[i], nums[left], nums[right]])
          left += 1
          right -= 1
      elif nums[left] + nums[right] > currsum:
          right -= 1
      else:
          left += 1
'''
