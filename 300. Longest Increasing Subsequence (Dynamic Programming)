Given an unsorted array of integers, find the length of longest increasing subsequence.

Example:

Input: [10,9,2,5,3,7,101,18]
Output: 4 
Explanation: The longest increasing subsequence is [2,3,7,101], therefore the length is 4. 
Note:

There may be more than one LIS combination, it is only necessary for you to return the length.
Your algorithm should run in O(n2) complexity.

Solution: ------------------------------------------------------- https://www.youtube.com/watch?v=fV-TF4OvZpk
'''
The MOST important part in dynamic programming is 
how to come up with one proper dp[] that can link the past half with current situation.
Here, I first used dp[] to represent the maximum LIS start from this point, and cannot work
So, I used dp[i] to represent the maximum LIS of the list end i
For example:
[10,9,2,5,3,7,101,18]
dp[0] = LIS of [10]
dp[1] = LIS OF [10,9]
dp[2] = LIS OF [10,9,2]
dp[3] = LIS OF [10,9,2,5]
...
If we find the dp[] properly, the transformation function is very clear,
if nums[j] > nums[i]:
    dp[j] = max(dp[j], dp[i] + 1)
BTW, the time complexity for DP is usually O(n^2)
'''
class Solution(object):
    def lengthOfLIS(self, nums):
        if nums is None or len(nums) == 0:
            return 0
        dp = [1] * len(nums)
        for j in range(1, len(nums)):                # Use two pointer, j and i. j is what we are current viewing, 
                                                     # i is used to view elements before
            for i in range(j):
                if nums[j] > nums[i]:
                    dp[j] = max(dp[j], dp[i] + 1)
        return max(dp)                               # max() can also be used to find the maximum element in a list
        """
        :type nums: List[int]
        :rtype: int
        """
