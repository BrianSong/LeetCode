Implement a basic calculator to evaluate a simple expression string.

The expression string contains only non-negative integers, +, -, *, / operators and empty spaces. 
The integer division should truncate toward zero.

Example 1:

Input: "3+2*2"
Output: 7
Example 2:

Input: " 3/2 "
Output: 1
Example 3:

Input: " 3+5 / 2 "
Output: 5
Note:

You may assume that the given expression is always valid.
Do not use the eval built-in library function.

Solution: ----------------------------------------------------------------- Stack
----------------------------------------------------------------- O(n) T, O(n) S 
class Solution(object):
    def calculate(self, s):
        """
        :type s: str
        :rtype: int
        """
        s += '+'                                            # add '+' to s is for help checking the last piece of s string
                                                            # and append it into stack
        stack, num, preOp = [], 0, '+'                      # preOp is the previous operator here
        for i in range(len(s)):
            if s[i].isdigit():                              # isdigit() function checks if the string is all digit
                num = num * 10 + int(s[i])
            elif not s[i].isspace():                        # isspace() function checks if the string is space or not
                if preOp == '+':                            # preOp should be checked here instead of s[i]
                                                            # What we doing here is that, everytime, s[i] = {'+', '-', '*', '/'}
                                                            # we 结算(check) the previous part using num and preOp
                                                            # if preOp == '+' or '-', then no hurry, we just append num into the stack
                                                            # if preOp == '*' or '/' which have higher priority,
                                                            # we must calculate it right now and append the result to stack
                    stack.append(num)
                elif preOp == '-':
                    stack.append(-num)
                elif preOp == '*':
                    stack.append(stack.pop() * num)
                elif preOp == '/':
                    stack.append(int(stack.pop() / float(num)))     # int(stack.pop() / float(num)) is because python 2's division setin
                preOp, num = s[i], 0                        # Now, we update preOp to s[i]
        return sum(stack)
