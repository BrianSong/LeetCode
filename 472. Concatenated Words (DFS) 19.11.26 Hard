Given a list of words (without duplicates), please write a program that returns all concatenated words in the given list of words.
A concatenated word is defined as a string that is comprised entirely of at least two shorter words in the given array.

Example:
Input: ["cat","cats","catsdogcats","dog","dogcatsdog","hippopotamuses","rat","ratcatdogcat"]

Output: ["catsdogcats","dogcatsdog","ratcatdogcat"]

Explanation: "catsdogcats" can be concatenated by "cats", "dog" and "cats"; 
 "dogcatsdog" can be concatenated by "dog", "cats" and "dog"; 
"ratcatdogcat" can be concatenated by "rat", "cat", "dog" and "cat".
Note:
The number of elements of the given array will not exceed 10,000
The length sum of elements in the given array will not exceed 600,000.
All the input string will only include lower case letters.
The returned elements order does not matter.


Solution no.1: ------------------------------------ my own Brutal Force but TLE
class Solution(object):
    def findAllConcatenatedWordsInADict(self, words):
        """
        :type words: List[str]
        :rtype: List[str]
        """
        if not words:
            return None
        res = []
        for i, word in enumerate(words):
            if self.concate(word, words[:i] + words[i + 1:]):
                res.append(word)
        return res
    
    def concate(self, word, words):
        if not words:
            return False
        if not word:
            return True
        for sub_word in words:
            if sub_word in word and word.index(sub_word) == 0:
                if self.concate(word[len(sub_word):], words):
                    return True
        return False
        
Solution no.2: ------------------------------------- DFS but in a clever way
class Solution(object):
    def findAllConcatenatedWordsInADict(self, words):
        """
        :type words: List[str]
        :rtype: List[str]
        """
        d = set(words)                                        # We set words here to be a set because we want O(1) look up
        res = []
        for word in words:
            if self.dfs(word, d):
                res.append(word)
        return res
    
    def dfs(self, word, d):
        if not word or len(word) == 1:                        # As long as the passed in word cannot be divide into meaningful
                                                              # prefix and subfix, we can return False directly
            return False
        for i in range(1, len(word)):                         # by using "for i in range(1, len(word))" and word[:i] & word[i:]
                                                              # we can make sure prefix and subfix will not equal to word and they
                                                              # will all be meaningful word (their length will at least be 1)
            prefix = word[:i]
            subfix = word[i:]
            if prefix in d and subfix in d:                   # The reason why we let "d = set(word)"
                return True
            if prefix in d and self.dfs(subfix, d):
                return True
            if subfix in d and self.dfs(prefix, d):
                return True
        return False
        
  Solution no.3: ------------------------------------- Use a self.memo to optimize the time
  ---------------------------------------------------- O(N * L ^ 3) T and O(max(N, L)) S
  class Solution(object):
    def findAllConcatenatedWordsInADict(self, words):
        """
        :type words: List[str]
        :rtype: List[str]
        """
        d = set(words)
        res = []
        self.memo = {}
        for word in words:
            if self.dfs(word, d):
                res.append(word)
        return res
    
    def dfs(self, word, d):
        if not word or len(word) == 1:
            return False
        if word in self.memo:
            return self.memo[word]
        for i in range(1, len(word)):
            prefix = word[:i]
            subfix = word[i:]
            if prefix in d and subfix in d:
                self.memo[word] = True
                return True
            if prefix in d and self.dfs(subfix, d):
                self.memo[word] = True
                return True
            if subfix in d and self.dfs(prefix, d):
                self.memo[word] = True
                return True
        self.memo[word] = False
        return False
