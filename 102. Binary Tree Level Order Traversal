Given a binary tree, return the level order traversal of its nodes' values. (ie, from left to right, level by level).

For example:
Given binary tree [3,9,20,null,null,15,7],
    3
   / \
  9  20
    /  \
   15   7
return its level order traversal as:
[
  [3],
  [9,20],
  [15,7]
]

Solution:-------------------------------------------------- Queue & BFS ----- https://www.youtube.com/watch?v=B0n3gqPKKic
# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution(object):
    def levelOrder(self, root):
        if root is None:
            return[]
        queue = []
        res = []
        queue.append(root)
        while queue != []:
            currlist = []
            size = len(queue)
            for i in range(size):
                pop_element = queue.pop(0)
                currlist.append(pop_element.val)
                if not pop_element.left is None:
                    queue.append(pop_element.left)
                if not pop_element.right is None:
                    queue.append(pop_element.right)
            res.append(currlist)
        return res
        """
        :type root: TreeNode
        :rtype: List[List[int]]
        """
