Given a singly linked list, return a random node's value from the linked list. Each node must have the same probability of being chosen.

Follow up:
What if the linked list is extremely large and its length is unknown to you? Could you solve this efficiently without using extra space?

Example:

// Init a singly linked list [1,2,3].
ListNode head = new ListNode(1);
head.next = new ListNode(2);
head.next.next = new ListNode(3);
Solution solution = new Solution(head);

// getRandom() should return either 1, 2, or 3 randomly. Each element should have equal probability of returning.
solution.getRandom();


Solution no.1: -------------------------------------------- Come up with the linked list length first
# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution(object):

    def __init__(self, head):
        """
        @param head The linked list's head.
        Note that the head is guaranteed to be not null, so it contains at least one node.
        :type head: ListNode
        """
        self.length = 0
        self.dummynode = ListNode(0)
        self.dummynode.next = head
        while head:
            self.length += 1
            head = head.next
        

    def getRandom(self):
        """
        Returns a random node's value.
        :rtype: int
        """
        currnode = self.dummynode.next                       # Must refresh currnode every time for the next getRandom() call
                                                             # Inorder to do this, I introduce a dummynode
        pickidx = random.randint(1, self.length)
        n = 1
        while currnode:
            if n == pickidx:
                return currnode.val
            n += 1
            currnode = currnode.next                         # REMEMBER !!!!!!
                                                             # Must update the currnode at the end of every loop !!!
        


# Your Solution object will be instantiated and called as such:
# obj = Solution(head)
# param_1 = obj.getRandom()

Follow up:
What if the linked list is extremely large and its length is unknown to you? 
Could you solve this efficiently without using extra space?

Solution no.2: ------------------------------------------------ Reservoir Sampling (for more details, refers to 398é¢˜)
----------------------------------------------- O(1) T for __init__(), O(n) T for getRandom(), O(1) S
# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution(object):

    def __init__(self, head):
        """
        @param head The linked list's head.
        Note that the head is guaranteed to be not null, so it contains at least one node.
        :type head: ListNode
        """
        self.head = head
        

    def getRandom(self):
        """
        Returns a random node's value.
        :rtype: int
        """
        currnode = self.head
        count, res = 0, 0
        while currnode:
            count += 1
            if random.randint(1, count) == count:
                res = currnode.val
            currnode = currnode.next
        return res
        


# Your Solution object will be instantiated and called as such:
# obj = Solution(head)
# param_1 = obj.getRandom()
