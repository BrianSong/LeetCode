Implement pow(x, n), which calculates x raised to the power n (xn).

Example 1:

Input: 2.00000, 10
Output: 1024.00000
Example 2:

Input: 2.10000, 3
Output: 9.26100
Example 3:

Input: 2.00000, -2
Output: 0.25000
Explanation: 2-2 = 1/22 = 1/4 = 0.25
Note:

-100.0 < x < 100.0
n is a 32-bit signed integer, within the range [−231, 231 − 1]


Solution: --------------------------------------- Binary Search -------------------------- https://www.youtube.com/watch?v=yEQq3t3T_J0
class Solution(object):
    def myPow(self, x, n):
        """
        :type x: float
        :type n: int
        :rtype: float
        """
        if x == 1 or n == 0:
            return 1
        if n == 1:
            return x
        if n < 0:
            return 1 / (x * self.myPow(x, - (n + 1)))                # since for int: [-2^31, 2^31 - 1]
        res = 1
        while n > 1:                                                 # Until n == 1
            if n % 2 == 1:
                res *= x
                n -= 1
            x = x * x
            n /= 2
        return res * x
