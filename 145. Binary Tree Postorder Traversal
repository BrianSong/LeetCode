Given a binary tree, return the postorder traversal of its nodes' values.

Example:

Input: [1,null,2,3]
   1
    \
     2
    /
   3

Output: [3,2,1]
Follow up: Recursive solution is trivial, could you do it iteratively?

Solution:
class Solution(object):
    def postorderTraversal(self, root):
        res = []
        self.traver_help(res, root)
        return res
        """
        :type root: TreeNode
        :rtype: List[int]
        """
    def traver_help(self, res, root):
        if not root is None:
            self.traver_help(res, root.left)
            self.traver_help(res, root.right)
            res.append(root.val)

'''
Tomorrow is midterm,
So just refresh the resursion solution for DFS traversal,
the iterative solution will be followed up later on.
'''
