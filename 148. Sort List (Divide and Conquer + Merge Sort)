Sort a linked list in O(n log n) time using constant space complexity.

Example 1:

Input: 4->2->1->3
Output: 1->2->3->4
Example 2:

Input: -1->5->3->4->0
Output: -1->0->3->4->5

Solution: --------- O(nlogn) time but O(logn) space, maybe followed up in the future ------ https://www.youtube.com/watch?v=M1TwY0nsTZA
# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution(object):
    def sortList(self, head):
        """
        :type head: ListNode
        :rtype: ListNode
        """
        if not head or not head.next:
            return head
        slow, fast = head, head.next
        while fast and fast.next:                   
            fast = fast.next.next                                     # Find the middle node
            slow = slow.next
        nxt = slow.next
        slow.next = None
        return self.merge(self.sortList(head), self.sortList(nxt))    # Divide and Conquer + Merge Sort
    def merge(self, l1, l2):
        dummynode = ListNode(0)
        currnode = dummynode
        while l1 and l2:
            if l1.val > l2.val:
                l1, l2 = l2, l1                                       # Swap
            currnode.next = l1
            l1 = l1.next
            currnode = currnode.next
        if l1:                                                        # if l1 left
            currnode.next = l1
        if l2:                                                        # if l2 left
            currnode.next = l2
        return dummynode.next
