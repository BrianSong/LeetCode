Given an array A of positive integers, call a (contiguous, not necessarily distinct) 
subarray of A good if the number of different integers in that subarray is exactly K.

(For example, [1,2,3,1,2] has 3 different integers: 1, 2, and 3.)

Return the number of good subarrays of A.

 

Example 1:

Input: A = [1,2,1,2,3], K = 2
Output: 7
Explanation: Subarrays formed with exactly 2 different integers: [1,2], [2,1], [1,2], [2,3], [1,2,1], [2,1,2], [1,2,1,2].
Example 2:

Input: A = [1,2,1,3,4], K = 3
Output: 3
Explanation: Subarrays formed with exactly 3 different integers: [1,2,1,3], [2,1,3], [1,3,4].
 

Note:

1 <= A.length <= 20000
1 <= A[i] <= A.length
1 <= K <= A.length


Solution: ------------------------------------------------ Sliding Window
---------------------------------------------------------- O(n) T and S
class Solution(object):
    def subarraysWithKDistinct(self, A, K):
        """
        :type A: List[int]
        :type K: int
        :rtype: int
        """
        return self.atMost(A, K) - self.atMost(A, K - 1)
    
    def atMost(self, A, K):
        start, res = 0, 0
        counter = collections.Counter()
        for j in range(len(A)):
            if counter[A[j]] == 0:
                K -= 1
            counter[A[j]] += 1
            while K < 0:
                counter[A[start]] -= 1                       # there is only one character at start, once we delete it, we must move
                                                             # the start pointer for looking for next character to delete
                if counter[A[start]] == 0:      
                    K += 1 
                start += 1
            res += j - start + 1                             # Why the length here is the number of increased subarray ????
                                                             # because everytime we introduce a valid character into the subarray,
                                                             # the increased number of subarray all end at this new valid character
                                                             # and there are (j - start + 1) kinds of new start
        return res



C++ Version:
class Solution {
public:
    int subarraysWithKDistinct(vector<int>& A, int K) {
        return at_most_K(A, K) - at_most_K(A, K - 1);
    }
    
    int at_most_K(vector<int>& s, int k) {
        if (s.size() <= 0 || k <= 0) {
            return 0;
        }
        int start {0};
        int count {0};
        unordered_map<int, int> counter {};
        for (int i = 0; i < s.size(); ++i) {
            if (counter.find(s[i]) == counter.end()) {
                counter[s[i]] = 1;
            } else {
                counter[s[i]] += 1;
            }
            if (counter[s[i]] == 1) {
                k -= 1;
            }
            while (k < 0) {
                counter[s[start]] -= 1;
                if (counter[s[start]] == 0) {
                    counter.erase(s[start]);
                    k += 1;
                }
                start += 1;
            }
            count += i - start + 1;
        }
        return count;
    }
};
