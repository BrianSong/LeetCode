A message containing letters from A-Z is being encoded to numbers using the following mapping:

'A' -> 1
'B' -> 2
...
'Z' -> 26
Given a non-empty string containing only digits, determine the total number of ways to decode it.

Example 1:

Input: "12"
Output: 2
Explanation: It could be decoded as "AB" (1 2) or "L" (12).
Example 2:

Input: "226"
Output: 3
Explanation: It could be decoded as "BZ" (2 26), "VF" (22 6), or "BBF" (2 2 6).


Solution: --------------- Dynamic Programming + O(1) spcae -------------- https://www.youtube.com/watch?v=hFuj6GaaGpY
class Solution(object):
    def numDecodings(self, s):
        """
        :type s: str
        :rtype: int
        """
        if not s or s[0] == '0':
            return 0
        curr, prev = 1, 1                                                # curr, prev = dp[i - 1], dp[i - 2]
        for i in range(1, len(s)):
            temp = curr
            if s[i] == '0':
                if int(s[i - 1]) >= 3 or int(s[i - 1]) <= 0:
                    return 0
                curr = prev
            else:
                if s[i - 1] != '0' and int(s[i - 1] + s[i]) <= 26:
                    curr += prev
                else:
                    curr = curr
            prev = temp
        return curr
        


class Solution(object): -------------------------------------------------------- O(n) T and S
    def numDecodings(self, s):
        """
        :type s: str
        :rtype: int
        """
        if not s or s[0] == '0':
            return 0
        dp = [0] * (len(s) + 1)
        dp[0] = dp[1] = 1
        for i in range(2, len(dp)):
            if 0 < int(s[i - 1]) <= 9:
                dp[i] += dp[i - 1]
            if 10 <= int(s[i - 2:i]) <= 26:
                dp[i] += dp[i - 2]
        return dp[-1]
        
Solution: ------------------------------------------------------ my own O(1) S DP
class Solution(object):
    def numDecodings(self, S):
        # Check the edge cases:
        if not S:
            return 0
        if len(S) == 1:
            if S[0] == '0':
                return 0
            else:
                return 1
        # DP
        # Step no.1
        dp_2, dp_1 = 1, 1
        # Step no.3
        for i in range(len(S)):
            curr_dp = 0
            if i != 0 and 10 <= int(S[i - 1] + S[i]) <= 26:
                curr_dp += dp_2
            if S[i] != '0':                                              # Here is "if" instead of "elif", the first two conditions
                curr_dp += dp_1                                          # can be satisfied simultaneously !!
            if (S[i] == '0' and int(S[i - 1]) >= 3) or int(S[i]) < 0:    # Remember to consider the invalid input here
                return 0
            dp_1, dp_2 = curr_dp, dp_1                                   # MUST update these two TOGETHER in one line !!!!!
                                                                         # Instead of: dp_1 = curr_dp
        return dp_1                                                      #             dp_2 = dp_1 (this dp_1 has already been updated)
