Suppose an array sorted in ascending order is rotated at some pivot unknown to you beforehand.

(i.e., [0,0,1,2,2,5,6] might become [2,5,6,0,0,1,2]).

You are given a target value to search. If found in the array return true, otherwise return false.

Example 1:

Input: nums = [2,5,6,0,0,1,2], target = 0
Output: true
Example 2:

Input: nums = [2,5,6,0,0,1,2], target = 3
Output: false
Follow up:

This is a follow up problem to Search in Rotated Sorted Array, where nums may contain duplicates.
Would this affect the run-time complexity? How and why?


Solution: -------------------------------------------------- Binary Search
class Solution(object):
    def search(self, nums, target):
        """
        :type nums: List[int]
        :type target: int
        :rtype: bool
        """
        if len(nums) == 0: return False
        left, right = 0, len(nums) - 1
        while left <= right:
            while left < right and nums[left] == nums[right]:
                left += 1
            '''
            这样的目的是为了能准确判断mid位置，所以算法的最坏时间复杂度为O(n)
            This is for the case like 1 3 1 1 1 where the nums[left] <= nums[right] however the left half is not continuous at all
            To remove useless duplicate in the rightest position to better grasp the position of mid pointer
            '''
            mid = (left + right) / 2
            if nums[mid] == target:
                return True
            if nums[left] <= nums[mid]:                         
                if nums[left] <= target <= nums[mid]:
                    
                    right = mid - 1
                else:
                    print left, right, mid
                    left = mid + 1
            else:                                               
                if nums[mid] <= target <= nums[right]:
                    
                    left = mid + 1
                else:
