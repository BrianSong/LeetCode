Given a singly linked list, determine if it is a palindrome.

Example 1:

Input: 1->2
Output: false
Example 2:

Input: 1->2->2->1
Output: true
Follow up:
Could you do it in O(n) time and O(1) space?


Solution no.1:  ------------------------------------- Stack + Two Pointers --------------- https://www.youtube.com/watch?v=teJIpKD1MuQ
----------------------------------------------------- O(n) T, O(n) S
# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution(object):
    def isPalindrome(self, head):
        slow = head
        fast = head
        stack = []
        while fast and fast.next:                 # Use fast = fast.next.next and slow = slow.next 
                                                  # to let slow pointer be the middle of linked list
            stack.append(slow)
            slow = slow.next
            fast = fast.next.next
        if fast:                                  # For the those odd length palindrome which has an center unique element
            slow = slow.next                      # We do not want to take it into account, so we skip it
        while slow:
            if not slow.val == stack.pop().val:
                return False
            slow = slow.next
        return True
            
        """
        :type head: ListNode
        :rtype: bool
        """
        
        
Solution no.2: -------------------------------------------------------- Operate on the nodes directly without using a stack
----------------------------------------------------- O(n) T, O(1) S
# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.next = None
class Solution(object):
    def isPalindrome(self, head):
        """
        :type head: ListNode
        :rtype: bool
        """
        if not head:
            return True
        slow, fast, prev = head, head, None
        while fast and fast.next:                    # find the mid node
            slow = slow.next
            fast = fast.next.next
        while slow:                                  # reverse the second half
            next = slow.next                         # In this way, we make sure that the second half is shorter than the first half
            slow.next = prev
            prev = slow
            slow = next
        while prev:                                  # compare the first and second half nodes
            if prev.val != head.val:
                return False
            prev = prev.next
            head = head.next
        return True


Java Version:
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
class Solution {
    public boolean isPalindrome(ListNode head) {
        if (head == null) {
            return true;
        }
        
        ListNode fast = head;
        ListNode slow = head;
        
        while (fast != null && fast.next != null) {
            fast = fast.next.next;
            slow = slow.next;
        }
        
        ListNode prev = null;
        
        while (slow != null) {
            ListNode next = slow.next;
            slow.next = prev;
            prev = slow;
            slow = next;
        }
        
        while (prev != null) {
            if (prev.val != head.val) {
                return false;
            }
            prev = prev.next;
            head = head.next;
        }
        
        return true;
        
    }
}
