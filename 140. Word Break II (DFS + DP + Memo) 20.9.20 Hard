Given a non-empty string s and a dictionary wordDict containing a list of non-empty words, 
add spaces in s to construct a sentence where each word is a valid dictionary word. Return all such possible sentences.

Note:

The same word in the dictionary may be reused multiple times in the segmentation.
You may assume the dictionary does not contain duplicate words.
Example 1:

Input:
s = "catsanddog"
wordDict = ["cat", "cats", "and", "sand", "dog"]
Output:
[
  "cats and dog",
  "cat sand dog"
]
Example 2:

Input:
s = "pineapplepenapple"
wordDict = ["apple", "pen", "applepen", "pine", "pineapple"]
Output:
[
  "pine apple pen apple",
  "pineapple pen apple",
  "pine applepen apple"
]
Explanation: Note that you are allowed to reuse a dictionary word.
Example 3:

Input:
s = "catsandog"
wordDict = ["cats", "dog", "sand", "and", "cat"]
Output:
[]


Solution no.1: ----------------------------------------------------- DFS + DP
-------------------------------------------------------------------- O(2^n) T for the worse case: input "aaaaaa",
-------------------------------------------------------------------- wordDict = ["a", "aa", "aaa", "aaaa", "aaaaa", "aaaaa"], 
-------------------------------------------------------------------- Every possible partition is a valid sentence
---------------------------------------- Space complexity will also be O(2^n) for the same reason - every partition is stored in memory.
class Solution(object):
    def wordBreak(self, s, wordDict):
        """
        :type s: str
        :type wordDict: List[str]
        :rtype: List[str]
        """
        if not wordDict:
            return None
        res, memo = [], {}
        wordSet = set(wordDict)                              # Why we turn the list into the HashSet ?
                                                             # Here is the summary for in:
                                                             # list - Average: O(n)
                                                             # set/dict - Average: O(1), Worst: O(n)
        self.backtracking(s, wordSet, "", res)
        return res
    
    def backtracking(self, s, wordSet, path, res):
        if self.check(s, wordSet):
            if not s:
                res.append(path[1:])
                return
            for word in wordSet:
                if word in s and s.index(word) == 0:
                    self.backtracking(s[len(word):], wordSet, path + " " + word, res)
                    
    def check(self, s, dic):                                # Before we do dfs, we check whether the remaining string 
                                                            # can be splitted by using the dictionary,
                                                            # in this way we can decrease unnecessary computation greatly
                                                            # and get rid of TLE error
        dp = [False] * (len(s) + 1)
        dp[0] = True
        for i in range(1, len(s) + 1):
            for j in range(i - 1, -1, -1):
                if s[j:i] in dic and dp[j]:
                    dp[i] = True
        return dp[-1]



Solution no.2: ----------------------------------------------------- DFS + Memo
-------------------------------------------------------------------- O(2^n) T for the worse case: input "aaaaaa",
-------------------------------------------------------------------- wordDict = ["a", "aa", "aaa", "aaaa", "aaaaa", "aaaaa"], 
-------------------------------------------------------------------- Every possible partition is a valid sentence and not store in memo
---------------------------------------- Space complexity will also be O(2^n) for the same reason - every partition is stored in memory.
class Solution(object):
    def wordBreak(self, s, wordDict):
        """
        :type s: str
        :type wordDict: List[str]
        :rtype: List[str]
        """
        if not wordDict:
            return None
        wordDict = set(wordDict)
        return self.dfs(s, set(wordDict), {})
    
    def dfs(self, s, wordDict, memo):
        if s in memo:                                    # memo here is to optimize the algorithm:
                                                         # if we solve this situation before, do not need to do it again
            return memo[s]
        currres = []
        for word in wordDict:
            if not s.startswith(word):
                continue
            if len(s) == len(word):
                currres = [word]                         # IMPORTANT !!!!!!!!!!!!!!!!!!!!!!!!
                                                         # DO NOT APPEND TO THE RES except these two cases !!!!!
                                                         # 1. len(s) == len(word) => we reach the end of the string
                                                         # 2. resOfRest returns something back (not None)
            else:
                resOfRest = self.dfs(s[len(word):], wordDict, memo)
                for item in resOfRest:
                    currres.append(word + " " + item)    # Also, when we append the item in the resOfRest,
                                                         # we cannot simply append the item, rememeber to add word as well !!!!!!!!
        memo[s] = currres
        return currres



My own: O(n^2) T and S
class Solution(object):
    def wordBreak(self, s, wordDict):
        """
        :type s: str
        :type wordDict: List[str]
        :rtype: List[str]
        """
        if not s or not wordDict:
            return []
        
        poss_length = self.find_poss_length(wordDict)
        wordDict = set(wordDict)
        res = []
        res_list = self.dfs(s, 0, poss_length, wordDict, {})
        for l in res_list:
            res.append(" ".join(l[::-1]))
            
        return res
    
    def dfs(self, s, index, poss_length, wordDict, memo):
        if index == len(s):
            return [[]]
        
        if index in memo:
            return memo[index]
        
        curr_res = []
        for l in poss_length:
            if index + l <= len(s) and s[index : index + l] in wordDict:
                prev_res = self.dfs(s, index + l, poss_length, wordDict, memo)
                for prev_list in prev_res:
                    prev = list(prev_list)
                    prev.append(s[index : index + l])
                    curr_res.append(prev)
        
        memo[index] = list(curr_res)
        return curr_res
        
    
    def find_poss_length(self, wordDict):
        poss_length = set()
        for w in wordDict:
            if not len(w) in poss_length:
                poss_length.add(len(w))
                
        return list(poss_length)
