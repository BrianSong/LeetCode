On a 2-dimensional grid, there are 4 types of squares:

1 represents the starting square.  There is exactly one starting square.
2 represents the ending square.  There is exactly one ending square.
0 represents empty squares we can walk over.
-1 represents obstacles that we cannot walk over.
Return the number of 4-directional walks from the starting square to the ending square, 
that walk over every non-obstacle square exactly once.

 

Example 1:

Input: [[1,0,0,0],[0,0,0,0],[0,0,2,-1]]
Output: 2
Explanation: We have the following two paths: 
1. (0,0),(0,1),(0,2),(0,3),(1,3),(1,2),(1,1),(1,0),(2,0),(2,1),(2,2)
2. (0,0),(1,0),(2,0),(2,1),(1,1),(0,1),(0,2),(0,3),(1,3),(1,2),(2,2)
Example 2:

Input: [[1,0,0,0],[0,0,0,0],[0,0,0,2]]
Output: 4
Explanation: We have the following four paths: 
1. (0,0),(0,1),(0,2),(0,3),(1,3),(1,2),(1,1),(1,0),(2,0),(2,1),(2,2),(2,3)
2. (0,0),(0,1),(1,1),(1,0),(2,0),(2,1),(2,2),(1,2),(0,2),(0,3),(1,3),(2,3)
3. (0,0),(1,0),(2,0),(2,1),(2,2),(1,2),(1,1),(0,1),(0,2),(0,3),(1,3),(2,3)
4. (0,0),(1,0),(2,0),(2,1),(1,1),(0,1),(0,2),(0,3),(1,3),(1,2),(2,2),(2,3)
Example 3:

Input: [[0,1],[2,0]]
Output: 0
Explanation: 
There is no path that walks over every empty square exactly once.
Note that the starting and ending square can be anywhere in the grid.
 

Note:

1 <= grid.length * grid[0].length <= 20


Solution: ----------------------------------------------- MY OWN BF DFS BUT ACCEPT
--------------------------------------------------------- O(4 ^ (m * n)) T and O(m * n) S
class Solution(object):
    def uniquePathsIII(self, grid):
        """
        :type grid: List[List[int]]
        :rtype: int
        """
        if not grid or not grid[0]:
            return 0
        count = 0
        for i in range(len(grid)):
            for j in range(len(grid[0])):
                if grid[i][j] == 0:
                    count += 1
                elif grid[i][j] == 1:
                    s_r, s_c = (i, j)
        visited = set()
        visited.add((s_r, s_c))
        self.res = 0
        self.dfs(grid, s_r, s_c, visited, 0, count)
        return self.res
    
    def dfs(self, grid, r, c, visited, curr_count, count):
        if curr_count == count + 1 and grid[r][c] == 2:                       # Remember to add 1 to the count !!!!
            self.res += 1
            return
        for dir in [[0, 1], [1, 0], [0, -1], [-1, 0]]:
            next_r = r + dir[0]
            next_c = c + dir[1]
            if 0 <= next_r < len(grid) and 0 <= next_c < len(grid[0]) and grid[next_r][next_c] != -1 
            / and not (next_r, next_c) in visited:
                visited.add((next_r, next_c))
                self.dfs(grid, next_r, next_c, visited, curr_count + 1, count)
                visited.remove((next_r, next_c))                              # visited.remove() takes O(1) T, so I prefer this way
                                                                              # compared to modify the original input to indicate visit
