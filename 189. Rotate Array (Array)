Given an array, rotate the array to the right by k steps, where k is non-negative.

Example 1:

Input: [1,2,3,4,5,6,7] and k = 3
Output: [5,6,7,1,2,3,4]
Explanation:
rotate 1 steps to the right: [7,1,2,3,4,5,6]
rotate 2 steps to the right: [6,7,1,2,3,4,5]
rotate 3 steps to the right: [5,6,7,1,2,3,4]
Example 2:

Input: [-1,-100,3,99] and k = 2
Output: [3,99,-1,-100]
Explanation: 
rotate 1 steps to the right: [99,-1,-100,3]
rotate 2 steps to the right: [3,99,-1,-100]
Note:

Try to come up as many solutions as you can, there are at least 3 different ways to solve this problem.
Could you do it in-place with O(1) extra space?


Solution no.1: ------------------------------------------- Using Extra Array
class Solution(object):
    def rotate(self, nums, k):
        """
        :type nums: List[int]
        :type k: int
        :rtype: None Do not return anything, modify nums in-place instead.
        """
        res = [0 for i in range(len(nums))]
        for i in range(len(nums)):
            res[(i + k) % len(nums)] = nums[i]
        for i in range(len(nums)):
            nums[i] = res[i]
            
            
Solution no.2: ----------------------------------------------- Using Reverse
'''
This approach is based on the fact that when we rotate the array k times, k elements from the back end of the array come to the front 
and the rest of the elements from the front shift backwards.

In this approach, we firstly reverse all the elements of the array. 
Then, reversing the first k elements followed by reversing the rest n-k elements gives us the required result.

Let n=7 and k=3.

Original List                   : 1 2 3 4 5 6 7
After reversing all numbers     : 7 6 5 4 3 2 1
After reversing first k numbers : 5 6 7 4 3 2 1
After revering last n-k numbers : 5 6 7 1 2 3 4 --> Result
'''
class Solution(object):
    def rotate(self, nums, k):
        """
        :type nums: List[int]
        :type k: int
        :rtype: None Do not return anything, modify nums in-place instead.
        """
        k %= len(nums)
        self.Reverse(nums, 0, len(nums) - 1)
        self.Reverse(nums, 0, k - 1)
        self.Reverse(nums, k, len(nums) - 1)
        
        
    def Reverse(self, nums, start, end):
        while start <= end:
            temp = nums[end]
            nums[end] = nums[start]
            nums[start] = temp
            start += 1
            end -= 1
