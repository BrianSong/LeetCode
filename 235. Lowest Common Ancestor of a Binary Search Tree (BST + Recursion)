Given a binary search tree (BST), find the lowest common ancestor (LCA) of two given nodes in the BST.

According to the definition of LCA on Wikipedia: 
“The lowest common ancestor is defined between two nodes p and q as the lowest node in T that has both p and q as descendants 
(where we allow a node to be a descendant of itself).”

Given binary search tree:  root = [6,2,8,0,4,7,9,null,null,3,5]


 

Example 1:

Input: root = [6,2,8,0,4,7,9,null,null,3,5], p = 2, q = 8
Output: 6
Explanation: The LCA of nodes 2 and 8 is 6.
Example 2:

Input: root = [6,2,8,0,4,7,9,null,null,3,5], p = 2, q = 4
Output: 2
Explanation: The LCA of nodes 2 and 4 is 2, since a node can be a descendant of itself according to the LCA definition.
 

Note:

All of the nodes' values will be unique.
p and q are different and both values will exist in the BST.

Solution: ------------------------------------------ BST + Recursion
-------------------------------------------- O(n) T, O(h) S when totally unbalanced, h=n. In general, h can be near log(n)
# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution(object): 
    def lowestCommonAncestor(self, root, p, q):
        parent_value = root.val                                 # We should utilize the property of BTS here
        '''
        1. Left subtree of a node N contains nodes whose values are lesser than or equal to node N's value.
        2. Right subtree of a node N contains nodes whose values are greater than node N's value.
        3. Both left and right subtrees are also BSTs.
        '''
        p_value = p.val
        q_value = q.val
        '''
        Start traversing the tree from the root node.
        If both the nodes p and q are in the right subtree, then continue the search with right subtree starting step 1.
        If both the nodes p and q are in the left subtree, then continue the search with left subtree starting step 1.
        If both step 2 and step 3 are not true, this means we have found the node which is common to node p's and q's subtrees. 
        and hence we return this common node as the LCA.
        '''
        if parent_value > p_value and parent_value > q_value:
            return self.lowestCommonAncestor(root.left, p, q)   # Remember to add "return" here!!!!!!!!!!!!!!!!!!!!!!!!!
        elif parent_value < p_value and parent_value < q_value:
            return self.lowestCommonAncestor(root.right, p, q)
        else:
            return root
        """
        :type root: TreeNode
        :type p: TreeNode
        :type q: TreeNode
        :rtype: TreeNode
        """
