Given two strings s and t, determine if they are isomorphic.

Two strings are isomorphic if the characters in s can be replaced to get t.

All occurrences of a character must be replaced with another character while preserving the order of characters. 
No two characters may map to the same character but a character may map to itself.

Example 1:

Input: s = "egg", t = "add"
Output: true
Example 2:

Input: s = "foo", t = "bar"
Output: false
Example 3:

Input: s = "paper", t = "title"
Output: true
Note:
You may assume both s and t have the same length.

Solution: ----------------------------------------------------- HashTable + Set
--------------------------------------------------------------- O(n) T, O(n) S
class Solution(object):
    def isIsomorphic(self, s, t):
        """
        :type s: str
        :type t: str
        :rtype: bool
        """
        if len(s) != len(t) or len(set(s)) != len(set(t)):  # for "if not s or not t", return False may be wrong: "" and "" => True
                                                            # use a set here to prevent from cases like: "ab" and "aa"
            return False
        HashTable = {}
        for i in range(len(s)):
            if s[i] in HashTable:
                if t[i] != HashTable[s[i]]:
                    return False
            else:
                HashTable[s[i]] = t[i]
        return True
