Given a string s and a set of n substrings. You are supposed to remove every instance of those n substrings from s 
so that s is of the minimum length and output this minimum length.

Example
Example 1:

Input:
"ccdaabcdbb"
["ab","cd"]
Output:
2
Explanation: 
ccdaabcdbb -> ccdacdbb -> cabb -> cb (length = 2)
Example 2:

Input:
"abcabd"
["ab","abcd"]
Output:
0
Explanation: 
abcabd -> abcd -> "" (length = 0)

/*
Use BFS to find all possible solutions.
*/
Solution:
class Solution {
public:
    /*
     * @param s: a string
     * @param dict: a set of n substrings
     * @return: the minimum length
     */
    int minLength(string &s, unordered_set<string> &dict) {
        // write your code here
        if (s.length() == 0) {
            return 0;
        }
        if (dict.size() == 0) {
            return s.length();
        }
        
        unordered_set<string> visited;
        queue<string> q;
        q.push(s);
        int min_length = INT_MAX;
        
        while (q.size() != 0) {
            string curr = q.front();
            q.pop();
            for (const auto& w : dict) {
                int pos = curr.find(w);
                while (pos != -1) {
                    if (curr == w) {
                        return 0;
                    }
                    string next = curr.substr(0, pos) + curr.substr(pos + w.size());
                    if (visited.find(next) == visited.end()) {                          # Expand the queue only if we do not see this one before.
                        min_length = min(min_length, (int)next.length());
                        q.push(next);
                        visited.insert(next);
                    }
                    pos = curr.find(w, pos + 1);                                        # Try all possible ways to remove one w from current s.
                                                                                        # This should be done no matter we have see next in visited or not.  
                }
            }
        }
        
        return min_length;
    }
};
