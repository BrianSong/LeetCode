Given a linked list, determine if it has a cycle in it.

To represent a cycle in the given linked list, 
we use an integer pos which represents the position (0-indexed) in the linked list where tail connects to. 
If pos is -1, then there is no cycle in the linked list.

 

Example 1:

Input: head = [3,2,0,-4], pos = 1
Output: true
Explanation: There is a cycle in the linked list, where tail connects to the second node.


Example 2:

Input: head = [1,2], pos = 0
Output: true
Explanation: There is a cycle in the linked list, where tail connects to the first node.


Example 3:

Input: head = [1], pos = -1
Output: false
Explanation: There is no cycle in the linked list.


 

Follow up:

Can you solve it using O(1) (i.e. constant) memory?

Solution no.1: -------------------------------------------------- Hashtable
# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution(object):
    def hasCycle(self, head):
        hashtable = {}
        while head and head.next:
            if head.next in hashtable:
                return True
            hashtable[head] = head.next
            head = head.next
        return False
        """
        :type head: ListNode
        :rtype: bool
        """
        
Solution no.2: ---------------------------------------- Two Pointers ----------------------- https://www.youtube.com/watch?v=9SD2ccDW5CY
# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution(object):
    def hasCycle(self, head):
        if head is None:
            return False
        slow, fast = head, head.next        # Create two pointers: fast and slow, as long as there is a cycle, 
                                            # these two pointers will meet each other
        while fast and fast.next:           # Must be while fast and fast.next instead of while fast:
                                            # Since below, we use fast = fast.next.next, Nonetype node has no next attribute
            if slow == fast:
                return True
            slow = slow.next
            fast = fast.next.next
        return False
        """
        :type head: ListNode
        :rtype: bool
        """
