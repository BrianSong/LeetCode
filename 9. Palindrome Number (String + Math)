Determine whether an integer is a palindrome. An integer is a palindrome when it reads the same backward as forward.

Example 1:

Input: 121
Output: true
Example 2:

Input: -121
Output: false
Explanation: From left to right, it reads -121. From right to left, it becomes 121-. Therefore it is not a palindrome.
Example 3:

Input: 10
Output: false
Explanation: Reads 01 from right to left. Therefore it is not a palindrome.
Follow up:

Coud you solve it without converting the integer to a string?

Solution no.1(my own):
class Solution(object):
    def isPalindrome(self, x):
        string  = str(x)
        left, right = 0, len(string) - 1
        while left <= right:
            if string[left] == string[right]:
                left += 1
                right -= 1
            else:
                return False
        return True
        """
        :type x: int
        :rtype: bool
        """
        
class Solution(object):
    def isPalindrome(self, x):
        if x < 0:
            return False
        return str(x) == str(x)[::-1]
        """
        :type x: int
        :rtype: bool
        """
        
Solution no.2: ------------------------------------ Follow up answer (without convert the number into a string)
class Solution(object):
    def isPalindrome(self, x):
        if x < 0:
            return False
        temp, res = x, 0
        while temp != 0:
            res = res * 10 + temp % 10
            temp /= 10
        return res == x
        """
        :type x: int
        :rtype: bool
        """
