Given a set of candidate numbers (candidates) (without duplicates) and a target number (target), 
find all unique combinations in candidates where the candidate numbers sums to target.

The same repeated number may be chosen from candidates unlimited number of times.

Note:

All numbers (including target) will be positive integers.
The solution set must not contain duplicate combinations.
Example 1:

Input: candidates = [2,3,6,7], target = 7,
A solution set is:
[
  [7],
  [2,2,3]
]
Example 2:

Input: candidates = [2,3,5], target = 8,
A solution set is:
[
  [2,2,2,2],
  [2,3,3],
  [3,5]
]

Solution: ------------------------------------------------------------ Backtracking
------------------------------------------------------------ O(len(candidate) ^ (target / min(candidate))) T, len(candidate) is
------------------------------------------------------------ the possible step we may take at each recursion, 
------------------------------------------------------------ and target / min(candidate) is the maximum recursion depth
------------------------------------------------------------ O(target / min(candidate)) S for the recursion depth
class Solution(object):
    def combinationSum(self, candidates, target):
        """
        :type candidates: List[int]
        :type target: int
        :rtype: List[List[int]]
        """
        if not candidates:
            return None
        res = []
        self.backtracking(candidates, target, [], 0, res)
        return res
        
    def backtracking(self, candidates, target, curr, idx, res):
        if target == 0:                                               # Better to move this two if statement outof the for loop,
                                                                      # because it has nothing to do with i or candidates
                                                                      # these two are the exiting conditions
                                                                      # the first thing inside a recursion function should be to check
                                                                      # the base cases - exiting conditions instead of doing a for loop
            res.append(curr[:])                                       # Use [:] 
            return
        if target < 0:
            return
        for i in range(idx, len(candidates)):                         # IMPORTANT !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
                                                                      # Instead of "for item in candidates", here we ultilize the idx,
                                                                      # WHY ?????????????????????????????????
                                                                      # Because in this question, although the same repeated number may 
                                                                      # be chosen from candidates unlimited number of times, 
                                                                      # We cannot choose the element from beginning every time,
                                                                      # if we do that, we will come up with many same curr,
                                                                      # like [[2,2,3],[2,3,2],[3,2,2],[7]] that we do not want 
            self.backtracking(candidates, target - candidates[i], curr + [candidates[i]], i, res)
            
        '''
        for i, candidate in enumerate(candidates):
            self.backtracking(candidates[i:], target - candidate, path + [candidate], res)
        '''
