Given an m x n matrix of non-negative integers representing the height of each unit cell in a continent, 
the "Pacific ocean" touches the left and top edges of the matrix and the "Atlantic ocean" touches the right and bottom edges.

Water can only flow in four directions (up, down, left, or right) from a cell to another one with height equal or lower.

Find the list of grid coordinates where water can flow to both the Pacific and Atlantic ocean.

Note:

The order of returned grid coordinates does not matter.
Both m and n are less than 150.
 

Example:

Given the following 5x5 matrix:

  Pacific ~   ~   ~   ~   ~ 
       ~  1   2   2   3  (5) *
       ~  3   2   3  (4) (4) *
       ~  2   4  (5)  3   1  *
       ~ (6) (7)  1   4   5  *
       ~ (5)  1   1   2   4  *
          *   *   *   *   * Atlantic

Return:

[[0, 4], [1, 3], [1, 4], [2, 2], [3, 0], [3, 1], [4, 0]] (positions with parentheses in above matrix).


Solution: -------------------------------------------------------------------------------- DFS
class Solution(object):
    def pacificAtlantic(self, matrix):
        """
        :type matrix: List[List[int]]
        :rtype: List[List[int]]
        """
        if not matrix or len(matrix) == 0 or len(matrix[0]) == 0:
            return None
        res = []
        self.directions = [[1, 0], [-1, 0], [0, 1], [0, -1]]
        pacific, atlantic = [[False for j in range(len(matrix[0]))] for i in range(len(matrix))],   # Create two visited boolean matrixs
                            [[False for j in range(len(matrix[0]))] for i in range(len(matrix))]
        for i in range(len(matrix)):
            self.bfs(matrix, pacific, i, 0, -float('inf'))                      # Instead of going from the matrix[i][j] to see if
                                                                                # the cell can reach pacific or atlantic (complicated)
                                                                                # We go from the boundary of pacific and atlantic,
                                                                                # To see which cell these boundaried can reach (easier)
            self.bfs(matrix, atlantic, i, len(matrix[0]) - 1, -float('inf'))
        for j in range(len(matrix[0])):
            self.bfs(matrix, pacific, 0, j, -float('inf'))
            self.bfs(matrix, atlantic, len(matrix) - 1, j, -float('inf'))
        for i in range(len(matrix)):
            for j in range(len(matrix[0])):
                if pacific[i][j] and atlantic[i][j]:                       # Only the cells that are both reachable by those boundaries
                                                                           # can be marked as the result
                    res.append([i, j])
        return res
    
    def bfs(self, matrix, reachable, i, j, height):
        if i < 0 or i >= len(matrix) or j < 0 or j >= len(matrix[0]) or reachable[i][j] or height > matrix[i][j]:
            return
        reachable[i][j] = True
        for d in self.directions:
            self.bfs(matrix, reachable, i + d[0], j + d[1], matrix[i][j])
