Given two strings s1, s2, find the lowest ASCII sum of deleted characters to make two strings equal.

Example 1:
Input: s1 = "sea", s2 = "eat"
Output: 231
Explanation: Deleting "s" from "sea" adds the ASCII value of "s" (115) to the sum.
Deleting "t" from "eat" adds 116 to the sum.
At the end, both strings are equal, and 115 + 116 = 231 is the minimum sum possible to achieve this.
Example 2:
Input: s1 = "delete", s2 = "leet"
Output: 403
Explanation: Deleting "dee" from "delete" to turn the string into "let",
adds 100[d]+101[e]+101[e] to the sum.  Deleting "e" from "leet" adds 101[e] to the sum.
At the end, both strings are equal to "let", and the answer is 100+101+101+101 = 403.
If instead we turned both strings into "lee" or "eet", we would get answers of 433 or 417, which are higher.
Note:

0 < s1.length, s2.length <= 1000.
All elements of each string will have an ASCII value in [97, 122].



Solution: -------------------------------------------------- Bottom-Up Dynamic Programming
------------------------------------------------------------ O(m*n) T, O(m*n) S
class Solution(object):
    def minimumDeleteSum(self, s1, s2):
        """
        :type s1: str
        :type s2: str
        :rtype: int
        """
        dp = [[0 for j in range(len(s2) + 1)] for i in range(len(s1) + 1)]   # Step no.1: dp[i][j] be the answer to the problem for 
                                                                             # the strings s1[i:], s2[j:] (inclusing index i / j)
                                                                             # So, that's why "j in range(len(s2) + 1)"
                                                                             # and "i in range(len(s1) + 1)", 
                                                                             # we need to also let s1 and s2 be "" for initilization
        for i in range(len(s1) - 1, -1, -1):                                 # Step no.2: Init: when s2 == ""
            dp[i][len(s2)] = dp[i + 1][len(s2)] + ord(s1[i])                 # Different than usual, this time is Bottom-Up,
        for j in range(len(s2) - 1, -1, -1):                                 # when s1 == ""
            dp[len(s1)][j] = dp[len(s1)][j + 1] + ord(s2[j])
        for i in range(len(s1) - 1, -1, -1):                                 # Step no.3: Transform
            for j in range(len(s2) - 1, -1, -1):
                if s1[i] == s2[j]:                                           # When s1[i] == s2[j], we can ignore these two characters.
                    dp[i][j] = dp[i + 1][j + 1]
                else:                                                        # Else: dp[i][j] will be the minimum between
                                                                             # dp[i + 1][j] + ord(s1[i]) => previous answer for
                                                                             # s1[i + 1:] and s2[j:] plus the ord() for extra i and 
                                                                             # dp[i][j + 1] + ord(s2[j]) => previous answer for
                                                                             # s1[i:] and s2[j + 1:] plus the ord() for extra j
                                                                             
                    dp[i][j] = min(dp[i + 1][j] + ord(s1[i]), dp[i][j + 1] + ord(s2[j]))
        return dp[0][0]                                                      # dp[0][0] must become the optimal choice by this dp,
                                                                             # see 手机相册2019.09.23看“sea”和“eat”的情况分析
                                                                             # for bottom up dp, we should first come up with
                                                                             # the last row and last column, and decide dp[i][j]'s value
                                                                             # by dp[i + 1][j] and dp[i][j + 1]
                                                                             # just as in top-down (normal) dp,
                                                                             # we first initilize the first row and first column,
                                                                             # and decide dp[i][j] by dp[i - 1][j] and dp[i][j - 1]
                                                                             # also, we use "for i in range(len(s1) - 1, -1, -1)", 
                                                                             # "for j in range(len(s2) - 1, -1, -1)" for the bottom-up
                                                                             # and "for i in range(1, len(s1))"
                                                                             # and "j in range(1, len(s2))" for top-down
                                                                             # so that, we always come up with the current dp
                                                                             # using the initilized dp or previous calculated dp
