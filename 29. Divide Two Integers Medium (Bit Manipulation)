Given two integers dividend and divisor, divide two integers without using multiplication, division and mod operator.

Return the quotient after dividing dividend by divisor.

The integer division should truncate toward zero.

Example 1:

Input: dividend = 10, divisor = 3
Output: 3
Example 2:

Input: dividend = 7, divisor = -3
Output: -2
Note:

Both dividend and divisor will be 32-bit signed integers.
The divisor will never be 0.
Assume we are dealing with an environment which could only store integers within the 32-bit signed integer range: [−231,  231 − 1]. 
For the purpose of this problem, assume that your function returns 231 − 1 when the division result overflows.


Solution: ------------------------------------- Bit Manipulation -------------------------- https://www.youtube.com/watch?v=uD1Cw1JbD8E
class Solution(object):
    def divide(self, dividend, divisor):
        """
        :type dividend: int
        :type divisor: int
        :rtype: int
        """
        positive = (dividend < 0) == (divisor < 0)                   # Necessary check before doing division or mod in python
        dividend, divisor = abs(dividend), abs(divisor)              # Must remember to convert them into abs values
        res = 0
        while dividend >= divisor:
            temp, i = divisor, 1
            while dividend >= temp:
                dividend -= temp
                res += i
                i <<= 1                                              # i <<= 1 is the same as i *= 2
                                                                     # We do this because multiplication is banned in this question
                temp <<= 1
        if not positive:
            res = - res
        return min(max(-2147483648, res), 2147483647)                # Prevent overflow for int type variables
