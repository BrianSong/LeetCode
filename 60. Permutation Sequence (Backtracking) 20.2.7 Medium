The set [1,2,3,...,n] contains a total of n! unique permutations.

By listing and labeling all of the permutations in order, we get the following sequence for n = 3:

"123"
"132"
"213"
"231"
"312"
"321"
Given n and k, return the kth permutation sequence.

Note:

Given n will be between 1 and 9 inclusive.
Given k will be between 1 and n! inclusive.
Example 1:

Input: n = 3, k = 3
Output: "213"
Example 2:

Input: n = 4, k = 9
Output: "2314"

Solution no.1: -------------------------- my own --------------------------- workable but too slow -> Time limit error
class Solution(object):
    def getPermutation(self, n, k):
        """
        :type n: int
        :type k: int
        :rtype: str
        """
        if not n or not k:
            return None
        self.res, self.times = "", 0
        self.backtracking([i for i in range(1, n + 1)], "", k)
        return self.res
    
    def backtracking(self, nums, curr, k):
        if not nums:
            self.times += 1
            if self.times == k:
                self.res = curr
            return
        if self.res:
            return
        for i in range(len(nums)):
            self.backtracking(nums[:i] + nums[i + 1:], curr + str(nums[i]), k)
                    
Solution no.2: -------------------------------------------------------------- One Pass
-------------------------------------------------------------- O(n^2) T due to "candidate.remove(digit)", O(n) S
class Solution(object):
    def getPermutation(self, n, k):
        """
        :type n: int
        :type k: int
        :rtype: str
        """
        candidate = [str(i) for i in range(1, n + 1)]
        res = ""
        return self.backtracking(n, k, candidate, res)
        
        
    def backtracking(self, n, k, candidate, res):
        if n == 1:
            res += candidate[0]                             # candidate now should have one and only one element
            return res
        else:
            SameFirstNum = math.factorial(n - 1)            # fix the first number, how many permutations for that number
            idx = (k - 1) / SameFirstNum                    # find the index for first number
            digit = candidate[idx]                          # find the first number
                                                            # We only do (k - 1) here for the indexing 
            res += digit
            candidate.remove(digit)                         # remove the first number
            return self.backtracking(n - 1, k % SameFirstNum, candidate, res)  # IMPORTANT !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
                                                                               # k & SameFirstNum instead of (k - 1) & SameFirstNum
            # k % SameFirstNum -> small than SameFirstNum


Java Version:
class Solution {
    public String getPermutation(int n, int k) {
        if (n <= 0 || k <= 0) {
            return "";
        }
        
        int[] factorial = new int[n + 1];
        factorial[0] = 1;
        int sum = 1;
        StringBuilder res = new StringBuilder();
        
        for (int i = 1; i < factorial.length; i ++) {
            sum *= i;
            factorial[i] = sum;
        }
        
        
        List<Integer> candidates = new ArrayList<>();
        for (int i = 1; i <= n; i ++) {
            candidates.add(i);
        }
        
        while (n != 1) {
            int firstSameNum = factorial[n - 1];
            int index = (k - 1) / firstSameNum;
            res.append(candidates.get(index).toString());
            candidates.remove(index);
            k = k - index * factorial[n - 1];
            n -= 1;
        }
        
        res.append(candidates.get(0).toString());
                
        return res.toString();
        
    }
}
