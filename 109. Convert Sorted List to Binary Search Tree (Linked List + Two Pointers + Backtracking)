Given a singly linked list where elements are sorted in ascending order, convert it to a height balanced BST.

For this problem, 
a height-balanced binary tree is defined as a binary tree in which the depth of the two subtrees of every node 
never differ by more than 1.

Example:

Given the sorted linked list: [-10,-3,0,5,9],

One possible answer is: [0,-3,9,-10,null,5], which represents the following height balanced BST:

      0
     / \
   -3   9
   /   /
 -10  5
 
 Solution: ------------------------------------ Same as Q.108, just convert the linked list into an array as line 37-40
 # Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.next = None

# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution(object):
    def sortedListToBST(self, head):
        if head is None:
            return None
        currnode, array = head, []
        while currnode:
            array.append(currnode.val)
            currnode = currnode.next
        return self.to_bst_help(array, 0, len(array)-1)
        """
        :type head: ListNode
        :rtype: TreeNode
        """
    def to_bst_help(self, array, start, end):
        if start > end:
            return None
        mid = (start + end) / 2
        node = TreeNode(array[mid])
        node.left = self.to_bst_help(array, start, mid - 1)   # VERY VERY IMPORTANT, THE KEY TO RECURSION!!!!!
                                                              # In a BST, the left subtree is also a tree as we deal with in the start
                                                              # So, we can do what we did as in the beginning and pass on
                                                              # This is the key for recursion, in every level of recursion,
                                                              # we basically do the same thing until we hit the exiting condition
                                                              # And that's why we always use recursion to deal with tree data structure
        node.right = self.to_bst_help(array, mid + 1, end)
        return node
        
        
Solution no.2:
def sortedListToBST(self, head):
    if not head:
        return 
    if not head.next:
        return TreeNode(head.val)
    # here we get the middle point,
    # even case, like '1234', slow points to '2',
    # '3' is root, '12' belongs to left, '4' is right
    # odd case, like '12345', slow points to '2', '12'
    # belongs to left, '3' is root, '45' belongs to right
    slow, fast = head, head.next.next
    while fast and fast.next:
        fast = fast.next.next
        slow = slow.next
    # tmp points to root
    tmp = slow.next
    # cut down the left child
    slow.next = None
    root = TreeNode(tmp.val)
    root.left = self.sortedListToBST(head)
    root.right = self.sortedListToBST(tmp.next)
    return root
