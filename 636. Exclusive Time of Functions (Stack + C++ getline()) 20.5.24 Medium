On a single threaded CPU, we execute some functions.  Each function has a unique id between 0 and N-1.

We store logs in timestamp order that describe when a function is entered or exited.

Each log is a string with this format: "{function_id}:{"start" | "end"}:{timestamp}".  
For example, "0:start:3" means the function with id 0 started at the beginning of timestamp 3.  
"1:end:2" means the function with id 1 ended at the end of timestamp 2.

A function's exclusive time is the number of units of time spent in this function.  
Note that this does not include any recursive calls to child functions.

The CPU is single threaded which means that only one function is being executed at a given time unit.

Return the exclusive time of each function, sorted by their function id.

 

Example 1:



Input:
n = 2
logs = ["0:start:0","1:start:2","1:end:5","0:end:6"]
Output: [3, 4]
Explanation:
Function 0 starts at the beginning of time 0, then it executes 2 units of time and reaches the end of time 1.
Now function 1 starts at the beginning of time 2, executes 4 units of time and ends at time 5.
Function 0 is running again at the beginning of time 6, and also ends at the end of time 6, thus executing for 1 unit of time. 
So function 0 spends 2 + 1 = 3 units of total time executing, and function 1 spends 4 units of total time executing.
 

Note:

1 <= n <= 100
Two functions won't start or end at the same time.
Functions will always log when they exit.


Solution: ---------------------------------------------------- Stack ----------- https://www.youtube.com/watch?v=Oi68_8xkxI4
-------------------------------------------------------------- O(n) T and S
class Solution(object):
    def exclusiveTime(self, n, logs):
        """
        :type n: int
        :type logs: List[str]
        :rtype: List[int]
        """
        if not logs:
            return None
        res = [0] * n
        stack = []                                                    # Use a stack to simulate the function call and suspend
        prev_time = 0
        for log in logs:
            curr_id, type, curr_time = log.split(':')
            curr_id = int(curr_id)
            curr_time = int(curr_time)
            if type == 'start':                                       # when there is a new function being called, the last function
                                                                      # is being suspended, and we need to add its exclusive time to it
                if stack:
                    res[stack[-1]] += curr_time - prev_time
                prev_time = curr_time
                stack.append(curr_id)
            else:
                res[stack.pop()] += curr_time - prev_time + 1         # when it is "end", it means that the current function is ended,
                                                                      # we just add its exculsive time but remember to add 1
                                                                      # due to the setting of this question
                prev_time = curr_time + 1
        return res



C++ Version:
class Solution {
public:
    vector<int> exclusiveTime(int n, vector<string>& logs) {
        stack<int> s {};
        vector<int> res (n, 0);
        int prev_time {};
        for (string log : logs) {
            stringstream ss(log);
            string curr_id_s, curr_type, curr_time_s;
            getline(ss, curr_id_s, ':');                        # istream& getline (istream& is, string& str, char delim);
            getline(ss, curr_type, ':');
            getline(ss, curr_time_s, ':');
            int curr_id = stoi(curr_id_s);
            int curr_time = stoi(curr_time_s);
            if (curr_type == "start") {
                if (s.size() != 0) {
                    res[s.top()] += curr_time - prev_time;
                }
                prev_time = curr_time;
                s.push(curr_id);
            } else {
                int pop_id = s.top();
                s.pop();
                res[pop_id] += curr_time - prev_time + 1;
                prev_time = curr_time + 1;
            }
        }
        return res;
    }
};
