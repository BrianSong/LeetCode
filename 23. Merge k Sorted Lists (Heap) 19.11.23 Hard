Merge k sorted linked lists and return it as one sorted list. Analyze and describe its complexity.

Example:

Input:
[
  1->4->5,
  1->3->4,
  2->6
]
Output: 1->1->2->3->4->4->5->6


Solution: --------------------------- Heap ------------------------ https://www.youtube.com/watch?v=Jq6QWstM66s
-------------------- O(Nlogk) T: N is the number of total Node, k is the length of that specific heap when heappush, O(n) S
# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution(object):
    def mergeKLists(self, lists):
        """
        :type lists: List[ListNode]
        :rtype: ListNode
        """
        if not lists:
            return None
        heap = []
        dummynode = ListNode(0)
        prev = dummynode
        for node in lists:
            if node:                                                      # EVERYTIME, we want to access a node.val,
                                                                          # it must be make sure that it is not None
                heapq.heappush(heap, (node.val, node))                    # We cannot only heappush headnode with its value
                                                                          # because heap is not built for automatically
                                                                          # detect the value of every nodes and sort them automatically
                                                                          # In order to sort them, we must push the node's value as well
                                                                          # Also, remember the heap sytantx in Python,
                                                                          # no heap = ..., 
                                                                          # but heapq.heappush(heap, ...) and heapq.heappop(heap)
        while heap:
            currnode = heapq.heappop(heap)[1]
            prev.next = currnode
            prev = currnode
            if currnode.next:
                heapq.heappush(heap, (currnode.next.val, currnode.next))
        return dummynode.next
