Invert a binary tree.

Example:

Input:

     4
   /   \
  2     7
 / \   / \
1   3 6   9
Output:

     4
   /   \
  7     2
 / \   / \
9   6 3   1

Solution:
class Solution(object):
    def invertTree(self, root):
        if root:
            root.left, root.right = self.invertTree(root.right), self.invertTree(root.left) # Swap value trick in python
            return root 
            '''
            As shown below: :rtype: TreeNode, so the return value should be node instead of 
            any list(e.x. [4, 7, 2, 9, 6, 3, 1]) created by myself
            '''
        else: # Exiting Condition
            return None
        """
        :type root: TreeNode
        :rtype: TreeNode
        """
'''
Case analyse:
Node 2, Node 7 = f(Node 7), f(Node 2)
                    |
                    Node 6, Node 9 = f(Node 9), f(Node 6)
                                        |--return Node 9 (the same for other nodes)
                                        Node None, Node None = f(None), f(None)
                                                                  |         |
                                                                  None      None
  '''
