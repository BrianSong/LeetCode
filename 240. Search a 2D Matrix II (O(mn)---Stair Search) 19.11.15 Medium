Write an efficient algorithm that searches for a value in an m x n matrix. This matrix has the following properties:

Integers in each row are sorted in ascending from left to right.
Integers in each column are sorted in ascending from top to bottom.
Example:

Consider the following matrix:

[
  [1,   4,  7, 11, 15],
  [2,   5,  8, 12, 19],
  [3,   6,  9, 16, 22],
  [10, 13, 14, 17, 24],
  [18, 21, 23, 26, 30]
]
Given target = 5, return true.

Given target = 20, return false.

Solution: ------------------------------------------ Stair Search --------------------- https://www.youtube.com/watch?v=ZhG1M_FzxgI
--------------------------------------- O(mn) T: the worst case we will go over every element, O(1) S
'''
Why we can use stair search in this question ????????????????????????????
The reason is that, 
since the matrix is sorted from left to right and from top to bottom,
When the target > matrix[i][j], the target CANNOT exist in the left of matrix[i][j], so we increase i and look for new ways,
the same theory can also apply for when target < matrix[i][j], CANNOT exist below matrix[i][j], so we decrease j and look for new ways
'''
class Solution(object):
    def searchMatrix(self, matrix, target):
        if matrix is None or len(matrix) == 0 or len(matrix[0]) == 0: # not only len(matrix) != 0 but also len(matrix[0]) != 0 !!!!
            return False
        m, n = len(matrix) - 1, len(matrix[0]) - 1
        if target < matrix[0][0] or target > matrix[m][n]:
            return False
        i, j = 0, n
        while i <= m and j >= 0:                                     # The trajectory is like stairs, so we called it stair search
            if target > matrix[i][j]:                                # Case no.1: > so move downward due to the matrix's characteristic
                i += 1
            elif target < matrix[i][j]:                              # Case no.2: < so move leftward due to the matrix's characteristic
                j -= 1
            else:                                                    # Case no.3: == so return True
                return True
        return False
        """
        :type matrix: List[List[int]]
        :type target: int
        :rtype: bool
        """
