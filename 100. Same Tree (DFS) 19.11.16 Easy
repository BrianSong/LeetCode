Given two binary trees, write a function to check if they are the same or not.

Two binary trees are considered the same if they are structurally identical and the nodes have the same value.

Example 1:

Input:     1         1
          / \       / \
         2   3     2   3

        [1,2,3],   [1,2,3]

Output: true
Example 2:

Input:     1         1
          /           \
         2             2

        [1,2],     [1,null,2]

Output: false
Example 3:

Input:     1         1
          / \       / \
         2   1     1   2

        [1,2,1],   [1,1,2]

Output: false

Solution: ---------------------------------------------------- DFS
-------------------------------------------------------------- Time complexity: O(N), where N is a number of nodes in the tree
---------------------------------------- Space complexity: O(log(N)) in the best case of completely balanced tree 类似于二分（left and right）
-------------------------------- and O(N) in the worst case of completely unbalanced tree, to keep a recursion stack.  
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution(object):
    def isSameTree(self, p, q):
        if p is None and q is None:          # 都走到了尽头
            return True
        elif p and q:
            return (p.val == q.val) and self.isSameTree(p.left, q.left) and self.isSameTree(p.right, q.right) # 三者同时为True才为True
        else:                                # 两个节点中，一个为None，另一个不为None
            return False
        """
        :type p: TreeNode
        :type q: TreeNode
        :rtype: bool
        """
        
        
'''
Cannot do as follow:
# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution(object):
    def isSameTree(self, p, q):
        """
        :type p: TreeNode
        :type q: TreeNode
        :rtype: bool
        """
        if not p and not q:
            return True
        if not p or not q:
            return False
        if p.val == q.val:
            return True                                        # If return True now, the following tree cannot be checked
        else:
            return False
        '''
        Should revise the upper 4 lines of code into the following two lines:
        if p.val != q.val:
            return False
        '''
        return self.isSameTree(p.left, q.left) and self.isSameTree(p.right, q.right)
'''
