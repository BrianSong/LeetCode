Given a nested list of integers, implement an iterator to flatten it.

Each element is either an integer, or a list -- whose elements may also be integers or other lists.

Example 1:

Input: [[1,1],2,[1,1]]
Output: [1,1,2,1,1]
Explanation: By calling next repeatedly until hasNext returns false, 
             the order of elements returned by next should be: [1,1,2,1,1].
Example 2:

Input: [1,[4,[6]]]
Output: [1,4,6]
Explanation: By calling next repeatedly until hasNext returns false, 
             the order of elements returned by next should be: [1,4,6].
             
             
Solution no.1: ------------------------------------------------------ Stack + Design
# """
# This is the interface that allows for creating nested lists.
# You should not implement it, or speculate about its implementation
# """
#class NestedInteger(object):
#    def isInteger(self):
#        """
#        @return True if this NestedInteger holds a single integer, rather than a nested list.
#        :rtype bool
#        """
#
#    def getInteger(self):
#        """
#        @return the single integer that this NestedInteger holds, if it holds a single integer
#        Return None if this NestedInteger holds a nested list
#        :rtype int
#        """
#
#    def getList(self):
#        """
#        @return the nested list that this NestedInteger holds, if it holds a nested list
#        Return None if this NestedInteger holds a single integer
#        :rtype List[NestedInteger]
#        """

class NestedIterator(object):

    def __init__(self, nestedList):
        """
        Initialize your data structure here.
        :type nestedList: List[NestedInteger]
        """
        self.stack = nestedList[::-1]                 # Reverse the nestedList because stack is built to pop() in O(1), pop(0) => O(n)

    def next(self):
        """
        :rtype: int
        """
        return self.stack.pop().getInteger()          # From the description below, everytime before next() being called,
                                                      # hasNext() has been called.
        

    def hasNext(self):
        """
        :rtype: bool
        """
        while self.stack:
            top = self.stack[-1]
            if top.isInteger():                                       # if the toppest(rightest, index:-1) is an integer, return True
                return True
            else:                                                     # else, remove the top by self.stack[-1]
                self.stack = self.stack[:-1] + top.getList()[::-1]    # and get the new decomposed nested list by calling the getList()
        return False                                                  # Remember to reverse the new nested list as well
                

# Your NestedIterator object will be instantiated and called as such:
# i, v = NestedIterator(nestedList), []
# while i.hasNext(): v.append(i.next())



Solution no.2: --------------------------------------- My own ---------------------- Deque + extend()
--------------------------------------- O(N) T, N is the total element inside the nested list, not len(nested list), but total elements
--------------------------------------- O(N) S
class NestedIterator(object):

    def __init__(self, nestedList):
        """
        Initialize your data structure here.
        :type nestedList: List[NestedInteger]
        """
        self.res = collections.deque()                    # Do the all transformation part in the init function
                                                          # so that it would be faster when facing a lot of call to hasNext() and next()
        for item in nestedList:
            if item.isInteger():
                self.res.append(item.getInteger())
            else:
                self.res.extend(self.flattenList(item))   # IMPORTANT !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
                                                          # Here, We MUST use extend INSTEAD OF append !!!!!!!!!!!!!!!!!!!!!!!

    def next(self):
        """
        :rtype: int
        """
        return self.res.popleft()                         # Use a deque, so that, popleft() takes O(1) T, and we do not need to
                                                          # reverse as solution no.1 which is very easy to make mistakes
        

    def hasNext(self):
        """
        :rtype: bool
        """
        return self.res
    
    def flattenList(self, List):
        res = []
        for item in List.getList():
            if item.isInteger():
                res.append(item.getInteger())
            else:
                res.extend(self.flattenList(item))
        return res
        

# Your NestedIterator object will be instantiated and called as such:
# i, v = NestedIterator(nestedList), []
# while i.hasNext(): v.append(i.next())



Java Version:
/**
 * // This is the interface that allows for creating nested lists.
 * // You should not implement it, or speculate about its implementation
 * public interface NestedInteger {
 *
 *     // @return true if this NestedInteger holds a single integer, rather than a nested list.
 *     public boolean isInteger();
 *
 *     // @return the single integer that this NestedInteger holds, if it holds a single integer
 *     // Return null if this NestedInteger holds a nested list
 *     public Integer getInteger();
 *
 *     // @return the nested list that this NestedInteger holds, if it holds a nested list
 *     // Return null if this NestedInteger holds a single integer
 *     public List<NestedInteger> getList();
 * }
 */
public class NestedIterator implements Iterator<Integer> {
    
    private List<Integer> flattenList = new ArrayList<>();
    private int currPos = 0;
    
    public NestedIterator(List<NestedInteger> nestedList) {
        flatten(nestedList);
    }
    
    public void flatten(List<NestedInteger> nestedList) {
        for (NestedInteger nestedInteger : nestedList) {
            if (nestedInteger.isInteger()) {
                flattenList.add(nestedInteger.getInteger());
            } else {
                flatten(nestedInteger.getList());
            }
        }
    }

    @Override
    public Integer next() {
        if (! hasNext()) {
            return null;
        }
        return flattenList.get(currPos ++);
    }

    @Override
    public boolean hasNext() {
        return currPos < flattenList.size();
    }
}

/**
 * Your NestedIterator object will be instantiated and called as such:
 * NestedIterator i = new NestedIterator(nestedList);
 * while (i.hasNext()) v[f()] = i.next();
 */
