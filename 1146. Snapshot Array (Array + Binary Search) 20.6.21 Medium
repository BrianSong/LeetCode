Implement a SnapshotArray that supports the following interface:

SnapshotArray(int length) initializes an array-like data structure with the given length.  Initially, each element equals 0.
void set(index, val) sets the element at the given index to be equal to val.
int snap() takes a snapshot of the array and returns the snap_id: the total number of times we called snap() minus 1.
int get(index, snap_id) returns the value at the given index, at the time we took the snapshot with the given snap_id
 

Example 1:

Input: ["SnapshotArray","set","snap","set","get"]
[[3],[0,5],[],[0,6],[0,0]]
Output: [null,null,0,null,5]
Explanation: 
SnapshotArray snapshotArr = new SnapshotArray(3); // set the length to be 3
snapshotArr.set(0,5);  // Set array[0] = 5
snapshotArr.snap();  // Take a snapshot, return snap_id = 0
snapshotArr.set(0,6);
snapshotArr.get(0,0);  // Get the value of array[0] with snap_id = 0, return 5
 

Constraints:

1 <= length <= 50000
At most 50000 calls will be made to set, snap, and get.
0 <= index < length
0 <= snap_id < (the total number of times we call snap())
0 <= val <= 10^9


Solution no.1: BF O(n) T and O(n * m) S where n == length, m == number of snapshot => TLE
class SnapshotArray(object):

    def __init__(self, length):
        """
        :type length: int
        """
        self.curr = [0] * length
        self.snapshot_list = [[0] for i in range(length)]
        self.snap_id = -1
        

    def set(self, index, val):
        """
        :type index: int
        :type val: int
        :rtype: None
        """
        self.curr[index] = val
        

    def snap(self):
        """
        :rtype: int
        """
        self.snap_id += 1
        for i in range(len(self.curr)):
            self.snapshot_list[i].append(self.curr[i])
        return self.snap_id

    def get(self, index, snap_id):
        """
        :type index: int
        :type snap_id: int
        :rtype: int
        """
        return self.snapshot_list[index][snap_id + 1]


# Your SnapshotArray object will be instantiated and called as such:
# obj = SnapshotArray(length)
# obj.set(index,val)
# param_2 = obj.snap()
# param_3 = obj.get(index,snap_id)


Solution no.2: Binary Search O(logs) T and O(s) S where s is the number of set() call
class SnapshotArray(object):

    def __init__(self, length):
        """
        :type length: int
        """
        self.index_to_snapshot = [[[-1, 0]] for i in range(length)]
        self.length = length
        self.snap_id = 0
        
    def set(self, index, val):
        """
        :type index: int
        :type val: int
        :rtype: None
        """
        self.index_to_snapshot[index].append([self.snap_id, val])
        
    def snap(self):
        """
        :rtype: int
        """
        self.snap_id += 1
        return self.snap_id - 1
        
    def get(self, index, snap_id):
        """
        :type index: int
        :type snap_id: int
        :rtype: int
        """
        index_history = self.index_to_snapshot[index]
        left, right = 0, len(index_history) - 1
        while left <= right:
            mid = (left + right) / 2
            if index_history[mid][0] <= snap_id:
                left = mid + 1
            else:
                right = mid - 1
        return index_history[right][1]
        
# Your SnapshotArray object will be instantiated and called as such:
# obj = SnapshotArray(length)
# obj.set(index,val)
# param_2 = obj.snap()
# param_3 = obj.get(index,snap_id)
