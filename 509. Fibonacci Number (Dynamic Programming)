The Fibonacci numbers, commonly denoted F(n) form a sequence, called the Fibonacci sequence, 
such that each number is the sum of the two preceding ones, starting from 0 and 1. That is,

F(0) = 0,   F(1) = 1
F(N) = F(N - 1) + F(N - 2), for N > 1.
Given N, calculate F(N).

 

Example 1:

Input: 2
Output: 1
Explanation: F(2) = F(1) + F(0) = 1 + 0 = 1.
Example 2:

Input: 3
Output: 2
Explanation: F(3) = F(2) + F(1) = 1 + 1 = 2.
Example 3:

Input: 4
Output: 3
Explanation: F(4) = F(3) + F(2) = 2 + 1 = 3.

Solution: --------------------------------------------- my own ---------------------------- O(n) time But O(n) space
class Solution(object):
    def fib(self, N):
        """
        :type N: int
        :rtype: int
        """
        if N == 0: return 0
        nums = [0 for i in range(N + 1)]
        nums[0], nums[1] = 0, 1
        for i in range(2, len(nums)):
            nums[i] = nums[i - 1] + nums[i - 2]
        return nums[-1]
        
        
Solution no.2: ---------------------------------------------- O(n) time with O(1) space
class Solution(object):
    def fib(self, N):
        """
        :type N: int
        :rtype: int
        """
        if N == 0: return 0
        if N == 1: return 1
        prev_1, prev_2, sumres = 1, 0, 0
        for i in range(2, N + 1):
            sumres = prev_1 + prev_2
            prev_2 = prev_1
            prev_1 = sumres
        return sumres
