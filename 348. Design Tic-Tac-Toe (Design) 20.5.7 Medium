Design a Tic-tac-toe game that is played between two players on a n x n grid.

You may assume the following rules:

A move is guaranteed to be valid and is placed on an empty block.
Once a winning condition is reached, no more moves is allowed.
A player who succeeds in placing n of their marks in a horizontal, vertical, or diagonal row wins the game.
Example:
Given n = 3, assume that player 1 is "X" and player 2 is "O" in the board.

TicTacToe toe = new TicTacToe(3);

toe.move(0, 0, 1); -> Returns 0 (no one wins)
|X| | |
| | | |    // Player 1 makes a move at (0, 0).
| | | |

toe.move(0, 2, 2); -> Returns 0 (no one wins)
|X| |O|
| | | |    // Player 2 makes a move at (0, 2).
| | | |

toe.move(2, 2, 1); -> Returns 0 (no one wins)
|X| |O|
| | | |    // Player 1 makes a move at (2, 2).
| | |X|

toe.move(1, 1, 2); -> Returns 0 (no one wins)
|X| |O|
| |O| |    // Player 2 makes a move at (1, 1).
| | |X|

toe.move(2, 0, 1); -> Returns 0 (no one wins)
|X| |O|
| |O| |    // Player 1 makes a move at (2, 0).
|X| |X|

toe.move(1, 0, 2); -> Returns 0 (no one wins)
|X| |O|
|O|O| |    // Player 2 makes a move at (1, 0).
|X| |X|

toe.move(2, 1, 1); -> Returns 1 (player 1 wins)
|X| |O|
|O|O| |    // Player 1 makes a move at (2, 1).
|X|X|X|
Follow up:
Could you do better than O(n2) per move() operation?


Solution no.1: ------------------------------------------ my own BF TLE PASS 31/32 due to O(n^2) T per move()
class TicTacToe(object):

    def __init__(self, n):
        """
        Initialize your data structure here.
        :type n: int
        """
        self.TTT_board = [[0 for j in range(n)] for i in range(n)]
        

    def move(self, row, col, player):
        """
        Player {player} makes a move at ({row}, {col}).
        @param row The row of the board.
        @param col The column of the board.
        @param player The player, can be either 1 or 2.
        @return The current winning condition, can be either:
                0: No one wins.
                1: Player 1 wins.
                2: Player 2 wins.
        :type row: int
        :type col: int
        :type player: int
        :rtype: int
        """
        self.TTT_board[row][col] = 'X' if player == 1 else 'O'
        print self.TTT_board
        return self.check(self.TTT_board)
    
    def check(self, board):
        n = len(board)
        for i in range(n):
            count_X = 0
            count_O = 0
            for j in range(n):
                if board[i][j] == 'X':
                    count_X += 1
                elif board[i][j] == 'O':
                    count_O += 1
            if count_X == n:
                return 1
            elif count_O == n:
                return 2
            
        for j in range(n):
            count_X = 0
            count_O = 0
            for i in range(n):
                if board[i][j] == 'X':
                    count_X += 1
                elif board[i][j] == 'O':
                    count_O += 1
            if count_X == n:
                return 1
            elif count_O == n:
                return 2
        
        count_X_1, count_O_1 = 0, 0
        count_X_2, count_O_2 = 0, 0
        
        for i in range(n):
            for j in range(n):
                if i == j:
                    if board[i][j] == 'X':
                        count_X_1 += 1
                    elif board[i][j] == 'O':
                        count_O_1 += 1
                if i + j == n - 1:                              # if !!!!!!!!!! not elif !!!!!!!!!!!! for (1, 1) when n == 2
                                                                # we need to check twice
                    if board[i][j] == 'X':
                        count_X_2 += 1
                    elif board[i][j] == 'O':
                        count_O_2 += 1
        if count_X_1 == n or count_X_2 == n:
            return 1
        if count_O_1 == n or count_O_2 == n:
            return 2
        return 0
        
        
Solution no.2: ------------------------------------------ O(1) T for move() by using O(n) extra space
class TicTacToe(object):

    def __init__(self, n):
        """
        Initialize your data structure here.
        :type n: int
        """
        self.rows = [0] * n                                  # These four additional extra space can help to achieve O(1) T
        self.cols = [0] * n
        self.n = n
        self.diagonal = 0
        self.anti_diagonal = 0
        

    def move(self, row, col, player):
        """
        Player {player} makes a move at ({row}, {col}).
        @param row The row of the board.
        @param col The column of the board.
        @param player The player, can be either 1 or 2.
        @return The current winning condition, can be either:
                0: No one wins.
                1: Player 1 wins.
                2: Player 2 wins.
        :type row: int
        :type col: int
        :type player: int
        :rtype: int
        """
        n = self.n
        to_add = 1 if player == 1 else -1                                 # Introduce a to_add variable to make the code more concise
        self.rows[row] += to_add
        self.cols[col] += to_add
        if row == col:
            self.diagonal += to_add
        if row + col == n - 1:
            self.anti_diagonal += to_add
        if self.rows[row] == to_add * n:
            return 1 if to_add == 1 else 2
        elif self.cols[col] == to_add * n:
            return 1 if to_add == 1 else 2
        elif self.diagonal == to_add * n:
            return 1 if to_add == 1 else 2
        elif self.anti_diagonal == to_add * n:
            return 1 if to_add == 1 else 2
        return 0


Java Version:
class TicTacToe {
    int n;
    int[] rows;
    int[] cols;
    int left, right;
    
    /** Initialize your data structure here. */
    public TicTacToe(int n) {
        this.n = n;
        rows = new int[n];
        cols = new int[n];
        left = 0;
        right = 0;
    }
    
    /** Player {player} makes a move at ({row}, {col}).
        @param row The row of the board.
        @param col The column of the board.
        @param player The player, can be either 1 or 2.
        @return The current winning condition, can be either:
                0: No one wins.
                1: Player 1 wins.
                2: Player 2 wins. */
    public int move(int row, int col, int player) {
        rows[row] = player == 1 ? rows[row] + 1 : rows[row] - 1;
        cols[col] = player == 1 ? cols[col] + 1 : cols[col] - 1;
        if (row == col) {
            left = player == 1 ? left + 1 : left - 1;
        } 
        if (row + col == n - 1) {
            right = player == 1 ? right + 1 : right - 1;
        }
        if (rows[row] == n || cols[col] == n || left == n || right == n) {
            return 1;
        }
        if (rows[row] == -n || cols[col] == -n || left == -n || right == -n) {
            return 2;
        }
        return 0;
    }
}

/**
 * Your TicTacToe object will be instantiated and called as such:
 * TicTacToe obj = new TicTacToe(n);
 * int param_1 = obj.move(row,col,player);
 */
