Given n non-negative integers representing the histogram's bar height where the width of each bar is 1, 
find the area of largest rectangle in the histogram.

 


Above is a histogram where width of each bar is 1, given height = [2,1,5,6,2,3].

 


The largest rectangle is shown in the shaded area, which has area = 10 unit.

 

Example:

Input: [2,1,5,6,2,3]
Output: 10


Solution no.1: ------------------------- O(n^2) time, O(1) space ----------------- https://www.youtube.com/watch?v=KkJrGxuQtYo
class Solution(object):
    def largestRectangleArea(self, heights):
        """
        :type heights: List[int]
        :rtype: int
        """
        res = 0
        for i in range(len(heights)):                                       # Loop over all histograms to find the largest rectangle
            if i != len(heights) - 1 and heights[i + 1] >= heights[i]:      # If the later histogram is higher than it,
                                                                            # do not need to consider this histogram,
                                                                            # because the latter rectangle must be larger than current 
                                                                            # => wider width and higher height
                continue
            else:                                                           # Need also to consider the corner case: the last histogram
                width, minheight = 1, float('inf')
                for j in range(i, -1, -1):
                    minheight = min(minheight, heights[j])
                    res = max(res, minheight * width)
                    width += 1
        return res
        
        
Solution no.2: ------------------------------- Stack O(n) time complexity ----------- https://www.youtube.com/watch?v=KkJrGxuQtYo
class Solution(object):
    def largestRectangleArea(self, heights):
        """
        :type heights: List[int]
        :rtype: int
        """
        if not heights or len(heights) == 0:
            return 0
        res, stack, curridx = 0, [], 0
        while curridx < len(heights):                                          # Inside "for i in range():", we cannot change i's
                                                                               # value, so, if we wanna do so, use a while loop instead
            if not stack or heights[curridx] >= heights[stack[-1]]:
                stack.append(curridx)
                curridx += 1
            else:
                right = curridx                                                    # left means leftmost boundary (not included),
                                                                                   # right means rightmost boundary (not included),
                                                                                   # height means the height.
                height = stack.pop()
                while len(stack) != 0 and heights[height] == heights[stack[-1]]:   # To deal with duplicate heights
                    height = stack.pop()
                if len(stack) != 0:                                                # Everytime we want to do stack/queue pop() or [idx]
                                                                                   # we must check by "if stack/queue:"
                    left = stack[-1]
                else:                                                              # if the stack is empty, the leftmost boundary will
                                                                                   # be -1 without a doubt
                    left = -1
                res = max(res, (right - left - 1) * heights[height])
        if stack:                                                                  # After iterate over the entire heights list,
                                                                                   # if the stack is still not empty,
                                                                                   # then the stack must be ordered 从小到大,
                                                                                   # the rightmost boundary can be directly assign to
                                                                                   # stack[-1] + 1
            right = stack[-1] + 1
        while stack:                                                              
            height = stack.pop()
            if stack:
                left = stack[-1]
            else:                    
                left = -1
            res = max(res, (right - left - 1) * heights[height])
        return res



Updated Version:
class Solution(object):
    def largestRectangleArea(self, heights):
        """
        :type heights: List[int]
        :rtype: int
        """
        if not heights or len(heights) == 0:
            return 0
        
        res, stack, curr_index = 0, [], 0
        
        while curr_index < len(heights):
            if not stack or heights[stack[-1]] <= heights[curr_index]:
                stack.append(curr_index)
                curr_index += 1
            else:
                height_index, right_index = stack.pop(), curr_index
                while stack and heights[height_index] == heights[stack[-1]]:
                    stack.pop()
                left_index = stack[-1] if stack else -1
                res = max(res, heights[height_index] * (right_index - left_index - 1))
        
        if stack:
            right_index = stack[-1] + 1
        
        while stack:
            height_index = stack.pop()
            left_index = stack[-1] if stack else -1
            res = max(res, heights[height_index] * (right_index - left_index - 1))
        
        return res


Concise Version:
class Solution(object):
    def largestRectangleArea(self, heights):
        """
        :type heights: List[int]
        :rtype: int
        """
        if not heights or len(heights) == 0:
            return 0
        
        stack = []
        stack.append(-1)
        max_area = 0
        for i in range(len(heights)):
            # i 此刻为右边界
            while stack[-1] != -1 and heights[stack[-1]] > heights[i]:
                # stack[-1] 此刻为左边界
                max_area = max(max_area, heights[stack.pop()] * (i - stack[-1] - 1))
            stack.append(i)
        
        while stack[-1] != -1:
            max_area = max(max_area, heights[stack.pop()] * (len(heights) - stack[-1] -1))
        
        return max_area
