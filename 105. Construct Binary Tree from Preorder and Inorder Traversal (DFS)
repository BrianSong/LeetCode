Given preorder and inorder traversal of a tree, construct the binary tree.

Note:
You may assume that duplicates do not exist in the tree.

For example, given

preorder = [3,9,20,15,7]
inorder = [9,3,15,20,7]
Return the following binary tree:

    3
   / \
  9  20
    /  \
   15   7
   
Solution: ------------------------------------ DFS ------- https://www.youtube.com/watch?v=S1wNG5hx-30
-------------------------------------- O(N^2) T: Inside each currnode, we transverse the inorder to find idx, O(N) S
# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution(object):
    def buildTree(self, preorder, inorder):
        if preorder is None or inorder is None or len(preorder) == 0 or len(inorder) == 0 or len(preorder) != len(inorder):
            return None
        return self.recursion_helper(preorder, inorder, 0, 0, len(inorder) - 1)
        """
        :type preorder: List[int]
        :type inorder: List[int]
        :rtype: TreeNode
        """
    '''
    Since there are two lists, so we shoud create four pointer, but pre_end is useless because it can be replaced by in_end due to equal
    length of preorder and inorder.
    so, only 3 pointers: pre_start, in_start, in_end will be passed around
    By the characteristic of inorder and preorder traverse, we can come up with the modification to these arguments below
    '''
    def recursion_helper(self, preorder, inorder, pre_start, in_start, in_end):
        if pre_start >= len(preorder) or in_start > in_end:                     # Exiting conditions: according to the three arguments
            return None
        currnode = TreeNode(preorder[pre_start])
        idx = inorder.index(preorder[pre_start])                 # How to find the index of specific element inside an array: .index()!
        currnode.left = self.recursion_helper(preorder, inorder, pre_start + 1, in_start, idx - 1)
        currnode.right = self.recursion_helper(preorder, inorder, pre_start + (idx - in_start) + 1, idx + 1, in_end)
        # IMPORTANT!!!!!!!!!!!!!!!!!!!!! pre_start + (idx - in_start) + 1 not pre_start + (idx + 1)!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
        # Why pre_start + (idx - in_start) + 1? Because idx - instart indicates how many left-subtree nodes of the currnode
        # And they all line up after the currnode before the first right-subtree node in the preorder
        # As for the inorder, the left part of the currnode belongs to the left subtree and right part belongs to the right subtree
        return currnode


Solution no.2: -------------------------------------------- My own ---------- split the array: waste a lot of space and very slow
# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution(object):
    def buildTree(self, preorder, inorder):
        """
        :type preorder: List[int]
        :type inorder: List[int]
        :rtype: TreeNode
        """
        if not preorder or not inorder:
            return None
        return self.backtracking(preorder, inorder, 0, )
    
    def backtracking(self, preorder, inorder):
        if not preorder:
            return None
        newNode = TreeNode(preorder[0])
        currValue = preorder[0]
        index = inorder.index(currValue)
        preorder_left = preorder[1:1 + index]
        preorder_right = preorder[1 + index:]
        inorder_left = inorder[:index]
        inorder_right = inorder[index + 1:]
        newNode.left = self.backtracking(preorder_left, inorder_left)
        newNode.right = self.backtracking(preorder_right, inorder_right)
        return newNode
        
Solution no.3: -------------------------------------- Build a hashmap to decrease time from O(n^2) to O(n)
# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution(object):
    def buildTree(self, preorder, inorder):
        if preorder is None or inorder is None or len(preorder) == 0 or len(inorder) == 0 or len(preorder) != len(inorder):
            return None
        self.HashTable = {val:idx for idx, val in enumerate(inorder)}                   # VERY VERY CLEVER
        return self.dfs(preorder, inorder, 0, 0, len(inorder) - 1)
        """
        :type preorder: List[int]
        :type inorder: List[int]
        :rtype: TreeNode
        """
    def dfs(self, preorder, inorder, pre_start, in_start, in_end):
        if pre_start >= len(preorder) or in_start > in_end:
            return None
        idx = self.HashTable[preorder[pre_start]]
        currroot = TreeNode(preorder[pre_start])
        currroot.left = self.dfs(preorder, inorder, pre_start + 1, in_start, idx - 1)
        currroot.right = self.dfs(preorder, inorder, pre_start + 1 + (idx - in_start), idx + 1, in_end)
        return currroot

