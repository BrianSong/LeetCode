Given an array nums, there is a sliding window of size k which is moving from the very left of the array to the very right. 
You can only see the k numbers in the window. Each time the sliding window moves right by one position. Return the max sliding window.

Example:

Input: nums = [1,3,-1,-3,5,3,6,7], and k = 3
Output: [3,3,5,5,6,7] 
Explanation: 

Window position                Max
---------------               -----
[1  3  -1] -3  5  3  6  7       3
 1 [3  -1  -3] 5  3  6  7       3
 1  3 [-1  -3  5] 3  6  7       5
 1  3  -1 [-3  5  3] 6  7       5
 1  3  -1  -3 [5  3  6] 7       6
 1  3  -1  -3  5 [3  6  7]      7
Note: 
You may assume k is always valid, 1 ≤ k ≤ input array's size for non-empty array.

Follow up:
Could you solve it in linear time?


Solution no.1: ----------------------- my own --------------------------------------------- Deque
--------------------------------------------  O(n*k) T, O(n) S
class Solution(object):
    def maxSlidingWindow(self, nums, k):
        """
        :type nums: List[int]
        :type k: int
        :rtype: List[int]
        """
        if not nums: return None
        window, res = collections.deque(), []
        for i in range(k - 1):
            window.append(nums[i])
        for i in range(k - 1, len(nums)):
            window.append(nums[i])
            res.append(max(window))
            window.popleft()
        return res
        
        
Solution no.2: ------------------------------ Deque ---------- A good visulation: https://www.youtube.com/watch?v=ShbRCjvB_yQ
--------------------------------------------  O(n) T, O(n) S
class Solution(object):
    def maxSlidingWindow(self, nums, k):
        """
        :type nums: List[int]
        :type k: int
        :rtype: List[int]
        """
        d, res = collections.deque(), []        # Keep indexes of good candidates in deque d. 
                                                # The indexes in d are from the current window, they're increasing, 
                                                # and their corresponding nums are decreasing. 
                                                # Then the first deque element is the index of the largest window value.
        for i, num in enumerate(nums):          # We scan the array from 0 to n-1, keep "promising" elements in the deque. 
                                                # The algorithm is amortized O(n) as each element is put and polled once.
            while d and nums[d[-1]] < num:      # Pop (from the end) indexes of smaller elements (they'll be useless).
                d.pop()
            d.append(i)                         # Append the current index.
            if d[0] == i - k:                   # Pop (from the front) the index i - k, 
                                                # because if it's still in the deque, it already falls out of the window.
                d.popleft()
            if i >= k - 1:                      # For the first k - 1 element do not need to find out the maximum,
                                                # because the sliding window has not be fulfilled.
                res.append(nums[d[0]])
        return res
