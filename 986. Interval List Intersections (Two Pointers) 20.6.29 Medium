Given two lists of closed intervals, each list of intervals is pairwise disjoint and in sorted order.

Return the intersection of these two interval lists.

(Formally, a closed interval [a, b] (with a <= b) denotes the set of real numbers x with a <= x <= b.  
The intersection of two closed intervals is a set of real numbers that is either empty, 
or can be represented as a closed interval.  For example, the intersection of [1, 3] and [2, 4] is [2, 3].)

 

Example 1:



Input: A = [[0,2],[5,10],[13,23],[24,25]], B = [[1,5],[8,12],[15,24],[25,26]]
Output: [[1,2],[5,5],[8,10],[15,23],[24,24],[25,25]]
 

Note:

0 <= A.length < 1000
0 <= B.length < 1000
0 <= A[i].start, A[i].end, B[i].start, B[i].end < 10^9


Solution: O(M + N) T and S
class Solution(object):
    def intervalIntersection(self, A, B):
        """
        :type A: List[List[int]]
        :type B: List[List[int]]
        :rtype: List[List[int]]
        """
        if len(A) == 0 or len(B) == 0:
            return []
        res = []
        A_p, B_p = 0, 0
        while A_p < len(A) and B_p < len(B):
            if A[A_p][1] < B[B_p][0]:
                A_p += 1
                continue
            if B[B_p][1] < A[A_p][0]:
                B_p += 1
                continue
            start = max(A[A_p][0], B[B_p][0])
            end = min(A[A_p][1], B[B_p][1])
            res.append((start, end))
            if A[A_p][1] > B[B_p][1]:
                B_p += 1
            else:
                A_p += 1
        return res
