Given an integer n, generate all structurally unique BST's (binary search trees) that store values 1 ... n.

Example:

Input: 3
Output:
[
  [1,null,3,2],
  [3,2,null,1],
  [3,1,null,null,2],
  [2,1,3],
  [1,null,2,null,3]
]
Explanation:
The above output corresponds to the 5 unique BST's shown below:

   1         3     3      2      1
    \       /     /      / \      \
     3     2     1      1   3      2
    /     /       \                 \
   2     1         2                 3
   
Solution: ------------------------------------------------------- Divide and Conquer
------------------------------------------------------- O(n^n) T, O(?) S
# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution(object):
    def generateTrees(self, n):
        """
        :type n: int
        :rtype: List[TreeNode]
        """
        if not n:
            return None
        return self.build_tree([i for i in range(1, n + 1)])
        
    def build_tree(self, list):
        if len(list) == 1:
            return [TreeNode(list[0])]                                # Must return a list, else error: "TreeNode type is not iterable"
        if not list:                                                  # IMPORTANT !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
                                                                      # CANNOT FORGET the None base case !!!!!!!!!!!!!!!!!!!!!!!!
            return [None]
        curr = []
        for i in range(len(list)):
            left_poss_node = self.build_tree(list[:i])
            right_poss_node = self.build_tree(list[i + 1:])
            for left in left_poss_node:
                for right in right_poss_node:
                    currnode = TreeNode(list[i])                      # Create the currnode here !!!!, inside these two for loop !!!!!!
                    currnode.left = left
                    currnode.right = right
                    curr.append(currnode)
        return curr                                                   # Since there are so many possibilities, what we want to
                                                                      # return is a list to choose from, rather than a simple node
