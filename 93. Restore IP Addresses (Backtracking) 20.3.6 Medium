Given a string containing only digits, restore it by returning all possible valid IP address combinations.

Example:

Input: "25525511135"
Output: ["255.255.11.135", "255.255.111.35"]

Solution: ------------------------------ Backtracking ------------------------------------ https://www.youtube.com/watch?v=nxBMEvLqDzY
-------------------------------------------------- O(1) T: 2^32 maximum possible IP address, O(1) S => 4 deepth
class Solution(object):
    def restoreIpAddresses(self, s):
        """
        :type s: str
        :rtype: List[str]
        """
        res = []
        self.dfs(s, "", 0, res)
        return res
    def dfs(self, s, path, field, res):
        if field == 4 and len(s) == 0:
            res.append(path[1:])
        elif field == 4 or len(s) == 0:
            return
        else:
            self.dfs(s[1:], path + "." + s[0], field + 1, res)
            if s[0] != '0' and len(s) > 1:
                self.dfs(s[2:], path + "." + s[0:2], field + 1, res)
            if s[0] != '0' and len(s) > 2 and int(s[0:3]) <= 255:
                self.dfs(s[3:], path + "." + s[0:3], field + 1, res)

Java Version:
class Solution {
    public List<String> restoreIpAddresses(String s) {
        List<String> res = new ArrayList<>();
        if (s == null || s.length() == 0) {
            return res;
        }
        dfs(s, 0, 0, "", res);
        return res;
    }
    public void dfs(String s, int index, int field, String path, List<String> res) {
        if (field > 4) {
            return;
        }
        if (field == 4 && index == s.length()) {
            res.add(path.substring(1, path.length()));
        }
        for (int i = 1; i < 4; i ++) {
            if (index + i > s.length()) {
                break;
            }
            String temp = s.substring(index, index + i);
            if ((temp.startsWith("0") && temp.length() > 1) || (i == 3 && Integer.valueOf(temp) > 255)) {
                continue;
            }
            dfs(s, index + i, field + 1, path + "." + temp, res);
        }
    }
}
