According to the Wikipedia's article: "The Game of Life, also known simply as Life, is a cellular automaton devised 
by the British mathematician John Horton Conway in 1970."

Given a board with m by n cells, each cell has an initial state live (1) or dead (0). Each cell interacts with its eight neighbors 
(horizontal, vertical, diagonal) using the following four rules (taken from the above Wikipedia article):

Any live cell with fewer than two live neighbors dies, as if caused by under-population.
Any live cell with two or three live neighbors lives on to the next generation.
Any live cell with more than three live neighbors dies, as if by over-population..
Any dead cell with exactly three live neighbors becomes a live cell, as if by reproduction.
Write a function to compute the next state (after one update) of the board given its current state. 
The next state is created by applying the above rules simultaneously to every cell in the current state, 
where births and deaths occur simultaneously.

Example:

Input: 
[
  [0,1,0],
  [0,0,1],
  [1,1,1],
  [0,0,0]
]
Output: 
[
  [0,0,0],
  [1,0,1],
  [0,1,1],
  [0,1,0]
]
Follow up:

Could you solve it in-place? Remember that the board needs to be updated at the same time: 
You cannot update some cells first and then use their updated values to update other cells.
In this question, we represent the board using a 2D array. In principle, the board is infinite, 
which would cause problems when the active area encroaches the border of the array. How would you address these problems?


Solution no.1: --------------------------------------- O(mn) Space Solution
------------------------------------------------------ O(mn * 9) T = O(mn) T, O(mn) S
'''
if you update the original array with the given rules, 
you won't be able to perform simultaneous updation as is required in the question. 
You might end up using the updated values for some cells to update the values of other cells. 
But the problem demands applying the given rules simultaneously to every cell.
'''
class Solution(object):
    def gameOfLife(self, board):
        """
        :type board: List[List[int]]
        :rtype: None Do not return anything, modify board in-place instead.
        """
        original = [[board[i][j] for j in range(len(board[0]))] for i in range(len(board))]        # IMPORTANT !!!!!!!!!!!!!!!!!!!!!!!!
                                                                                                   # CANNOT use original = board !!!!!!
                                                                                                   # In this way, they will always equal
                                                                                                   # Also, j instead of i the first [] !
        for i in range(len(board)):
            for j in range(len(board[0])):
                if board[i][j] == 1 and self.checkNeigh(original, i, j) < 2:
                    board[i][j] = 0
                elif board[i][j] == 1 and self.checkNeigh(original, i, j) > 3:
                    board[i][j] = 0
                elif board[i][j] == 0 and self.checkNeigh(original, i, j) == 3:
                    board[i][j] = 1
        
        
    def checkNeigh(self, board, r, l):
        live = 0
        for i in range(r - 1, r + 2):
            for j in range(l - 1, l + 2):
                if i == r and j == l:
                    continue
                if i < 0 or i >= len(board) or j < 0 or j >= len(board[0]):
                    continue
                if board[i][j] == 1:
                    live += 1
        return live
        
Solution no.2: --------------------------------------- O(1) S
------------------------------------------------------ O(mn * 9) T = O(mn) T, O(1) S
'''
We can use some dummy cell value to signify previous state of the cell along with the new changed value.
For e.g. If the value of the cell was 1 originally but it has now become 0 after applying the rule, 
then we can change the value to -1. The negative sign signifies the cell is now dead(0) 
but the magnitude signifies the cell was a live(1) cell originally.
Also, if the value of the cell was 0 originally but it has now become 1 after applying the rule, 
then we can change the value to 2. 
The positive sign signifies the cell is now live(1) but the magnitude of 2 signifies the cell was a dead(0) cell originally.
'''
class Solution(object):
    def gameOfLife(self, board):
        """
        :type board: List[List[int]]
        :rtype: None Do not return anything, modify board in-place instead.
        """
        for i in range(len(board)):
            for j in range(len(board[0])):
                if board[i][j] == 1 and self.checkNeigh(board, i, j) < 2:
                    board[i][j] = -1
                elif board[i][j] == 1 and self.checkNeigh(board, i, j) > 3:
                    board[i][j] = -1
                elif board[i][j] == 0 and self.checkNeigh(board, i, j) == 3:
                    board[i][j] = 2
        for i in range(len(board)):
            for j in range(len(board[0])):
                if board[i][j] == -1:
                    board[i][j] = 0
                elif board[i][j] == 2:
                    board[i][j] = 1
        
    def checkNeigh(self, board, r, l):
        live = 0
        for i in range(r - 1, r + 2):
            for j in range(l - 1, l + 2):
                if i == r and j == l:
                    continue
                if i < 0 or i >= len(board) or j < 0 or j >= len(board[0]):
                    continue
                if board[i][j] == 1 or board[i][j] == -1:
                    live += 1
        return live
        
# The infinite large board follow up may be addressed in the future



Java Version:
class Solution {
    public void gameOfLife(int[][] board) {
        int m = board.length, n = board[0].length;
        int[][] prev = new int[m][n];
        for (int i = 0; i < m; i ++) {
            for (int j = 0; j < n; j ++) {
                prev[i][j] = board[i][j];
            }
        }
        for (int i = 0; i < m; i ++) {
            for (int j = 0; j < n; j ++) {
                if (prev[i][j] == 1) {
                    if (numOfLiveNeigh(prev, i, j) < 2 || numOfLiveNeigh(prev, i, j) > 3) {
                        board[i][j] = 0;
                    } else {
                        board[i][j] = 1;
                    }
                } else {
                    if (numOfLiveNeigh(prev, i, j) == 3) {
                        board[i][j] = 1;
                    }
                }
            }
        }
    }
    public int numOfLiveNeigh(int[][] prev, int r, int c) {
        int liveNeigh = 0;
        for (int i = -1; i <= 1; i ++) {
            for (int j = -1; j <= 1; j ++) {
                if (i == 0 && j == 0) {
                    continue;
                } else {
                    if (0 <= r + i && r + i < prev.length && 0 <= c + j && c + j < prev[0].length) {
                        if (prev[r + i][c + j] == 1) {
                            liveNeigh ++;
                        }
                    }
                }
            }
        }
        return liveNeigh;
    }
}



Java Version:
class Solution {
    public void gameOfLife(int[][] board) {
        int m = board.length, n = board[0].length;
        for (int i = 0; i < m; i ++) {
            for (int j = 0; j < n; j ++) {
                if (board[i][j] == 1) {
                    if (numOfLiveNeigh(board, i, j) < 2 || numOfLiveNeigh(board, i, j) > 3) {
                        board[i][j] = -1;
                    }
                } else if (board[i][j] == 0) {
                    if (numOfLiveNeigh(board, i, j) == 3) {
                        board[i][j] = 2;
                    }
                }
            }
        }
        for (int i = 0; i < m; i ++) {
            for (int j = 0; j < n; j ++) {
                System.out.println(board[i][j]);
            }
        }
        for (int i = 0; i < m; i ++) {
            for (int j = 0; j < n; j ++) {
                if (board[i][j] == -1) {
                    board[i][j] = 0;
                } else if (board[i][j] == 2) {
                    board[i][j] = 1;
                }
            }
        }
    }
    public int numOfLiveNeigh(int[][] board, int r, int c) {
        int liveNeigh = 0;
        for (int i = -1; i <= 1; i ++) {
            for (int j = -1; j <= 1; j ++) {
                if (i == 0 && j == 0) {
                    continue;
                } else {
                    if (0 <= r + i && r + i < board.length && 0 <= c + j && c + j < board[0].length) {
                        if (board[r + i][c + j] == 1 || board[r + i][c + j] == -1) {
                            liveNeigh ++;
                        }
                    }
                }
            }
        }
        return liveNeigh;
    }
}
