Given a sorted integer array without duplicates, return the summary of its ranges.

Example 1:

Input:  [0,1,2,4,5,7]
Output: ["0->2","4->5","7"]
Explanation: 0,1,2 form a continuous range; 4,5 form a continuous range.
Example 2:

Input:  [0,2,3,4,6,8,9]
Output: ["0","2->4","6","8->9"]
Explanation: 2,3,4 form a continuous range; 8,9 form a continuous range.

Solution: ---------------------------------------------------------- https://www.youtube.com/watch?v=j-BUX8_1tBY
class Solution(object):
    def summaryRanges(self, nums):
        """
        :type nums: List[int]
        :rtype: List[str]
        """
        if len(nums) == 0:
            return []
        start, res = 0, []
        for i in range(1, len(nums)):                              # IMPORTANT !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
                                                                   # To go over the entire list, range(len(nums)), not range(len(nums) - 1)
            if nums[i] - 1 != nums[i - 1]:                         # Find a gap -> Two situations
                if i - 1 == start:                                 # Situation no.1: a single 
                    res.append(str(nums[start]))
                else:                                              # Situation no.2: a group
                    res.append(str(nums[start]) + "->" + str(nums[i - 1]))
                start = i
        if start == len(nums) - 1:                                 # Need to check here, because the above algorithm will 
                                                                   # miss the last group or single for the result
            res.append(str(nums[start]))
        else:
            res.append(str(nums[start]) + "->" + str(nums[len(nums) - 1]))
        return res
