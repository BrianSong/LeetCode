Given two integers n and k, return all possible combinations of k numbers out of 1 ... n.

Example:

Input: n = 4, k = 2
Output:
[
  [2,4],
  [3,4],
  [2,3],
  [1,2],
  [1,3],
  [1,4],
]

Solution: --------------------------------------------- Backtracking with index
class Solution(object):
    def combine(self, n, k):
        """
        :type n: int
        :type k: int
        :rtype: List[List[int]]
        """
        if n < 0:
            return[]
        if k <= 0:
            return[[]]
        res = []
        self.backtracking_help(n, k, 1, [], res)
        return res
     
    def backtracking_help(self, n, k, idx, path, res):
        if len(path) == k:
            res.append(path[:])
            return
        for i in range(idx, n + 1):
            self.backtracking_help(n, k, i + 1, path + [i], res) # IMPORTANT!!!!!!!!!! here should be "i + 1" instead of "idx + 1"
                                                                 # the idx need to be updated according to i instead of idx itself!!!!!

Solution no.2: -------------------------------------- Backtracking without index but creating and modifying nums
----------------------------------------------------- O(n^(k + 1)) T
----------------------------------------------------- O(k + 1) S
class Solution(object):
    def combine(self, n, k):
        """
        :type n: int
        :type k: int
        :rtype: List[List[int]]
        """
        if not n or not k:
            return None
        res = []
        self.backtracking(k, [i for i in range(1, n + 1)], [], res)
        return res
        
    def backtracking(self, k, nums, curr, res):
        if k == 0:
            res.append(curr[:])
            return
        for i in range(len(nums)):
            self.backtracking(k - 1, nums[i + 1:], curr + [nums[i]], res)
