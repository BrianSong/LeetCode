The Hamming distance between two integers is the number of positions at which the corresponding bits are different.

Now your job is to find the total Hamming distance between all pairs of the given numbers.

Example:
Input: 4, 14, 2

Output: 6

Explanation: In binary representation, the 4 is 0100, 14 is 1110, and 2 is 0010 (just
showing the four bits relevant in this case). So the answer will be:
HammingDistance(4, 14) + HammingDistance(4, 2) + HammingDistance(14, 2) = 2 + 2 + 2 = 6.
Note:
Elements of the given array are in the range of 0 to 10^9
Length of the array will not exceed 10^4.



Solution: ---------------------------------------------------------- Bit Manipulation
class Solution(object):
    def totalHammingDistance(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        res = 0
        for i in range(0, 32):                 # For each bit position 1-32 in a 32-bit integer, 
                                               # we count the number of num (bitCount) in the nums array which have that bit set == 1
            bitCount  = 0
            for num in nums:
                bitCount  += (num >> i) & 1    # By "& 1" we can get whether the rightest bit (in position 1 == idx 0) is 1 or 0
            res += bitCount  * (len(nums) - bitCount)  # why this bit contribute bitCount  * (len(nums) - bitCount) ?
                                                       # Let's imagine in 有 有 有 没有 没有, how many different combinations we can make?
                                                       # 3 * 2 = 6 right ?
        return res
