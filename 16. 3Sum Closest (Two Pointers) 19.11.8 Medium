Given an array nums of n integers and an integer target, find three integers in nums such that the sum is closest to target. 
Return the sum of the three integers. You may assume that each input would have exactly one solution.

Example:

Given array nums = [-1, 2, 1, -4], and target = 1.

The sum that is closest to the target is 2. (-1 + 2 + 1 = 2).

Solution: ---------------------------------- Two Pointers ------------------- https://www.youtube.com/watch?v=eHtHNK3Lfmw
--------------------------------------------- O(n^2) T, O(1) S
class Solution(object):
    def threeSumClosest(self, nums, target):
        if nums == [] or len(nums) == 0:
            return target
        nums.sort()                                                   # sort() is a very useful tool in two pointer problem
        delta = nums[0] + nums[1] + nums[2] - target
        for i in range(len(nums) - 2):                                 # Should be len(nums) - 2  
                                                                   # We actually use three pointer here to copy with this 3 sum problem
                                                                      # base: transverse through the whole nums
                                                                      # start and end
            start = i + 1
            end = len(nums) - 1
            while start < end:                                               # WHILE !!!!! NOT IF!!!!!!!
                newdelta = nums[i] + nums[start] + nums[end] - target
                if newdelta == 0:
                    return target
                if abs(newdelta) < abs(delta):
                    delta = newdelta
                if newdelta > 0:
                    end -= 1
                else:
                    start += 1
        return target + delta  
        """
        :type nums: List[int]
        :type target: int
        :rtype: int
        """
        
        
'''
for i in range(len(nums) - 2):
            left = i + 1
            right = len(nums) - 1
            while left < right:
                currsum = nums[i] + nums[left] + nums[right]
                currdiff = target - currsum                     # if currdiff = target - currsum
                                                                # then currsum = target - currdiff
                if currdiff == 0:
                    return target
                if abs(diff) > abs(currdiff):
                    diff = currdiff
                if currdiff > 0:
                    left += 1
                else:
                    right -= 1
        return target - diff                                  # So, here, we must return target - diff instead of target + diff !!!!!!!!
'''
