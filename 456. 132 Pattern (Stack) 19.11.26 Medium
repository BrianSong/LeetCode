Given a sequence of n integers a1, a2, ..., an, a 132 pattern is a subsequence ai, aj, ak such that i < j < k and ai < ak < aj. 
Design an algorithm that takes a list of n numbers as input and checks whether there is a 132 pattern in the list.

Note: n will be less than 15,000.

Example 1:
Input: [1, 2, 3, 4]

Output: False

Explanation: There is no 132 pattern in the sequence.
Example 2:
Input: [3, 1, 4, 2]

Output: True

Explanation: There is a 132 pattern in the sequence: [1, 4, 2].
Example 3:
Input: [-1, 3, 2, 0]

Output: True

Explanation: There are three 132 patterns in the sequence: [-1, 3, 2], [-1, 3, 0] and [-1, 2, 0].


Solution no.1: --------------------------------------- BF but TLE pass 80/95
------------------------------------------------------ O(n^3) T and O(1) S
class Solution(object):
    def find132pattern(self, nums):
        """
        :type nums: List[int]
        :rtype: bool
        """
        if not nums or len(nums) <= 2:
            return False
        for j in range(1, len(nums) - 1):                 # The i, j, k here are not guarantee to be next to each other
            for i in range(j - 1, -1, -1):
                for k in range(j + 1, len(nums)):
                    if nums[i] < nums[k] < nums[j]:
                        return True
        return False
        
Solution no.2: ----------------------------------------- Better BF but TLE pass 81/95
-------------------------------------------------------- O(n^2) T and O(1) S
class Solution(object):
    def find132pattern(self, nums):
        """
        :type nums: List[int]
        :rtype: bool
        """
        if not nums or len(nums) <= 2:
            return False
        min_i = float('inf')                            # The key is to keep the min_i along the way
        for j in range(len(nums) - 1):
            min_i = min(min_i, nums[j]) 
            for k in range(j + 1, len(nums)):
                if min_i < nums[k] < nums[j]:           # Then, we just need to find if there exist nums[k] that lays between
                                                        # min_i and nums[j]
                        return True
        return False
        
        
Solution no.3: ------------------------------------------ Stack
-------------------------------------------------------- O(n) T and O(n) S
class Solution(object):
    def find132pattern(self, nums):
        """
        :type nums: List[int]
        :rtype: bool
        """
        if not nums or len(nums) <= 2:
            return False
        stack, s3 = [], float('-inf')
        for num in nums[::-1]:                        # Go from right to left
            if num < s3:                              # Means there is a valid (s2, s3) and we just find s1
                return True
            while stack and stack[-1] < num:          # The num here is the s2 candidate and all the element in stack is s3 candidate
                s3 = stack.pop()                      # We want to find the maximum of s3 => so that s1 can has a higher chance to < s3
                                                      # and we can because the stack now is ordered from largest to smallest
                                                      # because we pop out element that is smaller than the num 
                                                      # before we append it to the stack
            stack.append(num)
        return False
