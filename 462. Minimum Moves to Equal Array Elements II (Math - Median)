Given a non-empty integer array, find the minimum number of moves required to make all array elements equal, 
where a move is incrementing a selected element by 1 or decrementing a selected element by 1.

You may assume the array's length is at most 10,000.

Example:

Input:
[1,2,3]

Output:
2

Explanation:
Only two moves are needed (remember each move increments or decrements one element):

[1,2,3]  =>  [2,2,3]  =>  [2,2,2]


Solution:
'''
Actually, the goal of this problem is to find a num that makes the sum of moves is minimum.
If we choose a num X that:

half of the nums in the array are bigger than it.
half of the nums in the array are smaller than it.
That would be the best num.

For example: 1 2 3 4 5 6
We will choose 3 instead of 1
because, for 3, every path from the left will not overlap from the paths from the right
however, for 1, overlap will be created and this means waste and more total steps

example 1:
[0,2,6]
Average = 4, there are 1 num bigger than Average but 2 nums smaller than the Average.
Median = 2, meet the requirements of X

example 2
[0,2,4,14]
Average = 5, there are 1 num bigger than Average but 3 nums smaller than the Average.
Median = 3, meet the requirements of X

when the relative deviation is larger, median is more effective as we can see in the examples.
'''
class Solution(object):
    def minMoves2(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        median = sorted(nums)[len(nums) / 2]
        return sum(abs(num - median) for num in nums)
