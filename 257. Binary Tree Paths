Given a binary tree, return all root-to-leaf paths.

Note: A leaf is a node with no children.

Example:

Input:

   1
 /   \
2     3
 \
  5

Output: ["1->2->5", "1->3"]

Explanation: All root-to-leaf paths are: 1->2->5, 1->3

# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution(object):
    def binaryTreePaths(self, root):
        self.res = []                                       # Use a global variable to make sure "pass by reference" will not bother me
        currpath = ""
        self.dfs(root, [], "")
        return self.res
        """
        :type root: TreeNode
        :rtype: List[str]
        """
    def dfs(self, root, res, currpath):                     # Cannot use self.res as an argument here, it must be res
        if not root is None:
            currpath += str(root.val) + "->"
            if root.left is None and root.right is None:
                self.res.append(currpath[:-2])
            else:
                self.dfs(root.left, self.res, currpath)
                self.dfs(root.right, self.res, currpath)
