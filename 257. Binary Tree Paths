Given a binary tree, return all root-to-leaf paths.

Note: A leaf is a node with no children.

Example:

Input:

   1
 /   \
2     3
 \
  5

Output: ["1->2->5", "1->3"]

Explanation: All root-to-leaf paths are: 1->2->5, 1->3

Solution: ------------------------------------------------------------ DFS
------------------------------------------------------------ O(n) T, O(n) S
# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution(object):
    def binaryTreePaths(self, root):
        """
        :type root: TreeNode
        :rtype: List[str]
        """
        if not root:
            return None
        res = []
        self.dfs(root, "", res)
        return res
    
    def dfs(self, root, currpath, res):
        if not root.left and not root.right:
            currpath += str(root.val) + "->"                                     # Remember to also update currpath here !!!!!!!!
            res.append(currpath[:-2])
        if root.left:
            self.dfs(root.left, currpath + str(root.val) + "->", res)            # By currpath + str(root.val) + "->"
                                                                                 # instead of currpath + "->" + str(root.val),
                                                                                 # We can just savely remove the last two characters
                                                                                 # without doing more condition decision
        if root.right: 
            self.dfs(root.right, currpath + str(root.val) + "->", res)
