Given n, how many structurally unique BST's (binary search trees) that store values 1 ... n?

Example:

Input: 3
Output: 5
Explanation:
Given n = 3, there are a total of 5 unique BST's:

   1         3     3      2      1
    \       /     /      / \      \
     3     2     1      1   3      2
    /     /       \                 \
   2     1         2                 3

Solution: DP
'''
When the question asks us to return only a value or boolean instead of the specific result,
Dynamic Programming should be considered immediately!!!!!!!!!!!!!!!!!!!!
'''

class Solution(object):
    def numTrees(self, n):
        nums = [0] * (n + 1)                      # Step 1: Status variable num[], num[n] record the number of 
        # n + 1 since there is one 0              # how many structurally unique BST's (binary search trees) that store values 1 ... n
        nums[0], nums[1] = 1, 1                   # Step 2: Initialization
        '''
        How to come up with this transformation function:
        For n = 0 and 1, we know num[n] = 1(we assume num[0] = 1 for later's sake)
        for n = 2
        (2):
            1      2
           / \    / \
         (0) (1)(1) (0)
         1  * 1  1 * 1
            1   +  1    = 2
        for n = 3
        (3):
            1      2       3
           / \    / \     / \
         (0) (2)(1) (1) (2)  (0)
         1  * 2  1 * 1   2  * 1
            2   +  1    +  2    =  5
        ...
        So, we know that     (n)
                            /   \
                           0    n-1      j = 0
                           1   n-1-j     j = 1
                          ...   ...      j = 2
                          ...   ...      ...
                          n-1    0       j = n-1 
                          So, the transformation function is Î£(j=0~n-1) [j]*[n-1-j]
        '''
        for i in range(2, len(nums)):
            for j in range(i):
                nums[i] += nums[j]*nums[i-j-1]    # Step 3
        return nums[n]                            # Step 4
                
        """
        :type n: int
        :rtype: int
        """
