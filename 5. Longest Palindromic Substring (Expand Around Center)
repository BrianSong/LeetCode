Given a string s, find the longest palindromic substring in s. You may assume that the maximum length of s is 1000.

Example 1:

Input: "babad"
Output: "bab"
Note: "aba" is also a valid answer.
Example 2:

Input: "cbbd"
Output: "bb"

Solution:
'''
we could solve it in O(n^2) time using only constant space.

We observe that a palindrome mirrors around its center. Therefore, a palindrome can be expanded from its center, 
and there are only 2n - 12n−1 such centers.

You might be asking why there are 2n - 12n−1 but not nn centers? 
The reason is the center of a palindrome can be in between two letters. 
Such palindromes have even number of letters (such as "abba") and its center are between the two 'b's.
'''
class Solution(object):
    def longestPalindrome(self, s):
        """
        :type s: str
        :rtype: str
        """
        if not s or len(s) < 1:
            return ""
        start, end = 0, 0
        for i in range(len(s)):
            len1 = self.FindExpandLength(s, i, i)       # When the center is in s[i]
            len2 = self.FindExpandLength(s, i, i + 1)   # When the center is between s[i] and s[i + 1]
            length = max(len1, len2)
            if length > end - start + 1:
                start = i - (length - 1) / 2            # Why here is "start = i - (length - 1) / 2"
                                                        # instead of "start = i - length / 2" ??
                                                        # Because when the length is even and center is between s[i] and s[i - 1]
                                                        # the start should just be in the left of the i -> i - (length - 1) / 2
                                                        # instead of i - 2 -> i - length / 2
                end = i + length / 2
        return s[start:end + 1]
    
    def FindExpandLength(self, s, left, right):
        while left >= 0 and right < len(s) and s[left] == s[right]:
            left -= 1
            right += 1
        return (right - 1) - (left + 1) + 1             # Why this?
                                                        # because after break from the while loop, 
                                                        # the left and right has already been updated to left = left - 1
                                                        # and right = right + 1, however, what we want is the original left and right
                                                        # instead of these new left and right
