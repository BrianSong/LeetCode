Given a 2D board containing 'X' and 'O' (the letter O), capture all regions surrounded by 'X'.

A region is captured by flipping all 'O's into 'X's in that surrounded region.

Example:

X X X X
X O O X
X X O X
X O X X
After running your function, the board should be:

X X X X
X X X X
X X X X
X O X X
Explanation:

Surrounded regions shouldn’t be on the border, which means that any 'O' on the border of the board are not flipped to 'X'. 
Any 'O' that is not on the border and it is not connected to an 'O' on the border will be flipped to 'X'. 
Two cells are connected if they are adjacent cells connected horizontally or vertically.


Solution: ------------------------------------ BFS + Queue
---------------------------------------------- O(n) T, O(n) S
---------------------------------------------- 非常好的逆向思维的题，与其从中间的那些'O'入手，我们不如从边界上的那些'O'入手，找出所有与边界上的
---------------------------------------------- 'O'相连的'O'，并把它们标记为'C'（即不会被改变的'O'），其他那些没被connected的'O'就会被转化为'X'
class Solution(object):
    def solve(self, board):
        """
        :type board: List[List[str]]
        :rtype: None Do not return anything, modify board in-place instead.
        """
        queue = []
        for i in range(len(board)):
            for j in range(len(board[0])):
                if (i == 0 or i == len(board) - 1 or j == 0 or j == len(board[0]) - 1) and board[i][j] == 'O':
                    queue.append((i, j))
        while queue:
            r, c = queue.pop(0)
            if 0 <= r < len(board) and 0 <= c < len(board[0]) and board[r][c] == 'O':
                board[r][c] = 'C'                                                         # The 'O's that are connected to the 'O's 
                                                                                          # on the boundary will be transform to 'C'
                                                                                          # and remain as 'O' in the end
                                                                                          # And the 'O' that are separated from the 'O'
                                                                                          # in the boundary will be disconnected and
                                                                                          # transform to 'X'
                queue.append((r + 1, c))
                queue.append((r - 1, c))
                queue.append((r, c + 1))
                queue.append((r, c - 1))
        for i in range(len(board)):
            for j in range(len(board[0])):
                if board[i][j] == 'C':
                    board[i][j] = 'O'
                elif board[i][j] == 'O':                                                  # Must be 'elif' instead of 'if' here
                                                                                          # Because if remain 'if',
                                                                                          # those 'O' we transform from the 'C'
                                                                                          # will be turned into 'X' immediately
                    board[i][j] = 'X'


Java Version:
class Solution {
    public void solve(char[][] board) {
        int m = board.length;
        int n = m == 0 ? 0 : board[0].length;
        Queue<int[]> q = new LinkedList<>();
        for (int j = 0; j < n; j ++) {
            if (board[0][j] == 'O') {
                q.add(new int[] {0, j});
            }
            if (board[m - 1][j] == 'O') {
                q.add(new int[] {m - 1, j});
            }
        }
        for (int i = 1; i < m - 1; i ++) {
            if (board[i][0] == 'O') {
                q.add(new int[] {i, 0});
            }
            if (board[i][n - 1] == 'O') {
                q.add(new int[] {i, n - 1});
            }
        }
        
        
        while (q.size() != 0) {
            int[] currLoc = q.poll();
            board[currLoc[0]][currLoc[1]] = '*';
            for (int[] dir : new int[][] {{1, 0}, {-1, 0}, {0, 1}, {0, -1}}) {
                int next_r = currLoc[0] + dir[0];
                int next_c = currLoc[1] + dir[1];
                if ( 0 <= next_r && next_r < m && 0 <= next_c && next_c < n && board[next_r][next_c] == 'O') {
                    q.add(new int[] {next_r, next_c});
                }
            }
        }
        
        
        for (int i = 0; i < m; i ++) {
            for (int j = 0; j < n; j ++) {
                if (board[i][j] == '*') {
                    board[i][j] = 'O';
                } else if (board[i][j] == 'O') {
                    board[i][j] = 'X';
                }
            }
        }
    }
}
