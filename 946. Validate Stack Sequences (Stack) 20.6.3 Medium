Given two sequences pushed and popped with distinct values, return true if and only if this could have been the result of a sequence of push and pop operations on an initially empty stack.

 

Example 1:

Input: pushed = [1,2,3,4,5], popped = [4,5,3,2,1]
Output: true
Explanation: We might do the following sequence:
push(1), push(2), push(3), push(4), pop() -> 4,
push(5), pop() -> 5, pop() -> 3, pop() -> 2, pop() -> 1
Example 2:

Input: pushed = [1,2,3,4,5], popped = [4,3,5,1,2]
Output: false
Explanation: 1 cannot be popped before 2.
 

Note:

0 <= pushed.length == popped.length <= 1000
0 <= pushed[i], popped[i] < 1000
pushed is a permutation of popped.
pushed and popped have distinct values.


Solution: O(n) T and S
class Solution(object):
    def validateStackSequences(self, pushed, popped):
        """
        :type pushed: List[int]
        :type popped: List[int]
        :rtype: bool
        """
        stack = []
        push_index, pop_index = 0, 0
        while push_index < len(pushed) or pop_index < len(popped):
            if not stack:
                stack.append(pushed[push_index])
                push_index += 1
            if popped[pop_index] != stack[-1]:
                if push_index < len(pushed):
                    stack.append(pushed[push_index])
                    push_index += 1
                else:
                    return False
            else:
                stack.pop()
                pop_index += 1
        return True
        
        
C++ Version:
class Solution {
public:
    bool validateStackSequences(vector<int>& pushed, vector<int>& popped) {
        stack<int> stack {};
        int push_index = 0, pop_index = 0;
        while (push_index < pushed.size() || pop_index < popped.size()) {
            if (stack.size() == 0) {
                stack.push(pushed[push_index]);
                push_index ++;
            }
            if (popped[pop_index] != stack.top()) {
                if (push_index < pushed.size()) {
                    stack.push(pushed[push_index]);
                    push_index ++;
                } else {
                    return false;
                }
            } else {
                stack.pop();
                pop_index ++;
            }
        }
        return true;
    }
};
