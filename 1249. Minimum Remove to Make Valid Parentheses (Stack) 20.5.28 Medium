Given a string s of '(' , ')' and lowercase English characters. 

Your task is to remove the minimum number of parentheses ( '(' or ')', in any positions ) 
so that the resulting parentheses string is valid and return any valid string.

Formally, a parentheses string is valid if and only if:

It is the empty string, contains only lowercase characters, or
It can be written as AB (A concatenated with B), where A and B are valid strings, or
It can be written as (A), where A is a valid string.
 

Example 1:

Input: s = "lee(t(c)o)de)"
Output: "lee(t(c)o)de"
Explanation: "lee(t(co)de)" , "lee(t(c)ode)" would also be accepted.
Example 2:

Input: s = "a)b(c)d"
Output: "ab(c)d"
Example 3:

Input: s = "))(("
Output: ""
Explanation: An empty string is also valid.
Example 4:

Input: s = "(a(b(c)d)"
Output: "a(b(c)d)"
 

Constraints:

1 <= s.length <= 10^5
s[i] is one of  '(' , ')' and lowercase English letters.



Solution: O(n) T and S
class Solution(object):
    def minRemoveToMakeValid(self, s):
        """
        :type s: str
        :rtype: str
        """
        stack = []
        invalid = set()
        res = []
        for i, c in enumerate(s):
            if c.isalpha():
                continue
            elif c == '(':
                stack.append(i)
            elif c == ')':
                if not stack:
                    invalid.add(i)
                else:
                    stack.pop()
        for invalid_index in stack:
            invalid.add(invalid_index)
        for i, c in enumerate(s):
            if i in invalid:
                continue
            else:
                res.append(c)
        return "".join(res)
        
        
C++ Version:
class Solution {
public:
    string minRemoveToMakeValid(string s) {
        stack<int> stack {};
        set<int> invalid {};
        vector<char> res {};
        for (int i = 0; i < s.size(); ++i) {
            if (isalpha(s[i])) {
                continue;
            } else if (s[i] == '(') {
                stack.push(i);
            } else if (s[i] == ')') {
                if (stack.size() == 0) {
                    invalid.insert(i);
                } else {
                    stack.pop();
                }
            }
        }
        while (stack.size() != 0) {
            int pop_index = stack.top();
            stack.pop();
            invalid.insert(pop_index);
            
        }
        for (int i = 0; i < s.size(); ++i) {
            if (invalid.find(i) != invalid.end()) {
                continue;
            } else {
                res.push_back(s[i]);
            }
        }
        string res_s(res.begin(), res.end());
        return res_s;
    }
};
