Given an array of integers and an integer k, find out whether there are two distinct indices i and j in the array 
such that nums[i] = nums[j] and the absolute difference between i and j is at most k.

Example 1:

Input: nums = [1,2,3,1], k = 3
Output: true
Example 2:

Input: nums = [1,0,1,1], k = 1
Output: true
Example 3:

Input: nums = [1,2,3,1,2,3], k = 2
Output: false

Solution: -------------------------------------------------------- HashTable
------------------------------------------------------------------ O(n) T, O(n) S
class Solution(object):
    def containsNearbyDuplicate(self, nums, k):
        """
        :type nums: List[int]
        :type k: int
        :rtype: bool
        """
        if not nums or not k:
            return False
        HashTable = {}
        for i, num in enumerate(nums):
            if num in HashTable:
                if i - HashTable[num] <= k:             # Only satisfy all of these two "if", can we return True,
                                                        # otherwise, return False for all other cases
                    return True
            HashTable[num] = i                          # IMPORTANT !!!!!!!!!!!!!!!! HashTable[num] must be assign to the new i
                                                        # in every new iteration !!!!!!!!! no matter whether num in HashTable or not !!
                                                        # We can just assign, because the value goes from small to big, and we are only
                                                        # concern the current index. As long as the requirements are meeted, we can 
                                                        # finish the loop, otherwise, we update the value and continue. The previous is
                                                        # not important, because if the current index cannot satisfy, the previous 
                                                        # cannot either. (the value must goes from small to big)
        return False
