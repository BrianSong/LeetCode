Given an array of integers and an integer k, find out whether there are two distinct indices i and j in the array 
such that nums[i] = nums[j] and the absolute difference between i and j is at most k.

Example 1:

Input: nums = [1,2,3,1], k = 3
Output: true
Example 2:

Input: nums = [1,0,1,1], k = 1
Output: true
Example 3:

Input: nums = [1,2,3,1,2,3], k = 2
Output: false

Solution no.1(my own):
class Solution(object):
    def containsNearbyDuplicate(self, nums, k):
        dic = {}
        for i, item in enumerate(nums):
            dic[item] = dic.get(item, []) + [i]
        for item in dic.values():
            if len(item) > 1:
                for i in range(len(item) - 1):
                    if item[i + 1] - item[i] <= k:
                        return True
        return False   
        """
        :type nums: List[int]
        :type k: int
        :rtype: bool
        """
Solution no.2: Much more concise version
class Solution(object):
    def containsNearbyDuplicate(self, nums, k):
        dic = {}
        for i, number in enumerate(nums):
            if number in dic and i - dic[number] <= k:  # We can compare the absolute difference with k right here
                return True
            else:
                dic[number] = i                         # We can just assign, because the value goes from small to big, and we are only
                                                        # concern the current index. As long as the requirements are meeted, we can 
                                                        # finish the loop, otherwise, we update the value and continue. The previous is
                                                        # not important, because if the current index cannot satisfy, the previous 
                                                        # cannot either. (the value must goes from small to big)
        return False
        """
        :type nums: List[int]
        :type k: int
        :rtype: bool
        """
