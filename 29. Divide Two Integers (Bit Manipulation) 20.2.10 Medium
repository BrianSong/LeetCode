Given two integers dividend and divisor, divide two integers without using multiplication, division and mod operator.

Return the quotient after dividing dividend by divisor.

The integer division should truncate toward zero.

Example 1:

Input: dividend = 10, divisor = 3
Output: 3
Example 2:

Input: dividend = 7, divisor = -3
Output: -2
Note:

Both dividend and divisor will be 32-bit signed integers.
The divisor will never be 0.
Assume we are dealing with an environment which could only store integers within the 32-bit signed integer range: [−231,  231 − 1]. 
For the purpose of this problem, assume that your function returns 231 − 1 when the division result overflows.


Solution: ------------------------------------- Bit Manipulation -------------------------- https://www.youtube.com/watch?v=uD1Cw1JbD8E
----------------------------------------------- O((logn)^2) T, O(1) S
class Solution(object):
    def divide(self, dividend, divisor):
        """
        :type dividend: int
        :type divisor: int
        :rtype: int
        """
        positive = (dividend < 0) == (divisor < 0)                  # Necessary check before doing division or mod in python
        dividend, divisor = abs(dividend), abs(divisor)             # Must remember to convert them into abs values
        res = 0
        while dividend >= divisor:
            temp, i = divisor, 1                                    # Create a temp variable because we shouldn't change divisor's value
                                                                    # i here means the current times divisor has been multiplied by
                                                                    # i starts by 1 instead of 2 because we can only ensure
                                                                    # dividend >= temp * 1 for now
            while dividend >= temp:
                dividend -= temp                                    # Update the dividend !!!!!!!!!!! It is keep decreasing !!!!
                res += i
                i <<= 1                                             # i <<= 1 is the same as i *= 2
                                                                    # We do this because multiplication is banned in this question
                temp <<= 1
        if not positive:
            res = - res
        return min(max(-2147483648, res), 2147483647)               # Prevent overflow for int type variables


Java Version:
class Solution {
    public int divide(int dividend, int divisor) {
        if (dividend == Integer.MIN_VALUE && divisor == -1) {
            return Integer.MAX_VALUE;
        }
        
        int a = Math.abs(dividend);
        int b = Math.abs(divisor);
        int res = 0;
        
        while (a - b >= 0) {
            int x = 0;                                      # x here means how many times we can double the b in the current while loop
                                                            # when x == 0, it means no double, just one b
            while (a - (b << 1 << x) >= 0) {
                x ++;
            }
            
            res += 1 << x;
            a -= b << x;
        }
        
        return (dividend >= 0) == (divisor >= 0) ? res : -res;
    }
}
