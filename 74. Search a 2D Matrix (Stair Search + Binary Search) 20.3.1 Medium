Write an efficient algorithm that searches for a value in an m x n matrix. This matrix has the following properties:

Integers in each row are sorted from left to right.
The first integer of each row is greater than the last integer of the previous row.
Example 1:

Input:
matrix = [
  [1,   3,  5,  7],
  [10, 11, 16, 20],
  [23, 30, 34, 50]
]
target = 3
Output: true
Example 2:

Input:
matrix = [
  [1,   3,  5,  7],
  [10, 11, 16, 20],
  [23, 30, 34, 50]
]
target = 13
Output: false

Solution no.1: -------------------------- Stair Search --------------------------------- the same as 240. Search a 2D Matrix II
----------------------------------------- O(m*n) T, O(1) S
class Solution(object):
    def searchMatrix(self, matrix, target):
        """
        :type matrix: List[List[int]]
        :type target: int
        :rtype: bool
        """
        if matrix is None or len(matrix) == 0 or len(matrix[0]) == 0:
            return False
        m, n = len(matrix) - 1, len(matrix[0]) - 1
        if target > matrix[m][n] or target < matrix[0][0]:
            return False
        i, j = 0, n
        while i <= m and j >= 0:
            if matrix[i][j] > target:
                j -= 1
            elif matrix[i][j] < target:
                i += 1
            else:
                return True
        return False
        
Solution no.2: -------------------------------------------------- Binary Search
------------------------------------------------------------ O(log(m*n)) T, O(1) S
class Solution(object):
    def searchMatrix(self, matrix, target):
        """
        :type matrix: List[List[int]]
        :type target: int
        :rtype: bool
        """
        if not matrix or len(matrix) == 0 or len(matrix[0]) == 0 or target is None:
            return False
        m, n = len(matrix), len(matrix[0])        # m, n should be len(matrix), len(matrix[0]) 
                                                  # instead of len(matrix) - 1, len(matrix[0]) - 1 here
        low, high = 0, m * n - 1                  # Like convert the matrix into a sorted linked list
                                                  # Make use of "The first integer of each row is greater than 
                                                  # the last integer of the previous row."
        while low <= high:
            mid = (low + high) / 2
            num = matrix[mid / n][mid % n]        # The KEY !!!!!!!!!!!!!!!!!!!!!!! num = matrix[mid / n][mid % n]
            if num > target:
                high = mid - 1
            elif num < target:
                low = mid + 1
            else:
                return True
        return False 


Java Version:
class Solution {
    public boolean searchMatrix(int[][] matrix, int target) {
        if (matrix == null || matrix.length == 0 || matrix[0].length == 0) {
            return false;
        }
        int m = matrix.length, n = matrix[0].length;
        int left = 0, right = m * n - 1;
        int currNum, mid;
        while (left <= right) {
            mid = left + (right - left) / 2;
            currNum = matrix[mid / n][mid % n];
            if (currNum == target) {
                return true;
            } else if (currNum > target) {
                right = mid - 1;
            } else {
                left = mid + 1;
            }
        }
        return false;
    }
}
