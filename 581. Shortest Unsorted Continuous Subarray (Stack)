Given an integer array, you need to find one continuous subarray that if you only sort this subarray in ascending order, 
then the whole array will be sorted in ascending order, too.

You need to find the shortest such subarray and output its length.

Example 1:
Input: [2, 6, 4, 8, 10, 9, 15]
Output: 5
Explanation: You need to sort [6, 4, 8, 10, 9] in ascending order to make the whole array sorted in ascending order.
Note:
Then length of the input array is in range [1, 10,000].
The input array may contain duplicates, so ascending order here means <=.



Solution: ---------------------------------------------------- Stack
class Solution(object):
    def findUnsortedSubarray(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        stack = []                                                   # We need to determine the correct position of the minimum 
                                                                     # and the maximum element in the unsorted subarray 
                                                                     # to determine the boundaries of the required unsorted subarray.
                                                                     # To do so, in this implementation, we make use of a stack. 
        leftbound, rightbound = float('inf'), -float('inf')
        for i in range(len(nums)):                                   # We traverse over the nums array starting from the beginning.
            while len(stack) != 0 and nums[stack[-1]] > nums[i]:     # As we go on facing elements in ascending order(a rising slope), 
                                                                     # we keep on pushing the elements' indices over the stack. 
                                                                     # This is done because such elements are in the correct 
                                                                     # sorted order(as it seems till now). 
                                                                     # As soon as we encounter a falling slope, 
                                                                     # i.e. an element nums[j] which is smaller than the element 
                                                                     # on the top of the stackstack, we know that nums[j] 
                                                                     # isn't at its correct position.
                leftbound = min(leftbound, stack.pop())              # In order to determine the correct position of nums[j], 
                                                                     # we keep on popping the elemnents from the top of the stack 
                                                                     # until we reach the stage where the element
                                                                     # (corresponding to the index) on the top of the stackstack is 
                                                                     # lesser than nums[j]. 
                                                                     # Let's say the popping stops when the index on stacks's top is k. 
                                                                     # Now, nums[j] has found its correct position. 
                                                                     # It needs to lie at an index k + 1.
            stack.append(i)
        stack = []
        for i in range(len(nums) - 1, -1, -1):                       # Similarly, We follow the same process
                                                                     # to find the right boundary of the unsorted subarray
            while len(stack) != 0 and nums[stack[-1]] < nums[i]:
                rightbound = max(rightbound, stack.pop())
            stack.append(i)
        if leftbound < rightbound:
            return rightbound - leftbound + 1
        else:
            return 0
