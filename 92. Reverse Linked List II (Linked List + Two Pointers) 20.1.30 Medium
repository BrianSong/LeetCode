Reverse a linked list from position m to n. Do it in one-pass.

Note: 1 ≤ m ≤ n ≤ length of list.

Example:

Input: 1->2->3->4->5->NULL, m = 2, n = 4
Output: 1->4->3->2->5->NULL

Solution: ---------------------------- Two Pointers ---------------------------------- https://www.youtube.com/watch?v=esl_A_pzBcg
-------------------------------------- O(n) T since we process all the nodes at-most twice, O(1) S
# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution(object):
    def reverseBetween(self, head, m, n):
        """
        :type head: ListNode
        :type m: int
        :type n: int
        :rtype: ListNode
        """
        if not head or m > n:
            return None
        dummy = ListNode(0)
        dummy.next = head
        prev, left = dummy, head
        for i in range(m - 1):
            left = left.next
            prev = prev.next
        right = left
        for i in range(n - m):
            right = right.next
        while left != right:                                 # 把 left node 插入 right node 的后面，直到他们重合
            prev.next = left.next
            left.next = right.next
            right.next = left
            left = prev.next
        return dummy.next

Java Version:
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
class Solution {
    public ListNode reverseBetween(ListNode head, int m, int n) {
        if (head == null || m > n) {
            return null;
        }
        
        ListNode dummyNode = new ListNode(0);
        dummyNode.next = head;
        ListNode prevNode = dummyNode;
        
        ListNode leftNode = head;
        
        for (int i = 0; i < m - 1; i ++) {
            leftNode = leftNode.next;
            prevNode = prevNode.next;
        }
        
        ListNode rightNode = leftNode;
        
        for (int j = 0; j < n - m; j ++) {
            rightNode = rightNode.next;
        }
        
        while (leftNode != rightNode) {
            prevNode.next = leftNode.next;
            leftNode.next = rightNode.next;
            rightNode.next = leftNode;
            leftNode = prevNode.next;
        }    
        
        return dummyNode.next;
        
    }
}
