Given a binary tree, return the postorder traversal of its nodes' values.

Example:

Input: [1,null,2,3]
   1
    \
     2
    /
   3

Output: [3,2,1]
Follow up: Recursive solution is trivial, could you do it iteratively?

Solution no.1: ------------------------------------------------------ DFS
---------------------------------------------------- O(n) T, O(n) S
class Solution(object):
    def postorderTraversal(self, root):
        res = []
        self.traver_help(res, root)
        return res
        """
        :type root: TreeNode
        :rtype: List[int]
        """
    def traver_help(self, res, root):
        if not root is None:
            self.traver_help(res, root.left)
            self.traver_help(res, root.right)
            res.append(root.val)

'''
Tomorrow is midterm,
So just refresh the resursion solution for DFS traversal,
the iterative solution will be followed up later on.
'''

Solution no.2: ---------------------------------------------------- Stack in modified pre-order
---------------------------------------------------- O(n) T, O(n) S
# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution(object):
    def postorderTraversal(self, root):
        """
        :type root: TreeNode
        :rtype: List[int]
        """
        if not root:
            return None
        stack, res = [root], []
        while stack:
            pop_element = stack.pop()
            res.append(pop_element.val)
            if pop_element.left:                        # In pre-order, we append right first
                                                        # The reason to append left first is, preorder and postorder is not in reverse
                                                        # Only the modified preorder (append right first) is in reverse with postorder
                stack.append(pop_element.left)         
            if pop_element.right:
                stack.append(pop_element.right)
        return res[::-1]                                # Reverse the res


Java Version:
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public List<Integer> postorderTraversal(TreeNode root) {
        List<Integer> res = new ArrayList<>();
        if (root == null) {
            return res;
        }
        dfs(root, res);
        return res;
    }
    
    public void dfs(TreeNode root, List<Integer> res) {
        if (root == null) {
            return;
        }
        dfs(root.left, res);
        dfs(root.right, res);
        res.add(root.val);
    }
}
