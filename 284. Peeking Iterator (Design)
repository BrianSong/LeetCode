Given an Iterator class interface with methods: next() and hasNext(), 
design and implement a PeekingIterator that support the peek() operation -- 
it essentially peek() at the element that will be returned by the next call to next().

Example:

Assume that the iterator is initialized to the beginning of the list: [1,2,3].

Call next() gets you 1, the first element in the list.
Now you call peek() and it returns 2, the next element. Calling next() after that still return 2. 
You call next() the final time and it returns 3, the last element. 
Calling hasNext() after that should return false.
Follow up: How would you extend your design to be generic and work with all types, not just integer?

Solution:
# Below is the interface for Iterator, which is already defined for you.     # We will use this in the init()
#
# class Iterator(object):
#     def __init__(self, nums):
#         """
#         Initializes an iterator object to the beginning of a list.
#         :type nums: List[int]
#         """
#
#     def hasNext(self):
#         """
#         Returns true if the iteration has more elements.
#         :rtype: bool
#         """
#
#     def next(self):
#         """
#         Returns the next element in the iteration.
#         :rtype: int
#         """

class PeekingIterator(object): ------------------------------------------------------- Design
    def __init__(self, iterator):
        self.iter = iterator
        self.temp = self.iter.next() if self.iter.hasNext() else None       # Store the next value outside the iterator
                                                                            # because we want to cache the next element.
                                                                            # When next is called return the stored value 
                                                                            # and populate with next value from iterator.
        """
        Initialize your data structure here.
        :type iterator: Iterator
        """
        

    def peek(self):
        return self.temp
        """
        Returns the next element in the iteration without advancing the iterator.
        :rtype: int
        """
        

    def next(self):                                                        # after calling next(), self.temp need to be updated
        ret = self.temp
        self.temp = self.iter.next() if self.iter.hasNext() else None      # Update the self.temp HERE !!!! IMPORTANT
                                                                           # The difference between peek() and next() is that
                                                                           # We do not call self.iter.next in peek() !!
                                                                           # A = B IF C ELSE D
                                                                           # if C: A = B, else A = D
        return ret                                                         # We can just return the ret (previous self.temp) here
        """
        :rtype: int
        """
        

    def hasNext(self):
        return self.temp != None
        """
        :rtype: bool
        """
        

# Your PeekingIterator object will be instantiated and called as such:
# iter = PeekingIterator(Iterator(nums))
# while iter.hasNext():
#     val = iter.peek()   # Get the next element but not advance the iterator.
#     iter.next()         # Should return the same value as [val].
