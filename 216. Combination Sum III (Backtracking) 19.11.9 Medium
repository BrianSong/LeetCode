Find all possible combinations of k numbers that add up to a number n, 
given that only numbers from 1 to 9 can be used and each combination should be a unique set of numbers.

Note:

All numbers will be positive integers.
The solution set must not contain duplicate combinations.
Example 1:

Input: k = 3, n = 7
Output: [[1,2,4]]
Example 2:

Input: k = 3, n = 9
Output: [[1,2,6], [1,3,5], [2,3,4]]

Solution no.1: -------------------------------------- Backtracking with index
class Solution(object):
    def combinationSum3(self, k, n):
        res = []
        self.combin_help(k, n, 0, [], res, range(1, 10))                     # DIFINE THE INPUT ARGUMENT DIRECTLY 
        return res
    
    def combin_help(self, k, n, index, path, res, nums):
        if n < 0:                                                            # Set the exit condition outside the for loop! GREAT!
            return                                                           # Break is used to end loops 
                                                                             # while return is used to end a function and return a value
        if len(path) == k and n == 0:
            res.append(path)
            return
        for i in range(index, len(nums)):                                    # Always remember to include a index for backtracking  
                                                                             # to know the current position
            self.combin_help(k, n-nums[i], i + 1, path+[nums[i]], res, nums) # VERY VERY SMART path + []
                                                                             # This way we do not need a clist for this problem 
                                                                             # or any pop()
                                                                             

Solution no.2: -------------------------------------- Backtracking without index but modify the input nums
----------------------------------------------------- O(k^(k + 1)) T, where k == 9, we can make 9 decision at each level
----------------------------------------------------- and the maximum recursion depth is 9 + 1
----------------------------------------------------- O(k + 1) S
class Solution(object):
    def combinationSum3(self, k, n):
        """
        :type k: int
        :type n: int
        :rtype: List[List[int]]
        """
        if not n:
            return None
        res = []
        nums = [i for i in range(1, 10)]
        self.backtracking(k, n, nums, [], res)
        return res
    
    def backtracking(self, k, n, nums, curr, res):
        if k == 0 and n == 0:
            res.append(curr[:])
            return
        if k <= 0 or n <= 0:
            return 
        for i in range(len(nums)):
            self.backtracking(k - 1, n - nums[i], nums[i + 1:], curr + [nums[i]], res)
