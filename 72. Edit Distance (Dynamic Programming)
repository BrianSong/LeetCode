Given two words word1 and word2, find the minimum number of operations required to convert word1 to word2.

You have the following 3 operations permitted on a word:

Insert a character
Delete a character
Replace a character
Example 1:

Input: word1 = "horse", word2 = "ros"
Output: 3
Explanation: 
horse -> rorse (replace 'h' with 'r')
rorse -> rose (remove 'r')
rose -> ros (remove 'e')
Example 2:

Input: word1 = "intention", word2 = "execution"
Output: 5
Explanation: 
intention -> inention (remove 't')
inention -> enention (replace 'i' with 'e')
enention -> exention (replace 'n' with 'x')
exention -> exection (replace 'n' with 'c')
exection -> execution (insert 'u')



Solution: ---------------------------------- Dynamic Programming -------------------------- https://www.youtube.com/watch?v=Uv9dNpHlSY4
class Solution(object):
    def minDistance(self, word1, word2):
        """
        :type word1: str
        :type word2: str
        :rtype: int
        """
        dp = [[0 for j in range(len(word2) + 1)] for i in range(len(word1) + 1)]   # Step no.1: dp[i][j] means the minimum number 
                                                                                   # of operations required to convert word1[:i] 
                                                                                   # to word2[:j] (not including i, j)
                                                                                   # Step no.2:
        for i in range(1, len(word1) + 1):                                         # if not s2: all delete operations
            dp[i][0] = i
        for j in range(1, len(word2) + 1):                                         # if not s1: all insert operations
            dp[0][j] = j
        for i in range(1, len(word1) + 1):                                         # Step no.3: Transform function
            for j in range(1, len(word2) + 1):
                if word1[i - 1] == word2[j - 1]:                                          
                    dp[i][j] = min(dp[i - 1][j - 1], dp[i - 1][j] + 1, dp[i][j - 1] + 1)
                else:
                    dp[i][j] = min(dp[i - 1][j - 1] + 1, dp[i - 1][j] + 1, dp[i][j - 1] + 1)
                    # The only difference between word1[i - 1] == word2[j - 1] and word1[i - 1] != word2[j - 1]
                    # is to also add 1 to dp[i - 1][j - 1] => one more replace operation
        return dp[-1][-1]
