Given two strings s and t , write a function to determine if t is an anagram of s.

Example 1:

Input: s = "anagram", t = "nagaram"
Output: true
Example 2:

Input: s = "rat", t = "car"
Output: false
Note:
You may assume the string contains only lowercase alphabets. 所谓anagram, 就是两个词所用的字母及其个数都是一样的，但是，字母的位置不一样
Follow up:
What if the inputs contain unicode characters? How would you adapt your solution to such case?

Solution no.1: ------------------------------------------------ Sorting
----------------------------------------------------------------- O(nlogn) T, O(1) S
class Solution(object):
    def isAnagram(self, s, t):
        return sorted(s) == sorted(t)
        """
        :type s: str
        :type t: str
        :rtype: bool
        """
        
Solution no.2: -------------------------------------------------- List
----------------------------------------------------------------- O(n) T
-- O(1) S: Although we do use extra space, the space complexity is O(1) because the table's size stays constant no matter how large n is
class Solution(object):
    def isAnagram(self, s, t):
        """
        :type s: str
        :type t: str
        :rtype: bool
        """
        if len(s) != len(t) or len(set(s)) != len(set(t)):
            return False
        L = [0] * 26
        for i in range(len(s)):
            L[ord(s[i]) - ord('a')] += 1
        for i in range(len(t)):
            if L[ord(t[i]) - ord('a')] <= 0:
                return False
            else:
                L[ord(t[i]) - ord('a')] -= 1
        return True
        
Follow up:

What if the inputs contain unicode characters? 
How would you adapt your solution to such case?

Answer:

Use a hash table instead of a fixed size list. 
Imagine allocating a large size array to fit the entire range of unicode characters, 
which could go up to more than 1 million (1,114,112 possible characters). 
A hash table is a more generic solution and could adapt to any range of characters.



Java Version:
class Solution {
    public boolean isAnagram(String s, String t) {
        if (s.length() == 0 && t.length() == 0) {
            return true;
        }
        if (s.length() == 0 || t.length() == 0 || s.length() != t.length()) {
            return false;
        }
        
        int[] dic = new int[26];
        
        for (char c : s.toCharArray()) {
            dic[c - 'a'] += 1;
        }
        
        for (char c: t.toCharArray()) {
            dic[c - 'a'] -= 1;
            if (dic[c - 'a'] < 0) {
                return false;
            }
        }
        
        for (int i = 0; i < dic.length; i ++) {
            if (dic[i] > 0) {
                return false;
            }
        }
        
        return true;
    }
}
