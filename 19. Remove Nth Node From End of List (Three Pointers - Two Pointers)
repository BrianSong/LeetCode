Given a linked list, remove the n-th node from the end of list and return its head.

Example:

Given linked list: 1->2->3->4->5, and n = 2.

After removing the second node from the end, the linked list becomes 1->2->3->5.
Note:

Given n will always be valid.

Follow up:

Could you do this in one pass?

Solution no.1: my own ------------------------------------------- Three Pointers
# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution(object):
    def removeNthFromEnd(self, head, n):
        """
        :type head: ListNode
        :type n: int
        :rtype: ListNode
        """
        dummynode = ListNode(0)                        # First we will add an auxiliary "dummy" node, which points to the list head. 
                                                       # The "dummy" node is used to simplify some corner cases such as a list with 
                                                       # only one node, or removing the head of the list. 
        dummynode.next = head
        prev, slow, fast = dummynode, head, head
        for i in range(n - 1):
            fast = fast.next
        while fast.next:
            fast = fast.next
            slow = slow.next
            prev = prev.next
        prev.next = slow.next
        return dummynode.next

Solution no.2: -------------------------------------------------- Two Pointers ------------- One Pass
# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution(object):
    def removeNthFromEnd(self, head, n):
        """
        :type head: ListNode
        :type n: int
        :rtype: ListNode
        """
        dummynode = ListNode(0)
        dummynode.next = head
        slow, fast = dummynode, head                 # We do not need prenode actually
        for i in range(n - 1):
            fast = fast.next
        while fast.next:
            fast = fast.next
            slow = slow.next
        slow.next = slow.next.next
        return dummynode.next
