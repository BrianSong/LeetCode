Given a binary tree, return the values of its boundary in anti-clockwise direction starting from root. 
Boundary includes left boundary, leaves, and right boundary in order without duplicate nodes.  
(The values of the nodes may still be duplicates.)

Left boundary is defined as the path from root to the left-most node. 
Right boundary is defined as the path from root to the right-most node. 
If the root doesn't have left subtree or right subtree, then the root itself is left boundary or right boundary. 
Note this definition only applies to the input binary tree, and not applies to any subtrees.

The left-most node is defined as a leaf node you could reach when you always firstly travel to the left subtree if exists. 
If not, travel to the right subtree. Repeat until you reach a leaf node.

The right-most node is also defined by the same way with left and right exchanged.

Example 1

Input:
  1
   \
    2
   / \
  3   4

Ouput:
[1, 3, 4, 2]

Explanation:
The root doesn't have left subtree, so the root itself is left boundary.
The leaves are node 3 and 4.
The right boundary are node 1,2,4. Note the anti-clockwise direction means you should output reversed right boundary.
So order them in anti-clockwise without duplicates and we have [1,3,4,2].
 

Example 2

Input:
    ____1_____
   /          \
  2            3
 / \          / 
4   5        6   
   / \      / \
  7   8    9  10  
       
Ouput:
[1,2,4,7,8,9,10,6,3]

Explanation:
The left boundary are node 1,2,4. (4 is the left-most node according to definition)
The leaves are node 4,7,8,9,10.
The right boundary are node 1,3,6,10. (10 is the right-most node).
So order them in anti-clockwise without duplicate nodes we have [1,2,4,7,8,9,10,6,3].


Solution: -------------------------------------------- Preorder + Inorder + Postorder Combination
------------------------------------------------------ O(n) T and S
# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution(object):
    def boundaryOfBinaryTree(self, root):
        """
        :type root: TreeNode
        :rtype: List[int]
        """
        def left_boundary(node):                               # We do preorder for left boundary
            if not node:
                return 
            if not node.left and not node.right:
                return
            res.append(node.val)
            if node.left:                                      # KEY !!!!! We can only choose one way to go, otherwise it will just
                                                               # become a normal preorder traversal to record all the node in the
                                                               # left subtree instead of the left boundary we want
                left_boundary(node.left)
            else:
                left_boundary(node.right)
        
        def leaves(node):                                      # We do inorder for leaves
            if not node:
                return
            leaves(node.left)
            if not node.left and not node.right and node != root:
                res.append(node.val)
            leaves(node.right)
            
        def right_boundary(node):                              # We do postorder for right boundary
            if not node:
                return
            if not node.left and not node.right:
                return
            if node.right:
                right_boundary(node.right)
            else:
                right_boundary(node.left)
            res.append(node.val)
                
        if not root:
            return None
        res = [root.val]
        left_boundary(root.left)
        leaves(root)
        right_boundary(root.right)
        return res



Updated Python:
# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution(object):
    def boundaryOfBinaryTree(self, root):
        """
        :type root: TreeNode
        :rtype: List[int]
        """
        if not root:
            return None
        res = [root.val]
        self.left_boundary(root.left, res)
        self.leaves(root, root, res)
        self.right_boundary(root.right, res)
        return res
    
    def left_boundary(self, node, res):
        if not node:
            return
        if not node.left and not node.right:
            return
        res.append(node.val)
        if node.left:
            self.left_boundary(node.left, res)
        else:
            self.left_boundary(node.right, res)
    
    def leaves(self, node, root, res):
        if not node:
            return
        self.leaves(node.left, root, res)
        if not node.left and not node.right and node != root:
            res.append(node.val)
        self.leaves(node.right, root, res)
        
    def right_boundary(self, node, res):
        if not node:
            return
        if not node.left and not node.right:
            return
        if node.right:
            self.right_boundary(node.right, res)
        else:
            self.right_boundary(node.left, res)
        res.append(node.val)
        
        
        
C++ Version:
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<int> res {};
    
    void left_boundary(TreeNode* node) {
        if (!node) {
            return;
        }
        if (!node->left && !node->right) {
            return;
        }
        res.push_back(node->val);
        if (node->left) {
            left_boundary(node->left);
        } else {
            left_boundary(node->right);
        }
    }
    
    void leaves(TreeNode* node, TreeNode* root){
        if (!node) {
            return;
        }
        leaves(node->left, root);
        if (!node->left && !node->right && node != root){
            res.push_back(node->val);
        }
        leaves(node->right, root);
    }
    
    
    void right_boundary(TreeNode* node) {
        if (!node) {
            return;
        }
        if (!node->left && !node->right) {
            return;
        }
        if (node->right) {
            right_boundary(node->right);
        } else {
            right_boundary(node->left);
        }
        res.push_back(node->val);
    }
    
    
    vector<int> boundaryOfBinaryTree(TreeNode* root) {
        if (!root) {
            return res;
        }
        res.push_back(root->val);
        left_boundary(root->left);
        leaves(root, root);
        right_boundary(root->right);
        return res;
    }
};
