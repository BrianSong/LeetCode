Given an array of n positive integers and a positive integer s, find the minimal length of a contiguous subarray of which the sum â‰¥ s. 
If there isn't one, return 0 instead.

Example: 

Input: s = 7, nums = [2,3,1,2,4,3]
Output: 2
Explanation: the subarray [4,3] has the minimal length under the problem constraint.
Follow up:
If you have figured out the O(n) solution, try coding another solution of which the time complexity is O(n log n). 

Solution: ---------------------------------------------------- Two Pointers
class Solution(object):
    def minSubArrayLen(self, s, nums):
        """
        :type s: int
        :type nums: List[int]
        :rtype: int
        """
        if len(nums) == 0:
            return 0
        res, currsum, start, end = float('inf'), nums[0], 0, 0       # start from the first element, let currsum be the first element
                                                                     # if currsum is smaller than s, continue expanding end 
                                                                     # if currsum is >= s, keep track of res, move start to right
        while start <= end and end < len(nums):
            if currsum >= s:
                res = min(res, end - start + 1)
                currsum -= nums[start]
                start += 1
            else:
                end += 1
                if end < len(nums):                                  # Make sure that nums[end] will not bring error
                    currsum += nums[end]
        if res == float('inf'):                                      # Do not find any substring that fulfill the requirements
            res = 0
        return res
