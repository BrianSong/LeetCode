Given two strings S and T, return if they are equal when both are typed into empty text editors. 
# means a backspace character.

Note that after backspacing an empty text, the text will continue empty.

Example 1:

Input: S = "ab#c", T = "ad#c"
Output: true
Explanation: Both S and T become "ac".
Example 2:

Input: S = "ab##", T = "c#d#"
Output: true
Explanation: Both S and T become "".
Example 3:

Input: S = "a##c", T = "#a#c"
Output: true
Explanation: Both S and T become "c".
Example 4:

Input: S = "a#c", T = "b"
Output: false
Explanation: S becomes "c" while T becomes "b".
Note:

1 <= S.length <= 200
1 <= T.length <= 200
S and T only contain lowercase letters and '#' characters.
Follow up:

Can you solve it in O(N) time and O(1) space?


Solution no.1: Stack -- O(n) T and S
class Solution(object):
    def backspaceCompare(self, S, T):
        """
        :type S: str
        :type T: str
        :rtype: bool
        """
        stack_S, stack_T = [], []
        for w in S:
            if w == '#' and not stack_S:
                continue
            elif w == '#':
                stack_S.pop()
            else:
                stack_S.append(w)
        for w in T:
            if w == '#' and not stack_T:
                continue
            elif w == '#':
                stack_T.pop()
            else:
                stack_T.append(w)
        return stack_S == stack_T
        
        
Solution no.2: Two Pointers -- O(n) T and O(1) S
class Solution(object):
    def backspaceCompare(self, S, T):
        """
        :type S: str
        :type T: str
        :rtype: bool
        """
        i, j = len(S) - 1, len(T) - 1                         # Reverse from the back is a smart move here
        while i >= 0 or j >= 0:
            skip = 0
            while i >= 0:
                if S[i] == '#':
                    skip += 1
                    i -= 1
                elif S[i] != '#' and skip > 0:
                    skip -= 1
                    i -= 1
                else:
                    break
            while j >= 0:
                if T[j] == '#':
                    skip += 1
                    j -= 1
                elif T[j] != '#' and skip > 0:
                    skip -= 1
                    j -= 1
                else:
                    break
            if (i >= 0) != (j >= 0):
                return False
            if i >= 0 and j >= 0 and S[i] != T[j]:
                return False
            i -= 1
            j -= 1
        return True
