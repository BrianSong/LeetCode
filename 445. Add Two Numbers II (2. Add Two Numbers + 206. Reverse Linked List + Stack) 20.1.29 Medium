You are given two non-empty linked lists representing two non-negative integers. 
The most significant digit comes first and each of their nodes contain a single digit. 
Add the two numbers and return it as a linked list.

You may assume the two numbers do not contain any leading zero, except the number 0 itself.

Follow up:
What if you cannot modify the input lists? In other words, reversing the lists is not allowed.

Example:

Input: (7 -> 2 -> 4 -> 3) + (5 -> 6 -> 4)
Output: 7 -> 8 -> 0 -> 7


Solution no.1: ------------------------------------- 2. Add Two Numbers + 206. Reverse Linked List
-------------------------------------------- O(max(m, n)) T, O(m + n) S because we are also creating new l1 and l2
# Definition for singly-linked list. 
# class ListNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution(object):
    def addTwoNumbers(self, l1, l2):
        """
        :type l1: ListNode
        :type l2: ListNode
        :rtype: ListNode
        """
        l1, l2 = self.reverseLL(l1), self.reverseLL(l2)
        dummynode, reminder = ListNode(0), 0
        prevnode = dummynode
        while l1 or l2 or reminder:
            head, v1, v2 = ListNode(0), 0, 0
            if l1: v1 = l1.val
            if l2: v2 = l2.val
            head.val = (v1 + v2 + reminder) % 10
            reminder = (v1 + v2 + reminder) / 10
            prevnode.next = head
            prevnode = head
            if l1: l1 = l1.next
            if l2: l2 = l2.next
        return self.reverseLL(dummynode.next)
            
    
    def reverseLL(self, head):
        prev, curr = None, head
        while curr:
            nextele = curr.next
            curr.next = prev
            prev = curr
            curr = nextele
        return prev

Solution no.2: ------------------------------------- Stack
-------------------------------------------- O(max(m, n)) T, O(m + n) S
# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution(object):
    def addTwoNumbers(self, l1, l2):
        """
        :type l1: ListNode
        :type l2: ListNode
        :rtype: ListNode
        """
        s1, s2 = [], []
        curr1, curr2 = l1, l2
        while curr1:
            s1.append(curr1.val)
            curr1 = curr1.next
        while curr2:
            s2.append(curr2.val)
            curr2 = curr2.next
        curr1, curr2 = l1, l2
        prev, reminder = None, 0
        while s1 or s2 or reminder:
            v1 = s1.pop() if s1 else 0
            v2 = s2.pop() if s2 else 0
            sum = reminder + v1 + v2
            currnode = ListNode(sum%10)
            reminder = sum / 10
            currnode.next = prev             # Instead of "prev.next = currnode", here, what we want to return is the reverse order !!!!
            prev = currnode
        return prev


Java Version:
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        if (l1 == null) {
            return l2;
        }
        if (l2 == null) {
            return l1;
        }
        
        Stack<Integer> s1 = new Stack<>();
        Stack<Integer> s2 = new Stack<>();
        
        while (l1 != null) {
            s1.push(l1.val);
            l1 = l1.next;
        }
        
        while (l2 != null) {
            s2.push(l2.val);
            l2 = l2.next;
        }
        
        ListNode prevNode = null;
        
        int carry = 0;
        while (!s1.isEmpty() || !s2.isEmpty() || carry != 0) {
            int v1 = (s1.isEmpty()) ? 0 : s1.pop();
            int v2 = (s2.isEmpty()) ? 0 : s2.pop();
            int currSum = v1 + v2 + carry;
            ListNode currNode = new ListNode(currSum % 10);
            currNode.next = prevNode;
            prevNode = currNode;
            carry = currSum / 10;
        }
        
        return prevNode;
    }
}
