Given a 2D board and a list of words from the dictionary, find all words in the board.

Each word must be constructed from letters of sequentially adjacent cell, 
where "adjacent" cells are those horizontally or vertically neighboring. 
The same letter cell may not be used more than once in a word.

 

Example:

Input: 
board = [
  ['o','a','a','n'],
  ['e','t','a','e'],
  ['i','h','k','r'],
  ['i','f','l','v']
]
words = ["oath","pea","eat","rain"]

Output: ["eat","oath"]
 

Note:

All inputs are consist of lowercase letters a-z.
The values of words are distinct.


Solution no.1: ------------------------------------- DFS as in Leetcode no.79. Word Search ---- Pass 34/36 but TLE error
------------------------------------------- O(m*n*l*(4^wl)) T, l is the number of word, wl is the average length of each word
------------------------------------------- O(wl) or O(m*n) S
class Solution(object):
    def findWords(self, board, words):
        """
        :type board: List[List[str]]
        :type words: List[str]
        :rtype: List[str]
        """
        if not board or not words:
            return None
        res = []
        visited = [[False for j in range(len(board[0]))] for i in range(len(board))]
        for word in words:
            for i in range(len(board)):
                for j in range(len(board[0])):
                    self.dfs(board, i, j, word, "", visited, res)
        return res
    
    def dfs(self, board, i, j, word, path, visited, res):
        if not word:
            if not path in res:                                                         # Cannot be if not word and not path in res
                res.append(path)                                                        # since for cases not word and path in res
            return                                                                      # if we do not take care of it,
                                                                                        # it will bring index error in next line word[0]
        if i < 0 or i >= len(board) or j < 0 or j >= len(board[0]) or board[i][j] != word[0] or visited[i][j]:
            return
        visited[i][j] = True
        self.dfs(board, i + 1, j, word[1:], path + board[i][j], visited, res)
        self.dfs(board, i, j + 1, word[1:], path + board[i][j], visited, res)
        self.dfs(board, i - 1, j, word[1:], path + board[i][j], visited, res)
        self.dfs(board, i, j - 1, word[1:], path + board[i][j], visited, res)
        visited[i][j] = False
        

Solution no.2: --------------------------------------------------- Trie
--------------------------------------- O(m*n*(4^wl)) T, wl is the average length of each word
--------------- For the naive Trie approach (the one uses startwith and search), I think the time complexity is O(m * n * wl * 4^wl) 
--------------- where m*n is the size of the board and wl is the average length of the words in the list. 
--------------- For this optimized approach, it becomes O(m * n * 4^wl). 
------ Space: O(l * wl) = max(O(wl), O(l * wl)) where
------ O(wl) - The recursive stack can grow at most to wl layers. 
------ O(l * wl) - In the worst case when all words start with different characters, the trie has l * wl nodes. Also, since each 
------ word is stored in a leaf node, all the leaf nodes require l * wl memory.
'''
Simple backtracking cannot pass the larger test. We must stop backtracking earlier.
If the current candidate does not exist in all words' prefix, we could stop backtracking immediately. => Trie
'''
class TrieNode(object):
    def __init__(self): 
        self.children = collections.defaultdict(TrieNode)      # Here (TrieNode) instead of (TrieNode())
        self.isEnd = False

class Trie(object):
    def __init__(self):
        self.root = TrieNode()                                 # Here self.root = TrieNode() instead of self.root = TrieNode
    
    def insert(self, word):
        curr = self.root
        for c in word:
            curr = curr.children[c]
        curr.isEnd = True
    
        
class Solution(object):
    def findWords(self, board, words):
        """
        :type board: List[List[str]]
        :type words: List[str]
        :rtype: List[str]
        """
        if not board or not words:
            return None
        res = []
        trie = Trie()                                          # Create a trie data structure
        for word in words:
            trie.insert(word)
        node = trie.root                                       # node here is kind of like a dummynode in linked list
        self.dirs = [[1, 0], [0, 1], [0, -1], [-1, 0]]
        for i in range(len(board)):
            for j in range(len(board[0])):
                self.backtracking(board, node, i, j, "", res)
        return res
    
    def backtracking(self, board, node, i, j, curr, res):
        if node.isEnd:
            res.append(curr)
            node.isEnd = False                                 # Set node.isWord to false is to de-duplicate
            return                                             # and pass cases like [aaa, aaab]
        if i < 0 or i >= len(board) or j < 0 or j >= len(board[0]) or not board[i][j] in node.children:
            return
        temp = board[i][j]
        board[i][j] = '#'                                      # Set board[i][j] to '#' serves as a visited purpose
                                                               # so that we will not use extra space for visited matrix
        for dir in self.dirs:
            self.backtracking(board, node.children[temp], i + dir[0], j + dir[1], curr + temp, res)
        board[i][j] = temp


Java Version:
class TrieNode {
    Map<Character, TrieNode> children = new HashMap<>();
    boolean isEnd = false;
    public TrieNode() {};
}

class Trie {
    
    TrieNode root = new TrieNode();
    
    public void insert(String word) {
        TrieNode currNode = root;
        for (char c : word.toCharArray()) {
            if (! currNode.children.containsKey(c)) {
                TrieNode newNode = new TrieNode();
                currNode.children.put(c, newNode);
                currNode = newNode;
            } else {
                currNode = currNode.children.get(c);
            }
        }
        currNode.isEnd = true;
    }
}

class Solution {
    int[][] directions = new int[][] {{1, 0}, {-1, 0}, {0, 1}, {0, -1}};
    boolean[][] visited;
    public List<String> findWords(char[][] board, String[] words) {
        List<String> res = new ArrayList<>();
        if (board == null || board.length == 0 || board[0].length == 0 || words == null || words.length == 0) {
            return res;
        }
        visited = new boolean[board.length][board[0].length];
        Trie trie = new Trie();
        for (String word : words) {
            trie.insert(word);
        }
        for (int i = 0; i < board.length; i ++) {
            for (int j = 0; j < board[0].length; j ++) {
                dfs(board, i, j, trie.root, new StringBuilder(), res);
            }
        }
        return res;
    }
    
    public void dfs(char[][] board, int r, int c, TrieNode node, StringBuilder path, List<String> res) {
        if (node.isEnd) {
            res.add(path.toString());
            node.isEnd = false;
            return;
        }
        if (r < 0 || r >= board.length || c < 0 || c >= board[0].length || ! node.children.containsKey(board[r][c]) || visited[r][c]) {
            return;
        }
        visited[r][c] = true;
        path.append(board[r][c]);
        for (int[] dir : directions) {
            dfs(board, r + dir[0], c + dir[1], node.children.get(board[r][c]), path, res);
        }
        path.deleteCharAt(path.length() - 1);
        visited[r][c] = false;
        return;
    }
}
