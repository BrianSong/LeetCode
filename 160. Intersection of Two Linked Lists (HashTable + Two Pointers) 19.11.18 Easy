Write a program to find the node at which the intersection of two singly linked lists begins.

For example, the following two linked lists:


begin to intersect at node c1.

 

Example 1:


Input: intersectVal = 8, listA = [4,1,8,4,5], listB = [5,0,1,8,4,5], skipA = 2, skipB = 3
Output: Reference of the node with value = 8
Input Explanation: The intersected node's value is 8 (note that this must not be 0 if the two lists intersect). 
From the head of A, it reads as [4,1,8,4,5]. From the head of B, it reads as [5,0,1,8,4,5]. 
There are 2 nodes before the intersected node in A; There are 3 nodes before the intersected node in B.
 

Example 2:


Input: intersectVal = 2, listA = [0,9,1,2,4], listB = [3,2,4], skipA = 3, skipB = 1
Output: Reference of the node with value = 2
Input Explanation: The intersected node's value is 2 (note that this must not be 0 if the two lists intersect). 
From the head of A, it reads as [0,9,1,2,4]. From the head of B, it reads as [3,2,4]. 
There are 3 nodes before the intersected node in A; There are 1 node before the intersected node in B.
 
 

Notes:

If the two linked lists have no intersection at all, return null.
The linked lists must retain their original structure after the function returns.
You may assume there are no cycles anywhere in the entire linked structure.
Your code should preferably run in O(n) time and use only O(1) memory.

Solution no.1: my own ----------------------------------------- HashTable
--------------------------------------------------------------- O(m + n) T, O(m) or O(n) S
# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution(object):
    def getIntersectionNode(self, headA, headB):
        """
        :type head1, head1: ListNode
        :rtype: ListNode
        """
        HashTable = {}
        pointerA, pointerB = headA, headB
        while pointerA:
            HashTable[pointerA] = 0
            pointerA = pointerA.next
        while pointerB:
            if pointerB in HashTable:
                return pointerB
            pointerB = pointerB.next
        return None
        
Solution no.2: -------------------------------- Two Pointers ---------------- https://www.youtube.com/watch?v=obNV22YH1Nk
--------------------------------------------------------------- O(m + n) T, O(1) S
# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.next = None
'''
Maintain two pointers pA and pB initialized at the head of A and B, respectively. 
Then let them both traverse through the lists, one node at a time.
When pA reaches the end of a list, then redirect it to the head of B (yes, B, that's right.); 
similarly when pB reaches the end of a list, redirect it the head of A.
If at any point pA meets pB, then pA/pB is the intersection node.
??????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????
To see why the above trick would work, consider the following two lists: A = {1,3,5,7,9,11} and B = {2,4,9,11}, 
which are intersected at node '9'. Since B.length (=4) < A.length (=6), pB would reach the end of the merged list first, 
because pB traverses exactly 2 nodes less than pA does. By redirecting pB to head A, lateron pA to head B, 
we now ask pB to travel exactly 2 more nodes than pA would. 
So in the second iteration, they are guaranteed to reach the intersection node at the same time because they travel the same length now
IMPORTANT !!!!!!!!!!!!!!!!!!!!!!!!!!! MORE CLEAR EXPLANATION !!!!!!!!!!!!!!!!!
In the second iteration, the pointer pA and pB must meet for the reason below:
in the first iteration, pA is asked to travel L1 + Lc where L1 is the distance between headA and intersection point, LC is the distance
from the intersection point to the end of A linked list,
and pB is asked to travel L2 + Lc, where Lc is the common part A linked list and linkned list both share.
For the second iteration, pA is asked to travel L2, and pB is asked to travel L1,
so, they will travel exact the same distance before they meet each other at the intersection point
'''
class Solution(object):
    def getIntersectionNode(self, headA, headB):
        """
        :type head1, head1: ListNode
        :rtype: ListNode
        """
        pointerA, pointerB = headA, headB
        while pointerA != pointerB:                                     # Why this will not cause infinite loop?
                                                                        # for example: 2 -> 6 -> 4 and 1-> 5 (NO intersection)
                                                                        # according to the algorithm, pointerA will travel 6 times to
                                                                        # be null for the seconde time as the same as pointerB
                                                                        # they travel the same length
            pointerA = headB if pointerA == None else pointerA.next     # it must be pointerA == None instead of pointerA.next == None
                                                                        # otherwise, pointerA will be None and equal to pointerB
                                                                        # for no intersection cases, which will cause time error limit
            pointerB = headA if pointerB == None else pointerB.next
        return pointerA
