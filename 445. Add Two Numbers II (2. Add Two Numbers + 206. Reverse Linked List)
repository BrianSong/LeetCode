You are given two non-empty linked lists representing two non-negative integers. 
The most significant digit comes first and each of their nodes contain a single digit. 
Add the two numbers and return it as a linked list.

You may assume the two numbers do not contain any leading zero, except the number 0 itself.

Follow up:
What if you cannot modify the input lists? In other words, reversing the lists is not allowed.

Example:

Input: (7 -> 2 -> 4 -> 3) + (5 -> 6 -> 4)
Output: 7 -> 8 -> 0 -> 7


Solution: -------------------------------------------- 2. Add Two Numbers + 206. Reverse Linked List
# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution(object):
    def addTwoNumbers(self, l1, l2):
        """
        :type l1: ListNode
        :type l2: ListNode
        :rtype: ListNode
        """
        l1, l2 = self.reverseLL(l1), self.reverseLL(l2)
        dummynode, reminder = ListNode(0), 0
        prevnode = dummynode
        while l1 or l2 or reminder:
            head, v1, v2 = ListNode(0), 0, 0
            if l1: v1 = l1.val
            if l2: v2 = l2.val
            head.val = (v1 + v2 + reminder) % 10
            reminder = (v1 + v2 + reminder) / 10
            prevnode.next = head
            prevnode = head
            if l1: l1 = l1.next
            if l2: l2 = l2.next
        return self.reverseLL(dummynode.next)
            
    
    def reverseLL(self, head):
        prev, curr = None, head
        while curr:
            nextele = curr.next
            curr.next = prev
            prev = curr
            curr = nextele
        return prev
