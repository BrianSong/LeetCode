Given an integer array nums, find the sum of the elements between indices i and j (i â‰¤ j), inclusive.

Example:
Given nums = [-2, 0, 3, -5, 2, -1]

sumRange(0, 2) -> 1
sumRange(2, 5) -> -1
sumRange(0, 5) -> -3
Note:
You may assume that the array does not change.

*****************************************************There are many calls to sumRange function.*****************************************


Solution: ------------------------------------------------------- Design
----------------------------------------------------------------- O(n) T, O(n) S
'''
Imagine that sumRange is called one thousand times with the exact same arguments. How could we speed that up?
We could trade in extra space for speed. By pre-computing, we can speed up the query to constant time.
'''
class NumArray(object):

    def __init__(self, nums):
        """
        :type nums: List[int]
        """
        self.nums, self.sumres = nums, [0 for i in range(len(nums))]
        for i in range(len(nums)):
            if i == 0:                                                                 # Consider i == 0 situation !!!!!!!!!!!!!!!!
                self.sumres[i] = self.nums[i]
            else:
                self.sumres[i] = self.sumres[i - 1] + self.nums[i]
        print self.sumres
        

    def sumRange(self, i, j):
        """
        :type i: int
        :type j: int
        :rtype: int
        """
        return self.sumres[j] - self.sumres[i - 1] if i != 0 else self.sumres[j]      # IMPORTANT !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
                                                                                      # Must consider i == 0 situation !!!!!!!!!!!
                                                                                      # where i - 1 will bring key error
        


# Your NumArray object will be instantiated and called as such:
# obj = NumArray(nums)
# param_1 = obj.sumRange(i,j)
