Given an n-ary tree, return the level order traversal of its nodes' values. (ie, from left to right, level by level).

For example, given a 3-ary tree:

 



 

We should return its level order traversal:

[
     [1],
     [3,2,4],
     [5,6]
]
 

Note:

The depth of the tree is at most 1000.
The total number of nodes is at most 5000.


Solution: ----------------------------------------------------- BFS
"""
# Definition for a Node.
class Node(object):
    def __init__(self, val, children):
        self.val = val
        self.children = children
"""
class Solution(object):
    def levelOrder(self, root):
        """
        :type root: Node
        :rtype: List[List[int]]
        """
        if not root:
            return None
        queue, res = [root], []
        while len(queue) != 0:
            currlist = []
            for i in range(len(queue)):
                pop_element = queue.pop(0)
                currlist.append(pop_element.val)
                if len(pop_element.children) != 0:
                    for child in pop_element.children:
                        queue.append(child)
            res.append(currlist)
        return res
