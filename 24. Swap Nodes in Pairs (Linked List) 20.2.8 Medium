Given a linked list, swap every two adjacent nodes and return its head.

You may not modify the values in the list's nodes, only nodes itself may be changed.

 

Example:

Given 1->2->3->4, you should return the list as 2->1->4->3.

Solution: ------------------------------------------------- Linked List
------------------------------------------------- O(n) T , O(1) S
# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution(object):
    def swapPairs(self, head):
        """
        :type head: ListNode
        :rtype: ListNode
        """
        if not head:
            return None
        dummynode = ListNode(0)
        dummynode.next = head
        prev = dummynode
        while head and head.next:
            next = head.next
            head.next = next.next
            prev.next = next
            next.next = head
            head = head.next
            prev = prev.next.next
        return dummynode.next


Java Version:
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
class Solution {
    public ListNode swapPairs(ListNode head) {
        if (head == null) {
            return null;
        }
        
        ListNode dummyNode = new ListNode(0);
        dummyNode.next = head;
        ListNode prevNode = dummyNode;
        
        while (prevNode.next != null && prevNode.next.next != null) {
            ListNode nextNode = prevNode.next;
            prevNode.next = prevNode.next.next;
            nextNode.next = prevNode.next.next;
            prevNode.next.next = nextNode;
            prevNode = prevNode.next.next;
        }
        
        return dummyNode.next;
    }
}
