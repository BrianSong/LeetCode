On a 2x3 board, there are 5 tiles represented by the integers 1 through 5, and an empty square represented by 0.

A move consists of choosing 0 and a 4-directionally adjacent number and swapping it.

The state of the board is solved if and only if the board is [[1,2,3],[4,5,0]].

Given a puzzle board, return the least number of moves required so that the state of the board is solved. 
If it is impossible for the state of the board to be solved, return -1.

Examples:

Input: board = [[1,2,3],[4,0,5]]
Output: 1
Explanation: Swap the 0 and the 5 in one move.
Input: board = [[1,2,3],[5,4,0]]
Output: -1
Explanation: No number of moves will make the board solved.
Input: board = [[4,1,2],[5,0,3]]
Output: 5
Explanation: 5 is the smallest number of moves that solves the board.
An example path:
After move 0: [[4,1,2],[5,0,3]]
After move 1: [[4,1,2],[0,5,3]]
After move 2: [[0,1,2],[4,5,3]]
After move 3: [[1,0,2],[4,5,3]]
After move 4: [[1,2,0],[4,5,3]]
After move 5: [[1,2,3],[4,5,0]]
Input: board = [[3,2,4],[1,5,0]]
Output: 14
Note:

board will be a 2 x 3 array as described above.
board[i][j] will be a permutation of [0, 1, 2, 3, 4, 5].


Solution: ------------------------------------------------------- BFS
----------------------------------------------------------------- O(m * n * (m * n)!) T and S
------------------------------- 0 can be m * n places, and for each place there will be (m * n) ! possible configurations
class Solution(object):
    def slidingPuzzle(self, board):
        """
        :type board: List[List[int]]
        :rtype: int
        """
        if not board or not board[0]:
            return 0
        queue = collections.deque()
        visited = set()                                        # Add a visited set to avoid re-visit and infinite loop
        for i in range(len(board)):
            for j in range(len(board[0])):
                if board[i][j] == 0:
                    zero_index = (i, j)                        # Here, we cannot do only one break to break from two for loop !!!!!!
        queue.append((board, 0, zero_index))
        visited.add(str(board))
        while queue:
            for i in range(len(queue)):
                pop_board, step, zero = queue.popleft()
                if pop_board == [[1, 2, 3], [4, 5, 0]]:
                    return step
                for dir in [[-1, 0], [1, 0], [0, -1], [0, 1]]:
                    if 0 <= zero[0] + dir[0] <= 1 and 0 <= zero[1] + dir[1] <= 2:
                        new_board = [[pop_board[i][j] for j in range(len(board[0]))] for i in range(len(board))]   # KEY OF THIS QUESTION
                        new_board[zero[0]][zero[1]], new_board[zero[0] + dir[0]][zero[1] + dir[1]]   # We need to keep new_board unchange
                        / = new_board[zero[0] + dir[0]][zero[1] + dir[1]], new_board[zero[0]][zero[1]] # for every four directions
                        if not str(new_board) in visited: 
                            visited.add(str(new_board))
                            queue.append((new_board, step + 1, (zero[0] + dir[0], zero[1] + dir[1])))
        return -1
