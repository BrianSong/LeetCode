Given strings S and T, find the minimum (contiguous) substring W of S, so that T is a subsequence of W.

If there is no such window in S that covers all characters in T, return the empty string "". 
If there are multiple such minimum-length windows, return the one with the left-most starting index.

Example 1:

Input: 
S = "abcdebdde", T = "bde"
Output: "bcde"
Explanation: 
"bcde" is the answer because it occurs before "bdde" which has the same length.
"deb" is not a smaller window because the elements of T in the window must occur in order.
 

Note:

All the strings in the input will only contain lowercase letters.
The length of S will be in the range [1, 20000].
The length of T will be in the range [1, 100].


Solution: O(m * n) T and S
class Solution(object):
    def minWindow(self, S, T):
        """
        :type S: str
        :type T: str
        :rtype: str
        """
        dp = [[0 for j in range(len(T))] for i in range(len(S))]    
        # dp[i][j] means: for S(0~i) & T(0~j), the "largest" starting index in S which matches T.
        for i in range(len(dp)):
            if i == 0:
                if S[i] == T[0]:
                    dp[i][0] = 0
                else:
                    dp[i][0] = -1
            else:
                if S[i] == T[0]:
                    dp[i][0] = i
                else:
                    dp[i][0] = dp[i - 1][0]
        for j in range(1, len(dp[0])):
            dp[0][j] = -1
        for i in range(1, len(dp)):
            for j in range(1, len(dp[0])):
                if S[i] == T[j]:
                    dp[i][j] = dp[i - 1][j - 1]     # 越阶
                else:
                    dp[i][j] = dp[i - 1][j]         # 无法越阶，只能往回看
        min_length, start = float('inf'), -1
        for i in range(len(T) - 1, len(dp)):
            if dp[i][-1] != -1:                     # 只有越阶到最后一层才有意义
                curr_length = i - dp[i][-1] + 1
                if curr_length < min_length:
                    min_length = curr_length
                    start = dp[i][-1]
        return S[start : start + min_length] if start != -1 else ""
