Given a string s, find the longest palindromic substring in s. You may assume that the maximum length of s is 1000.

Example 1:

Input: "babad"
Output: "bab"
Note: "aba" is also a valid answer.
Example 2:

Input: "cbbd"
Output: "bb"

Solution: -------------------------------------------------------------- O(n^2) T, O(1) S
'''
we could solve it in O(n^2) time using only constant space.

We observe that a palindrome mirrors around its center. Therefore, a palindrome can be expanded from its center, 
and there are only 2n - 1 such centers.

You might be asking why there are 2n - 1 but not n centers? 
The reason is the center of a palindrome can be in between two letters. 
Such palindromes have even number of letters (such as "abba") and its center are between the two 'b's.
'''
class Solution(object):
    def longestPalindrome(self, s):
        """
        :type s: str
        :rtype: str
        """
        if not s or len(s) < 1:
            return ""
        start, end = 0, 0
        for i in range(len(s)):
            len1 = self.FindExpandLength(s, i, i)                   # When the center is in s[i]
            len2 = self.FindExpandLength(s, i, i + 1)               # When the center is between s[i] and s[i + 1]
            if len_1 > len_2 and len_1 > end - start + 1:           # IMPORTANT !!!!!!!! end - start + 1 instead of start - end + 1 !!!!
                start, end = i - len_1 / 2, i + len_1 / 2
            elif len_2 > len_1 and len_2 > end - start + 1:
                start, end = i - (len_2 - 1) / 2, i + len_2 / 2
        return s[start:end + 1]
    
    def FindExpandLength(self, s, left, right):
        while left >= 0 and right < len(s) and s[left] == s[right]:
            left -= 1
            right += 1
        return (right - 1) - (left + 1) + 1             # Why this?
                                                        # because after break from the while loop, 
                                                        # the left and right has already been updated to left = left - 1
                                                        # and right = right + 1, however, what we want is the original left and right
                                                        # instead of these new left and right
                                                        # IMPORTANT !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
                                                        # "(right - 1) - (left + 1) + 1" instead of "(left + 1) - (right - 1) + 1" !!!!!

Java Version:
class Solution {
    public String longestPalindrome(String s) {
        if (s == null || s.length() == 0) {
            return "";
        }
        
        int start = 0;
        int end = 0;
        int maxLength = Integer.MIN_VALUE;
        
        for (int i = 0; i < s.length(); i ++) {
            int length1 = expandFromCenter(s, i, i);
            int length2 = expandFromCenter(s, i, i + 1);
            
            if (length1 > length2 && length1 > maxLength) {
                start = i - length1 / 2;
                end =  i + length1 / 2;
                maxLength = length1;
            } else if (length2 > length1 && length2 > maxLength) {
                start = i - length2 / 2 + 1;
                end = i + length2 / 2;
                maxLength = length2;
            }
            
        }
        
        return s.substring(start, end + 1);
    }
    
    public int expandFromCenter(String s, int start, int end) {
        while (start >= 0 && end < s.length() && s.charAt(start) == s.charAt(end)) {
            start --;
            end ++;
        }
        
        return (end - 1) - (start + 1) + 1;
    }
}
