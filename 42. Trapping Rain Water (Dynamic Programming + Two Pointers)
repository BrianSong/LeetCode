Given n non-negative integers representing an elevation map where the width of each bar is 1, 
compute how much water it is able to trap after raining.


The above elevation map is represented by array [0,1,0,2,1,0,1,3,2,1,2,1]. 
In this case, 6 units of rain water (blue section) are being trapped. Thanks Marcos for contributing this image!

Example:

Input: [0,1,0,2,1,0,1,3,2,1,2,1]
Output: 6


Solution: -------------------------------------- Dynamic Programming ------------------- https://www.youtube.com/watch?v=8BHqSdwyODs
------------------------------------------------ O(n) T, O(n) S
class Solution(object):
    def trap(self, height):
        """
        :type height: List[int]
        :rtype: int
        """
        if not height:
            return 0 
        left_max = [0 for i in range(len(height))]            # left_max to record the maximum left boundary for the current position
        right_max = [0 for i in range(len(height))]           # right_max to record the maximum right boundary for the current position
        curr_left_max, curr_right_max, res = height[0], height[-1], 0
        for i in range(1, len(left_max)):
            left_max[i] = curr_left_max
            curr_left_max = max(curr_left_max, height[i])
        for i in range(len(right_max) - 2, -1, -1):
            right_max[i] = curr_right_max
            curr_right_max = max(curr_right_max, height[i])
        for i in range(len(height)):
            curr_height = min(left_max[i], right_max[i])      # The water area's height is: min(left_max[i], right_max[i]) - height[i]
                                                              # The water area here is specifically 
                                                              # the width 1 water area for current position
            if curr_height > height[i]:
                res += (curr_height - height[i]) * 1          # * 1 => multiply the width
        return res
        
        
Solution no.2: -------------------------------------------- Two Pointers
------------------------------------------------ O(n) T, O(1) S
class Solution(object):
    def trap(self, height):
        """
        :type height: List[int]
        :rtype: int
        """
        if not height:
            return 0
        curr_left_max, curr_right_max = height[0], height[-1]
        left, right = 0, len(height) - 1
        res = 0
        while left < right:
            curr_left_max = max(curr_left_max, height[left])
            curr_right_max = max(curr_right_max, height[right])
            if curr_left_max < curr_right_max:
                res += curr_left_max - height[left]
                left += 1
            else:
                res += curr_right_max - height[right]
                right -= 1
        return res
