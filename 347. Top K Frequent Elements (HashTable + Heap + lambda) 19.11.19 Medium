Given a non-empty array of integers, return the k most frequent elements.

Example 1:

Input: nums = [1,1,1,2,2,3], k = 2
Output: [1,2]
Example 2:

Input: nums = [1], k = 1
Output: [1]
Note:

You may assume k is always valid, 1 â‰¤ k â‰¤ number of unique elements.
Your algorithm's time complexity must be better than O(n log n), where n is the array's size.


Solution no.1: my own ------------------------------------------- HashTable + Sort by lambda
-------------------------------------------------- O(nlogn) T, O(n) S
class Solution(object):
    def topKFrequent(self, nums, k):
        """
        :type nums: List[int]
        :type k: int
        :rtype: List[int]
        """
        if not nums or k > len(nums):
            return None
        HashTable = collections.defaultdict(int)
        for num in nums:
            HashTable[num] += 1
        reslist, res = [], []
        for key in HashTable:
            reslist.append((key, HashTable[key]))
        reslist = sorted(reslist, key = lambda x: - x[1])            # Remember the syntax of lambda !!!!!!!!!!!!!!
                                                                     # key = lambda x: - x[1]
        for i in range(k):
            res.append(reslist[i][0])
        return res
        
Solution no.2: --------------------------------- Heap(priority queue) ----------------------- collections.Counter + heapq.nlargest()
------------------------------------------ O(nlogk) T, O(n) S
'''
Suppose you do a heapq.nlargest(k, it), where it is an iterable with n elements. 
It first constructs a min heap with the first k elements of it. => O(logk) T
Then, for the rest n-k elements, if they are bigger than the root, it takes the root out, puts the new element, and shifts it down. 
At the end, the complexity is O(log(k) * (n-k)) == O(nlogk)
'''
class Solution(object):
    def topKFrequent(self, nums, k):
        """
        :type nums: List[int]
        :type k: int
        :rtype: List[int]
        """
        count = collections.Counter(nums)                          # when nums = [1,1,1,2,2,3] => count = Counter({1: 3, 2: 2, 3: 1})
        return heapq.nlargest(k, c, key = lambda x: c[x])          # In Python there is a method nlargest in heapq library: 
                                                                   # heapq.nlargest(n, iterable[, key]):
                                                                   # Return a list with the n largest elements from the dataset 
                                                                   # defined by iterable. 
                                                                   # key, if provided, specifies a function of one argument 
                                                                   # and we use lambda here, the element to compare is c[x] => frequency
                                                                   
                                                                   
Solution no.3: -------------------------------------- A clearer version of solution no.2
------------------------------------------ O(nlogk) T, O(n) S
class Solution(object):
    def topKFrequent(self, nums, k):
        """
        :type nums: List[int]
        :type k: int
        :rtype: List[int]
        """
        if not nums:
            return None
        count = collections.Counter(nums)
        pq = []
        for num in set(nums):
            heapq.heappush(pq, (count[num], num))
            if len(pq) > k:
                heapq.heappop(pq)
        res = []
        for item in pq:
            res.append(item[1])
        return res
