Given a linked list and a value x, partition it such that all nodes less than x come before nodes greater than or equal to x.

You should preserve the original relative order of the nodes in each of the two partitions.

Example:

Input: head = 1->4->3->2->5->2, x = 3
Output: 1->2->2->4->3->5

Solution: --------------------------------------------------------- https://www.youtube.com/watch?v=TARvjokaGxg
# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution(object):
    def partition(self, head, x):
        dummynode = ListNode(0)             # For linked list problem, a dummynode is usually created to point to the head node 
        dummynode.next = head
        left = dummynode                    # Here, three pointers are used, left, pre and curr
                                            # left points to the boundary line, 
                                            # curr points to the current check node, pre points before it
  
        pre = dummynode
        curr = head
        while curr:
            if pre == left:                 # Speical case 
                if curr.val >= x:
                    pre = pre.next
                    curr = curr.next
                else:
                    pre = pre.next
                    curr = curr.next
                    left = left.next
            else:                           # Normal case
                if curr.val >= x:
                    pre = pre.next
                    curr = curr.next
                else:
                    pre.next = curr.next
                    curr.next = left.next
                    left.next = curr
                    curr = pre.next
                    left = left.next
        return dummynode.next
        """
        :type head: ListNode
        :type x: int
        :rtype: ListNode
        """
