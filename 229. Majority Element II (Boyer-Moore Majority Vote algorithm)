Given an integer array of size n, find all elements that appear more than âŒŠ n/3 âŒ‹ times.

Note: The algorithm should run in linear time and in O(1) space.

Example 1:

Input: [3,2,3]
Output: [3]
Example 2:

Input: [1,1,1,3,3,2,2,2]
Output: [1,2]

Solution: ----------------------------------------------- Boyer-Moore Majority Vote algorithm
'''
The essential concepts is you keep a counter for the majority number X. 
If you find a number Y that is not X, the current counter should deduce 1. 
The reason is that if there is 5 X and 4 Y, there would be one (5-4) more X than Y. 
This could be explained as "4 X being paired out by 4 Y".

And since the requirement is finding the majority for more than ceiling of [n/3], 
the answer would be less than or equal to two numbers. So we can modify the algorithm to maintain two counters for two majorities.
'''
class Solution(object):
    def majorityElement(self, nums):
        """
        :type nums: List[int]
        :rtype: List[int]
        """
        if len(nums) == 0: return None
        candidate1, candidate2, count1, count2 = -1, -2, 0, 0
        for n in nums:
            if n == candidate1:
                count1 += 1
            elif n == candidate2:
                count2 += 1
            elif count1 == 0:
                candidate1, count1 = n, 1                                                # count should be updated as well
            elif count2 == 0:
                candidate2, count2 = n, 1
            else:
                count1, count2 = count1 - 1, count2 - 1
        return [n for n in [candidate1, candidate2] if nums.count(n) > len(nums) / 3]
