Given n non-negative integers representing the histogram's bar height where the width of each bar is 1, 
find the area of largest rectangle in the histogram.

 


Above is a histogram where width of each bar is 1, given height = [2,1,5,6,2,3].

 


The largest rectangle is shown in the shaded area, which has area = 10 unit.

 

Example:

Input: [2,1,5,6,2,3]
Output: 10


Solution no.1: ------------------------- O(n^2) time, O(1) space ----------------- https://www.youtube.com/watch?v=KkJrGxuQtYo
class Solution(object):
    def largestRectangleArea(self, heights):
        """
        :type heights: List[int]
        :rtype: int
        """
        res = 0
        for i in range(len(heights)):                                       # Loop over all histograms to find the largest rectangle
            if i != len(heights) - 1 and heights[i + 1] >= heights[i]:      # If the later histogram is higher than it,
                                                                            # do not need to consider this histogram,
                                                                            # because the latter rectangle must be larger than current 
                                                                            # => wider width and higher height
                continue
            else:                                                           # Need also to consider the corner case: the last histogram
                width, minheight = 1, float('inf')
                for j in range(i, -1, -1):
                    minheight = min(minheight, heights[j])
                    res = max(res, minheight * width)
                    width += 1
        return res
        
        
Solution no.2: ------------------------------------ Stack solution maybe followed up in the future
