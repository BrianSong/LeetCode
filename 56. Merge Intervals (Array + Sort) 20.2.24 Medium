Given a collection of intervals, merge all overlapping intervals.

Example 1:

Input: [[1,3],[2,6],[8,10],[15,18]]
Output: [[1,6],[8,10],[15,18]]
Explanation: Since intervals [1,3] and [2,6] overlaps, merge them into [1,6].
Example 2:

Input: [[1,4],[4,5]]
Output: [[1,5]]
Explanation: Intervals [1,4] and [4,5] are considered overlapping.
NOTE: input types have been changed on April 15, 2019. Please reset to default code definition to get new method signature.

Solution no.1: ------------------------------------------------------------------------ my own
------------------------------------------- O(n^2) T due to "del" takes O(n), O(1) S
class Solution(object):
    def merge(self, intervals):
        """
        :type intervals: List[List[int]]
        :rtype: List[List[int]]
        """
        if not intervals:
            return None
        intervals.sort()
        idx = 0
        while idx <= len(intervals) - 2:                       # in case "i + 1" below will bring index error
            if intervals[idx][1] >= intervals[idx + 1][0]:     # do not need to check intervals[i][0] >= intervals[i + 1][0] because
                                                               # the intervals has already been sorted before
                new = [min(intervals[idx][0], intervals[idx + 1][0]), max(intervals[idx][1], intervals[idx + 1][1])]
                intervals[idx] = new
                del intervals[idx + 1]
            else:
                idx += 1
        return intervals
       
Solution no.2: ---------------------------- faster ---------------------------------- https://www.youtube.com/watch?v=0aaCHSYzSVs
-------------------------------------------------------- O(nlogn) T, O(n) S
class Solution(object):
    def merge(self, intervals):
        """
        :type intervals: List[List[int]]
        :rtype: List[List[int]]
        """
        if len(intervals) == 0:
            return None
        res, start, end, i = [], [], [], 0
        for interval in intervals:
            start.append(interval[0])
            end.append(interval[1])
        start.sort()
        end.sort()
        while i < len(intervals):
            st = start[i]
            while i + 1 <= len(intervals) - 1 and end[i] >= start[i + 1]:    # means there exist overlap and we need to find the new
                                                                             # end point of the current interval
                                                                             # IMPORTANT !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
                                                                             # Here is "while" not "if" !!!!!!!!!!!!!!!!!!!!!!!!!!!!
                                                                             # and MUST add "i + 1 <= len(intervals) - 1" to avoid error
                i += 1
            ed = end[i]
            new = [st, ed]
            res.append(new)
            i += 1
        return res



Java Version:
class Solution {
    public int[][] merge(int[][] intervals) {
        List<int[]> res = new ArrayList<>();
        if (intervals == null || intervals.length == 0 || intervals[0].length == 0) {
            return res.toArray(new int[res.size()][2]);
        }
        List<Integer> start = new ArrayList<>();
        List<Integer> end = new ArrayList<>();
        for (int i = 0; i < intervals.length; i ++) {
            start.add(intervals[i][0]);
            end.add(intervals[i][1]);
        }
        Collections.sort(start);
        Collections.sort(end);
        int i = 0;
        while (i < intervals.length) {
            int newStart = start.get(i);
            while (i + 1 < intervals.length && end.get(i) >= start.get(i + 1)) {
                i ++;
            }
            int newEnd = end.get(i);
            res.add(new int[]{newStart, newEnd});
            i ++;
        }
        return res.toArray(new int[res.size()][2]);
    }
}
