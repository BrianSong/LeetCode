Alice has a hand of cards, given as an array of integers.

Now she wants to rearrange the cards into groups so that each group is size W, and consists of W consecutive cards.

Return true if and only if she can.

 

Example 1:

Input: hand = [1,2,3,6,2,3,4,7,8], W = 3
Output: true
Explanation: Alice's hand can be rearranged as [1,2,3],[2,3,4],[6,7,8].
Example 2:

Input: hand = [1,2,3,4,5], W = 4
Output: false
Explanation: Alice's hand can't be rearranged into groups of 4.
 

Constraints:

1 <= hand.length <= 10000
0 <= hand[i] <= 10^9
1 <= W <= hand.length


Solution: my own O(MlogM + MW) T and O(N) S where M is the number of different cards
class Solution(object):
    def isNStraightHand(self, hand, W):
        """
        :type hand: List[int]
        :type W: int
        :rtype: bool
        """
        if len(hand) % W != 0:
            return False
        counter = collections.Counter(hand)
        l = [[value, freq] for value, freq in counter.items()]
        l.sort(key = lambda x: x[0])
        deque = collections.deque(l)
        while deque:
            start = deque[0][0]
            for i in range(W):                                        # If W is very large, this code will TLE.
                curr = start + i
                if i >= len(deque) or deque[i][0] != curr:
                    return False
                else:
                    deque[i][1] -= 1
            while deque and deque[0][1] == 0:
                deque.popleft()
        return True
        
        
Solution no.2: ------------- Simpler O(MlogM + MW) T
class Solution(object):
    def isNStraightHand(self, hand, W):
        """
        :type hand: List[int]
        :type W: int
        :rtype: bool
        """
        if len(hand) % W != 0:
            return False
        c = collections.Counter(hand)
        for i in sorted(c):
            if c[i] > 0:
                curr_reduce = c[i]
                for j in range(W):
                    c[i + j] -= curr_reduce
                    if c[i + j] < 0:
                        return False
        
        return True
        
'''
What if W is huge, should we cut off card on by one?
'''
Solution no.3: 
# May follow up in the future.
