Given a non-negative index k where k ≤ 33, return the kth index row of the Pascal's triangle.

Note that the row index starts from 0.


In Pascal's triangle, each number is the sum of the two numbers directly above it.

Example:

Input: 3
Output: [1,3,3,1]
Follow up:

Could you optimize your algorithm to use only O(k) extra space?

Solution no.1(my own):
class Solution(object):
    def getRow(self, rowIndex):
        res = [[1]* (i + 1) for i in range(rowIndex + 1)]
        for i in range(2, rowIndex + 1):
            for j in range(1, i):
                res[i][j] = res[i - 1][j - 1] + res[i - 1][j]
        return res[rowIndex]
        """
        :type rowIndex: int
        :rtype: List[int]
        """

Solution no.2: O(k) space
class Solution(object):
    def getRow(self, rowIndex):
        res = []
        for i in range(1, rowIndex + 2):
            res.append(1)                       # 确保每一行都有足够的1来改变，且[j] 不会out of range
            for j in range(i - 2, 0, -1):
                res[j] += res[j - 1]            # As we know, res[i][j] = res[i - 1][j - 1] + res[i - 1][j], in this O(k)
                                                # space complexity, res[j] is updated using the previous res[j] and res[j - 1]
        return res
        """
        :type rowIndex: int
        :rtype: List[int]
        """
