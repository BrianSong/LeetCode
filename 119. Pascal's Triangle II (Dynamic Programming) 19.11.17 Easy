Given a non-negative index k where k ≤ 33, return the kth index row of the Pascal's triangle.

Note that the row index starts from 0.


In Pascal's triangle, each number is the sum of the two numbers directly above it.

Example:

Input: 3
Output: [1,3,3,1]
Follow up:

Could you optimize your algorithm to use only O(k) extra space?

Solution: --------------------------------------- Dynamic Programming
------------------------------------------------- O(n) T, O(k) S
class Solution(object):
    def getRow(self, rowIndex):
        """
        :type rowIndex: int
        :rtype: List[int]
        """
        res = []
        for i in range(rowIndex + 1):
            res.append(1)                         # 确保每一行都有足够的1来改变，且[j] 不会out of range
            for j in range(len(res) - 2, 0, -1):  # Why backward? Because the element behind will not affact the element front,
                                                  # But the element front can affact the element behind
                res[j] += res[j - 1]              # As we know, res[i][j] = res[i - 1][j - 1] + res[i - 1][j], in this O(k)
                                                  # space complexity, res[j] is updated using the previous res[j] and res[j - 1]
        return res
