Write a program to solve a Sudoku puzzle by filling the empty cells.

A sudoku solution must satisfy all of the following rules:

Each of the digits 1-9 must occur exactly once in each row.
Each of the digits 1-9 must occur exactly once in each column.
Each of the the digits 1-9 must occur exactly once in each of the 9 3x3 sub-boxes of the grid.
Empty cells are indicated by the character '.'.


A sudoku puzzle...


...and its solution numbers marked in red.

Note:

The given board contain only digits 1-9 and the character '.'.
You may assume that the given Sudoku puzzle will have a single unique solution.
The given board size is always 9x9.


Solution no.1: -------------------------------------------------------- Backtracking
-------------------------------------------------------- O(9^m) T: m represents the number of blanks to be filled in, O(m) S
class Solution(object):
    def solveSudoku(self, board):
        """
        :type board: List[List[str]]
        :rtype: None Do not return anything, modify board in-place instead.
        """
        self.board = board                                                    # Set the board to global variable easy to refer to 
        self.solve()
    
    def findUnassigned(self):                                                 # Find the next '.' to be filled in
        for i in range(9):
            for j in range(9):
                if self.board[i][j] == ".":
                    return i, j
        return -1, -1
    
    def solve(self):                                                          # Basic helper function
        row, col = self.findUnassigned()
        if row == -1 and col == -1:                                           # Base case: means all '.' has been filled, we are done!
            return True
        for num in ["1", "2", "3", "4", "5", "6", "7", "8", "9"]:
            if self.checkVaild(row, col, num):                                # If after check, the current filled in is valid
                self.board[row][col] = num          
                if self.solve():                                              # We fill in the number in and use self.solve to solve the
                    return True                                               # the newest Sudoku and jump into the next recursion
                else:                                                         # if the later recursions tell us the current filled 
                                                                              # is not workable, 
                    self.board[row][col] = "."                                # We remove the current fill in 
                                                                              # and try next number in [1,9]
        return False                                                          # If try all the number in [1, 9] and still not workable,
                                                                              # then return False to the upper recursion
    
    def checkVaild(self, row, col, num):                                      # Check if the preparing filling in is valid or not
        for i in range(9):
            if self.board[row][i] == num or self.board[i][col] == num:        # Check 横竖
                return False
        boxStartRow, boxStartCol = (row / 3) * 3, (col / 3) * 3               # Very important to remember: boxStartRow and boxStartCol
        for i in range(boxStartRow, boxStartRow + 3):                         # Check 3*3 sub-boxes
            for j in range(boxStartCol, boxStartCol + 3):
                if self.board[i][j] == num:
                    return False
        return True
        
        
Solution no.2: -------------------------------------------------- my own and FASTER !!!!
import collections
def sudoku_solve(board):
      # Check the edge cases
      if len(board) < 9 or len(board[0]) < 9:
        return False
      row_Hash = collections.defaultdict(set)                       # The reason why my solution is FASTER, 
                                                                    # I build three Hash for O(1) check valid, instead of the upper
                                                                    # O(9 * 9) check valid
      col_Hash = collections.defaultdict(set)
      box_Hash = collections.defaultdict(set)
      for i in range(len(board)):
        for j in range(len(board[0])):
          if board[i][j] in row_Hash[i] and board[i][j] != '.':
            return False
          row_Hash[i].add(board[i][j])
      for j in range(len(board[0])):
        for i in range(len(board)):
          if board[i][j] in col_Hash[j] and board[i][j] != '.':
            return False
          col_Hash[j].add(board[i][j])
      for k in range(9):
        for i in range(3):
          for j in range(3):
            if board[i + 3*(k / 3)][j + 3*(k % 3)] in box_Hash[k] and board[i + 3*(k / 3)][j + 3*(k % 3)] != '.':
              return False
            box_Hash[k].add(board[i + 3*(k / 3)][j + 3*(k % 3)])
      return helper(board, row_Hash, col_Hash, box_Hash)



def helper(board, row_Hash, col_Hash, box_Hash):
      # Base case: board being all filled, return True
      r, c = check_next_unassign(board)                            # Very very clever, check_next_unassign !!!
      print r, c
      if r == -1 and c == -1:
        print board
        return True
      if r / 3 == 0:
        if c / 3 == 0:
          k = 0
        elif c / 3 == 1:
          k = 1
        elif c / 3 == 2:
          k = 2
      elif r / 3 == 1:
        if c / 3 == 0:
          k = 3
        elif c / 3 == 1:
          k = 4
        elif c / 3 == 2:
          k = 5
      else:
        if c / 3 == 0:
          k = 6
        elif c / 3 == 1:
          k = 7
        elif c / 3 == 2:
          k = 8

      for num in [1, 2, 3, 4, 5, 6, 7, 8, 9]:
        if not str(num) in row_Hash[r] and not str(num) in col_Hash[c] and not str(num) in box_Hash[k]:
          board[r][c] = str(num)
          row_Hash[r].add(str(num))
          col_Hash[c].add(str(num))
          box_Hash[k].add(str(num))
          if self.helper(board, row_Hash, col_Hash, box_Hash):
              return True
          board[r][c] = '.'
          row_Hash[r].remove(str(num))
          col_Hash[c].remove(str(num))
          box_Hash[k].remove(str(num))
      return False
  


def check_next_unassign(board):
      for i in range(len(board)):
        for j in range(len(board[0])):
          if board[i][j] == '.':
            return i, j
      return -1, -1
