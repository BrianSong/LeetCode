Given a non-empty list of words, return the k most frequent elements.

Your answer should be sorted by frequency from highest to lowest. If two words have the same frequency, 
then the word with the lower alphabetical order comes first.

Example 1:
Input: ["i", "love", "leetcode", "i", "love", "coding"], k = 2
Output: ["i", "love"]
Explanation: "i" and "love" are the two most frequent words.
    Note that "i" comes before "love" due to a lower alphabetical order.
Example 2:
Input: ["the", "day", "is", "sunny", "the", "the", "the", "sunny", "is", "is"], k = 4
Output: ["the", "is", "sunny", "day"]
Explanation: "the", "is", "sunny" and "day" are the four most frequent words,
    with the number of occurrence being 4, 3, 2 and 1 respectively.
Note:
You may assume k is always valid, 1 ≤ k ≤ number of unique elements.
Input words contain only lowercase letters.
Follow up:
Try to solve it in O(n log k) time and O(n) extra space.
Solution no.1: ------------------------------------ my own, but have no idea how to analyze the time and space complexity...
--------------------------------------------------- Seem like O(n) * (Onlogn or Onlogn + k) T O(n) S, does it really that big?
class Solution(object):
    def topKFrequent(self, words, k):
        """
        :type words: List[str]
        :type k: int
        :rtype: List[str]
        """
        if not words:
            return None
        HashTable = collections.defaultdict(int)
        for word in words:
            HashTable[word] += 1
        l = [None] * (len(words) + 1)                         # Use the index to indicate the frequency
        for word, f in HashTable.items():
            if not l[f]:
                l[f] = [word]
            else:
                l[f].append(word)
        res = []
        for i in range(len(words), 0, -1):
            if l[i] and k:
                if k >= len(l[i]):
                    l[i].sort()
                    res.extend(l[i])
                    k -= len(l[i])
                else:
                    l[i].sort()
                    for j in range(k):
                        res.append(l[i][j])
                    k = 0
        return res
        
        
  Solution no.2: ------------------------------------------ Sort with "key = lambda word: (-HashTable[word], word)"
  --------------------------------------------------------- O(NlogN) T, O(N) S
  class Solution(object):
    def topKFrequent(self, words, k):
        """
        :type words: List[str]
        :type k: int
        :rtype: List[str]
        """
        if not words:
            return None
        HashTable = collections.defaultdict(int)
        for word in words:
            HashTable[word] += 1
        res = sorted(HashTable, key = lambda word: (-HashTable[word], word))         # How to sort using two condition 
        return res[:k]

Solution no.3: ---------------------------------------------------- Heap
-------------------------------------------------------- O(N) + O(klogN) T, O(N) S
class Solution(object):
    def topKFrequent(self, words, k):
        """
        :type words: List[str]
        :type k: int
        :rtype: List[str]
        """
        if not words:
            return None
        HashTable = collections.defaultdict(int)
        for word in words:
            HashTable[word] += 1
        pq = []
        for word, f in HashTable.items():
            pq.append((-f, word))                                   # pq.append((-f, word)) and we heapify it,
                                                                    # then, -f will be the first to consider when we sort it,
                                                                    # word() - alphabetical order will be the second to consider
        heapq.heapify(pq)
        return [heapq.heappop(pq)[1] for i in range(k)]             # each of k heapq.heappop operations are O(logN).
        
        
Solution no.4: ---------------------------------------------------------- O(nlogk) with the help of heapq.nsmallest()
class Solution(object):
    def topKFrequent(self, words, k):
        """
        :type words: List[str]
        :type k: int
        :rtype: List[str]
        """
        if not words:
            return None
        counter = collections.Counter(words)
        return heapq.nsmallest(k, counter, key = lambda word: (-counter[word], word))    # Why nsmallest with (-counter[word], word))
                                                                                         # instead of 
                                                                                         # nlargest with (counter[word], word)) ???
                                                                                         # because we also want the word to be
                                                                                         # order in alphabetical from lower to higher
