Given an array nums and a value val, remove all instances of that value in-place and return the new length.

Do not allocate extra space for another array, you must do this by modifying the input array in-place with O(1) extra memory.

The order of elements can be changed. It doesn't matter what you leave beyond the new length.

Example 1:

Given nums = [3,2,2,3], val = 3,

Your function should return length = 2, with the first two elements of nums being 2.

It doesn't matter what you leave beyond the returned length.
Example 2:

Given nums = [0,1,2,2,3,0,4,2], val = 2,

Your function should return length = 5, with the first five elements of nums containing 0, 1, 3, 0, and 4.

Note that the order of those five elements can be arbitrary.

It doesn't matter what values are set beyond the returned length.
Clarification:

Confused why the returned value is an integer but your answer is an array?

Note that the input array is passed in by reference, which means modification to the input array will be known to the caller as well.

Internally you can think of this:

// nums is passed in by reference. (i.e., without making a copy)
int len = removeElement(nums, val);

// any modification to nums in your function would be known by the caller.
// using the length returned by your function, it prints the first len elements.
for (int i = 0; i < len; i++) {
    print(nums[i]);
}

Solution: Two pointer
class Solution(object):
    """
    :type nums: List[int]
    :type val: int
    :rtype: int
    """
    def removeElement(self, nums, val):
        start, end = 0, len(nums) - 1   
        while start <= end:                                    # IMPORTANT !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
                                                               # Instead of "start < end", we use "start <= end" !!!!!!!!!!!!
                                                               # When the start == end, there is one last element need to be considered
                                                               # If the last element == val: start will remain the same,
                                                               # and we can return it as the length instead of an index
                                                               # If the last element != val: start will increase by 1
                                                               # then now, we return start = start + 1 which is the length we want !!!!
            if nums[start] == val:                             # When the start element is the same as the target value,
                                                               # we swap it with the last element in the nums
                                                               # and we reduce the end by 1 since we know the last element now is 
                                                               # useless to us.
                nums[start], nums[end] = nums[end], nums[start]
                end -= 1
            else:                                              # If the value does not match, we increase the start by 1,
                                                               # since this element is also useless to us for analysing 
                start += 1
        return start                                           # By setting "while start <= end", we can directly return start
                                                               # as the length instead of start + 1



Solution no.2: --------------------------------- Use "while start < end:"
class Solution(object):
    def removeElement(self, nums, val):
        """
        :type nums: List[int]
        :type val: int
        :rtype: int
        """
        if not nums:
            return 0
        left, right = 0, len(nums) - 1
        while left < right:
            if nums[left] == val:
                nums[left], nums[right] = nums[right], nums[left]
                right -= 1
            else:
                left += 1
        return left + 1 if nums[left] != val else left
