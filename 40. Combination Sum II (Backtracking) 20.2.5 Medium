Given a collection of candidate numbers (candidates) and a target number (target), 
find all unique combinations in candidates where the candidate numbers sums to target.

Each number in candidates may only be used once in the combination.

Note:

All numbers (including target) will be positive integers.
The solution set must not contain duplicate combinations.
Example 1:

Input: candidates = [10,1,2,7,6,1,5], target = 8,
A solution set is:
[
  [1, 7],
  [1, 2, 5],
  [2, 6],
  [1, 1, 6]
]
Example 2:

Input: candidates = [2,5,2,1,2], target = 5,
A solution set is:
[
  [1,2,2],
  [5]
]

Solution: ------------------------------------------------------------ Backtracking
------------------------------------------------------------ O(len(candidate) ^ (target / min(candidate))) T, len(candidate) is
------------------------------------------------------------ the possible step we may take at each recursion, 
------------------------------------------------------------ and target / min(candidate) is the maximum recursion depth
------------------------------------------------------------ O(target / min(candidate)) S for the recursion depth
class Solution(object):
    def combinationSum2(self, candidates, target):                 # The candidates now contain duplicate elements
        candidates.sort()                                          # Need to sort the list first
        res = []
        self.backtracking_help(candidates, target, [], res)
        return res
        """
        :type candidates: List[int]
        :type target: int
        :rtype: List[List[int]]
        """
    def backtracking_help(self, candidates, target, path, res):
        if target < 0:
            return
        if target == 0:
            res.append(path[:])
            return
        for i, candidate in enumerate(candidates):
            if i > 0 and candidates[i] == candidates[i - 1]:      # Solve the duplicate choose of the element
                                                                  # The key point of this question,
                                                                  # We can have [1,1,6] for target == 8
                                                                  # but we cannot have two [1,7] for target == 8
                                                                  # So, the key is that, we do not care if the element is the same
                                                                  # between upper and lower recursion,
                                                                  # what we want is that at the current recursion 
                                                                  # "for i, candidate in enumerate(candidates)",
                                                                  # We cannot use two same element !!!!!!!!!!!!!!!!!!!!!!!!!!
                continue
            else:
                self.backtracking_help(candidates[i+1:], target - candidate, path + [candidate], res)   # Solve the choose from itself
        
        '''
        IMPORTANT!!!!!!!!!!!!!!!!!!!!!!!!
        IF WE PUT THESE TWO IF STATEMENT INTO THE FOR LOOP, IT WILL FAIL.
        Because we use candidates[i+1:]
        For example, [2,5,2,1,2]   5
        if we put this two if statment inside the for loop, res.append(path[:]), here path is [5] will not be executed,
        because in the next for loop, it will not be executed, since candidates is None now,
        so, we must put these two for loop statment outside this unexecuted for loop, so that our res will append [5]
        '''

Java Version:
class Solution {
    public List<List<Integer>> combinationSum2(int[] candidates, int target) {
        if (candidates == null || candidates.length == 0) {
            return null;
        }
        
        Arrays.sort(candidates);
        
        List<List<Integer>> res = new ArrayList<>();
        
        backtracking(candidates, target, 0, new ArrayList<>(), res);
        return res;
    }
    
    public void backtracking(int[] candidates, int target, int index, List<Integer> path, List<List<Integer>> res) {
        if (target == 0) {
            res.add(new ArrayList<>(path));
            return;
        } else if (target < 0 || index >= candidates.length) {
            return;
        } else {
            for (int i = index; i < candidates.length; i ++) {
                if (i != index && candidates[i] == candidates[i - 1]) {
                    continue;
                }
                path.add(candidates[i]);
                backtracking(candidates, target - candidates[i], i + 1, path, res);
                path.remove(path.size() - 1);
            }
            return;
        }
    }
}
