Implement next permutation, which rearranges numbers into the lexicographically next greater permutation of numbers.

If such arrangement is not possible, it must rearrange it as the lowest possible order (ie, sorted in ascending order).

The replacement must be in-place and use only constant extra memory.

Here are some examples. Inputs are in the left-hand column and its corresponding outputs are in the right-hand column.

1,2,3 → 1,3,2
3,2,1 → 1,2,3
1,1,5 → 1,5,1


Solution: ---------------------------------------- Array ------------------------- https://www.youtube.com/watch?v=w58KFpW5Pjk
-------------------------------------------------- O(n) T, O(1) S
class Solution(object):
    def nextPermutation(self, nums):
        """
        :type nums: List[int]
        :rtype: None Do not return anything, modify nums in-place instead.
        """
        if not nums:
            return None
        replace = len(nums) - 2                                             # Step no.1: find the element that needed to be replaced
        while replace >= 0:
            if nums[replace] < nums[replace + 1]:
                break
            replace -= 1
        if replace < 0:                                                     # Special case: e.x.: 5 4 3 2 1
            self.reverse(nums, 0, len(nums) - 1)
        swap = replace + 1                                                  # Normal cases e.x. 1 2 6 4 2, the replace is 2
                                                                            # Step no.2: Find the closest larger element for replacing
                                                                            # here, the swap is 4
        while swap < len(nums):
            if nums[swap] > nums[replace]:
                swap += 1
            else:
                break
        swap -= 1
        nums[replace], nums[swap] = nums[swap], nums[replace]               # Step no.3: 1 2 6 4 2 becomes 1 4 6 2 2
        self.reverse(nums, replace + 1, len(nums) - 1)
    
    def reverse(self, nums, start, end):                                    # Step no.4: reverse(sort) the 6 2 2 to 2 2 6
        while start <= end:
            nums[start], nums[end] = nums[end], nums[start]
            start += 1
            end -= 1


Java Version:
class Solution {
    public void nextPermutation(int[] nums) {
        int swapPos1 = -1;
        for (int i = nums.length - 1; i >= 0; i --) {
            if (i != nums.length - 1 && nums[i] < nums[i + 1]) {
                swapPos1 = i;
                break;
            }
        }
        
        if (swapPos1 == -1) {
            swap(nums, 0, nums.length - 1);
            return;
        }
        
        int swapPos2 = -1;
        
        for (int i = swapPos1 + 1; i < nums.length; i ++) {
            if (nums[i] > nums[swapPos1]) {
                swapPos2 = i;
                continue;
            } else {
                break;
            }
        }
        
        int temp = nums[swapPos1];
        nums[swapPos1] = nums[swapPos2];
        nums[swapPos2] = temp;
        
        swap(nums, swapPos1 + 1, nums.length - 1);
        
    }
    
    
    public void swap(int[] nums, int left, int right) {
        while (left <= right) {
            int temp = nums[left];
            nums[left] = nums[right];
            nums[right] = temp;
            left ++;
            right --;
        }
    }
}
