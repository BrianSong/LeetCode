Given n pairs of parentheses, write a function to generate all combinations of well-formed parentheses.

For example, given n = 3, a solution set is:

[
  "((()))",
  "(()())",
  "(())()",
  "()(())",
  "()()()"
]

Solution: ------------------------------------------------------- Backtrakcing
------------------------------- Too complicate time and space complexity, but a very good way for general explanation is shown below:

'''
The way I like to think about the runtime of backtracking algorithms is O(b^d), 
where b is the branching factor and d is the maximum depth of recursion.

Backtracking is characterized by a number of decisions b that can be made at each level of recursion. 
If you visualize the recursion tree, this is the number of children each internal node has. 
You can also think of b as standing for "base", which can help you remember that b is the base of the exponential.

If we can make b decisions at each level of recursion, and we expand the recursion tree to d levels 
(ie: each path has a length of d), then we get b^d nodes. 
Since backtracking is exhaustive and must visit each one of these nodes, the runtime is O(b^d).
'''

class Solution(object):
    def generateParenthesis(self, n):
        """
        :type n: int
        :rtype: List[str]
        """
        if not n:
            return None
        res = []
        self.backtracking(n, 0, 0, "", res)
        return res
        
    def backtracking(self, n, left, right, curr, res):
        if left == right == n:
            res.append(curr)
            return
        if right > left:                                    # For the output string to be valid, 
                                                            # number of ")" must be larger than number of "(",
                                                            # else it will create string like "())"
            return
        if left > n or right > n:
            return
        self.backtracking(n, left + 1, right, curr + '(', res)
        self.backtracking(n, left, right + 1, curr + ')', res)


Java Version:
class Solution {
    public List<String> generateParenthesis(int n) {
        if (n <= 0) {
            return null;
        }
        List<String> res = new ArrayList<>();
        backtracking(0, 0, n, "", res);
        return res;
    }
    
    public void backtracking(int left, int right, int n, String path, List<String> res) {
        if (left == right && left == n) {
            res.add(path);
            return;
        } else if (right > left || left > n || right > n) {
            return;
        } else {
            backtracking(left + 1, right, n, path + "(", res);
            backtracking(left, right + 1, n, path + ")", res);
            return;
        }
    }
}
