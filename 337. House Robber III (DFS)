The thief has found himself a new place for his thievery again. There is only one entrance to this area, called the "root." 
Besides the root, each house has one and only one parent house. 
After a tour, the smart thief realized that "all houses in this place forms a binary tree". 
It will automatically contact the police if two directly-linked houses were broken into on the same night.

Determine the maximum amount of money the thief can rob tonight without alerting the police.

Example 1:

Input: [3,2,3,null,3,null,1]

     3
    / \
   2   3
    \   \ 
     3   1

Output: 7 
Explanation: Maximum amount of money the thief can rob = 3 + 3 + 1 = 7.
Example 2:

Input: [3,4,5,1,3,null,1]

     3
    / \
   4   5
  / \   \ 
 1   3   1

Output: 9
Explanation: Maximum amount of money the thief can rob = 4 + 5 = 9.

Solution: ------------------------------------------- DFS ----------------------------- https://www.youtube.com/watch?v=-i2BFAU25Zk
----------------------------------------------------- O(n) T, O(n) S
'''
Every clearly that for the tree data type, we will use DFS to traverse the entire tree.
DFS: RECURSION ------------ TREE:儿树也是一样的树结构
What we should consider is what should be passed around inside the recursion function,
each node will also have 2 circumstances: rob or not rob,
so, we may need to create a local list - currrob[0 , 1] 
where index 0 stores the value when this node is robbed, index 1 stores the value when this node is not robbed.
The inside logic is:
currrob[0] = left[1] + right[1] + root.val
currrob[1] = max(left[0], left[1]) + max(right[0], right[1])
Exiting condition happens when root is None, it will return [0, 0] which meets the expectation when we test it
'''
# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution(object):
    def rob(self, root):
        """
        :type root: TreeNode
        :rtype: int
        """
        if not root:
            return 0
        return max(self.dfs(root))
    
    def dfs(self, root):
        if not root:
            return [0, 0]
        left = self.dfs(root.left)       # inside a recursion function where the function returns
                                         # a value, it is very common to assign the whole function
                                         # into a variable like this, where we can ulitize the
                                         # imformation from the next level of recursion
        right = self.dfs(root.right)
        currrob = [0, 0]
        currrob[0] = left[1] + right[1] + root.val
        currrob[1] = max(left[0], left[1]) + max(right[0], right[1])
        return currrob
