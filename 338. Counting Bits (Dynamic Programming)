Given a non negative integer number num. 
For every numbers i in the range 0 ≤ i ≤ num calculate the number of 1's in their binary representation and return them as an array.

Example 1:

Input: 2
Output: [0,1,1]
Example 2:

Input: 5
Output: [0,1,1,2,1,2]
Follow up:

It is very easy to come up with a solution with run time O(n*sizeof(integer)). 
But can you do it in linear time O(n) /possibly in a single pass?
Space complexity should be O(n).
Can you do it like a boss? Do it without using any builtin function like __builtin_popcount in c++ or in any other language.


Solution: -------------------------------------------------------- Dynamic Programming
'''
i & (i-1) drops the lowest set bit. 
For example: i = 14, its binary representation is 1110, so i-1 is 1101, i&(i-1) = 1100, 
the number of "1"s in its binary representation decrease one, so we can get ret[i] = ret[i&(i-1)] + 1. 
'''
class Solution(object):
    def countBits(self, num):
        """
        :type num: int
        :rtype: List[int]
        """
        res = [0 for i in range(num + 1)]
        for i in range(1, num + 1):                     # i must start from 1 to cope with (i- 1) in the equation
            res[i] = res[i & (i - 1)] + 1
        return res
