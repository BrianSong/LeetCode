Find the length of the longest substring T of a given string (consists of lowercase letters only) 
such that every character in T appears no less than k times.

Example 1:

Input:
s = "aaabb", k = 3

Output:
3

The longest substring is "aaa", as 'a' is repeated 3 times.
Example 2:

Input:
s = "ababbc", k = 2

Output:
5

The longest substring is "ababb", as 'a' is repeated 2 times and 'b' is repeated 3 times.


Solution: --------------------------------------- Divide and Conquer
------------------------------------------------- O(n^2) T, O(n) S
class Solution(object):
    def longestSubstring(self, s, k):
        """
        :type s: str
        :type k: int
        :rtype: int
        """
        if len(s) < k:                                                        # Base case
            return 0
        counter = collections.Counter(s)
        c = min(counter, key = counter.get)                                   # Find out the least appear character
        if counter[c] >= k:                                                   # if the least appear character appears more than k times
                                                                              # then the whole string is ok
            return len(s)
        else:
            max_length = float('-inf')
            for sub in s.split(c):
                max_length = max(max_length, self.longestSubstring(sub, k))   # Switch your mindset
                                                                              # the question asks us to find the at least appear k times
                                                                              # But actually, the length depends on
                                                                              # the characters appear less than k times,
                                                                              # We need to use it as the pivot to splict the string
                                                                              # because it will always be too infrequent 
                                                                              # and thus can't be part of any ok substring
            return max_length
        


Java Version:
class Solution {
    public int longestSubstring(String s, int k) {
        if (s == null || s.length() < k) {
            return 0;
        }
        char splitChar = s.charAt(0);
        int minFreq = Integer.MAX_VALUE;
        Map<Character, Integer> charFreq = new HashMap<>();
        for (char c : s.toCharArray()) {
            charFreq.put(c, charFreq.getOrDefault(c, 0) + 1);
        }
        for (char c : s.toCharArray()) {
            if (charFreq.get(c) < minFreq) {
                minFreq = charFreq.get(c);
                splitChar = c;
            }
        }
        if (minFreq >= k) {
            return s.length();
        }
        int subResMax = Integer.MIN_VALUE;
        for (String subString : s.split(Character.toString(splitChar))) {
            int currRes = longestSubstring(subString, k);
            if (currRes > subResMax) {
                subResMax = currRes;
            }
        }
        return subResMax;
     }
}
