Design a data structure that supports the following two operations:

void addWord(word)
bool search(word)
search(word) can search a literal word or a regular expression string containing only letters a-z or .. A 
. means it can represent any one letter.

Example:

addWord("bad")
addWord("dad")
addWord("mad")
search("pad") -> false
search("bad") -> true
search(".ad") -> true
search("b..") -> true
Note:
You may assume that all words are consist of lowercase letters a-z.


Solution: --------------------------------------------------------------- Trie + Dict + Backtracking
---------------------------------------------- O(N) T where N is the total length for all word (worst cases: go through the entire trie)
---------------------------------------------- O(N) S
class TrieNode(object):
    def __init__(self):
        self.children = collections.defaultdict(TrieNode)
        self.isEnd = False

class WordDictionary(object):

    def __init__(self):
        """
        Initialize your data structure here.
        """
        self.root = TrieNode()
        

    def addWord(self, word):
        """
        Adds a word into the data structure.
        :type word: str
        :rtype: None
        """
        curr = self.root
        for c in word:
            curr = curr.children[c]
        curr.isEnd = True
        

    def search(self, word):
        """
        Returns if the word is in the data structure. A word could contain the dot character '.' to represent any one letter.
        :type word: str
        :rtype: bool
        """
        self.res = False
        self.backtracking(self.root, word)
        return self.res
    
    def backtracking(self, currnode, word):
        if len(word) == 0:                                                # IMPORTANT !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
                                                                          # CANNOT be "if len(word) == 0 and currnode.isEnd == True:"
                                                                          # In this way, the return will not be execuated
                                                                          # for cases when len(word) == 0 but currnode.isEnd == False
                                                                          # then, the function will proceed and word[0] will bring error
            if currnode.isEnd == True:                                     
                self.res = True                                           # Only for the cases that proceed to the end 
                                                                          # and fulfill all requirements
            return                                                        # return directly to end the current function
        if word[0] == '.':
            for children in currnode.children.values():                   # Check every children node for proceeding
                                                                          # REMEMBER the node are in the values() !!!!!!!!!!!!!!!!!!!!!
                                                                          # the char are in the keys() !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
                self.backtracking(children, word[1:])
        else:
            if word[0] in currnode.children:
                self.backtracking(currnode.children[word[0]], word[1:])


# Your WordDictionary object will be instantiated and called as such:
# obj = WordDictionary()
# obj.addWord(word)
# param_2 = obj.search(word)
