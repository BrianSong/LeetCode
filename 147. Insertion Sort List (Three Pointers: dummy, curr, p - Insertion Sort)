Algorithm of Insertion Sort:

Insertion sort iterates, consuming one input element each repetition, and growing a sorted output list.
At each iteration, insertion sort removes one element from the input data, 
finds the location it belongs within the sorted list, and inserts it there.
It repeats until no input elements remain.

Example 1:

Input: 4->2->1->3
Output: 1->2->3->4
Example 2:

Input: -1->5->3->4->0
Output: -1->0->3->4->5

Solution: -------------------------------------------------------------- Three Pointers: dummy, curr, p - Insertion Sort
---------------------------------------------- O(n^2) T, O(1) S
def insertionSortList(self, head):
    ## we need three pointer here, p is the position where cur is gonna inser after
    ## cur is the element we need to compare each time
    ## dummy is to return the sorted list, and in case head is changed
    p = dummy = ListNode(float('inf'))
    cur = dummy.next = head

    ## traverse to the last second node 
    while cur and cur.next:
        ## compare cur ndoe with next node val
        ## if the sequence is sorted already, keep looking ahead
        ## continue is a must here for the next iteration ------------- continue -> jump out of from this level of while loop into next
        next_val = cur.next.val                                    # IMPORTANT !!!!!!!!!!!!!!!!!!!!!!!!!!
        if cur.val <= next_val:                                    # Instead of considering curr to be the moved element,
            cur = cur.next                                         # We consider curr.next, in this way, we do not need to stroe "prev"
            continue

        ## if there is an element which is smaller than previous sequence
        ## we need to find a proper postion to insert this small element--- by reset the p to dummy and do the comparison all over again
        if p.next.val > next_val:
            p = dummy

        ## p stops at the element which is smaller than next_val
        ## eg 1,2,5,6,7,4, 8,9 --> since 4 is bigger than 1, 2
        ## we use p.next.val to compare, hence p would point element 2
        ## update: cur would point at 7
        while p.next.val <= next_val: ------------------------------------ keep updating p pointer for insertion position
            p = p.next                                             # The same, comparing p.next.val instead of p.val

        ## exchange, insertion
        ## for the above example, p.next should be cur.next which is 4
        ## cur.next.next should concatenate the elements in the sorted sequence, in this case 5,6,7
        ## cur.next should be cur.next.next which is 8
        ## update: basically it's an operation to find the proper position of the cur.next.val and reconstruct the list
        ## update2: if we break the syntax down, it becomes:
        ## new = cur.next ---------------------------------------------- I prefer to use this format
        ## cur.next = new.next
        ## new.next = p.next
        ## p.next = new
        
        p.next, cur.next.next, cur.next =cur.next, p.next, cur.next.next

    return dummy.next 
