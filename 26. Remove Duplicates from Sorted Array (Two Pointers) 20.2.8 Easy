Given a sorted array nums, remove the duplicates in-place such that each element appear only once and return the new length.

Do not allocate extra space for another array, you must do this by modifying the input array in-place with O(1) extra memory.

Example 1:

Given nums = [1,1,2],

Your function should return length = 2, with the first two elements of nums being 1 and 2 respectively.

It doesn't matter what you leave beyond the returned length.
Example 2:

Given nums = [0,0,1,1,1,2,2,3,3,4],

Your function should return length = 5, with the first five elements of nums being modified to 0, 1, 2, 3, and 4 respectively.

It doesn't matter what values are set beyond the returned length.

Solution: ------------------------------------------------- Two pointers
------------------------------------------------------ O(n) T, O(1) S
class Solution(object):
    def removeDuplicates(self, nums):
        slow, fast = 1, 1                      # Slow and Fast pointer. Not all two pointer is start and end
                                               # We do not start from the 0 here because nums[0] must be itself unique
                                               # Fast pointer here is used to look every elements
                                               # Slow pointer here is to mark the position for next new element's insertion
        while fast < len(nums):
            if nums[fast] == nums[slow - 1]:   # IMPORTANT !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
                                               # Should be "nums[fast] == nums[slow - 1]" instead of "nums[fast] == nums[fast - 1]"
                                               # We care about nums[slow - 1] instead of nums[fast - 1                                
                fast += 1
            else:
                nums[slow] = nums[fast]        # Not swapping, but let nums[slow] == nums[fast] since we need to insert the different
                                               # value in place
                slow += 1
                fast += 1
        return slow                            # Why return slow instead of slow + 1 ????
                                               # Because only the elements before the slow are sure to be unique,
                                               # the slow itself is not
        """
        :type nums: List[int]
        :rtype: int
        """

Java Version:
class Solution {
    public int removeDuplicates(int[] nums) {
        if (nums == null || nums.length == 0) {
            return 0;
        }
        
        int slow = 1, fast = 1;
        
        while (fast < nums.length) {
            if (nums[fast] == nums[slow - 1]) {
                fast ++;
            } else {
                nums[slow]= nums[fast];
                slow ++;
                fast ++;
            }
        }
        
        return slow;
    }
}
