Implement a trie with insert, search, and startsWith methods.

Example:

Trie trie = new Trie();

trie.insert("apple");
trie.search("apple");   // returns true
trie.search("app");     // returns false
trie.startsWith("app"); // returns true
trie.insert("app");   
trie.search("app");     // returns true
Note:

You may assume that all inputs are consist of lowercase letters a-z.
All inputs are guaranteed to be non-empty strings.


Solution: ------------------------------------------------- Prefix Tree implemented by Dictionary
class TrieNode(object):
    def __init__(self):
        self.children = collections.defaultdict(TrieNode)       # collections.defaultdic() not collection.defaultdic()
                                                                # use collections.defaultdic(TrieNode) is easy to insert new node
                                                                # if the self.children[char] is not existed, it will return a 
                                                                # new TrieNode type value(return a new node then) instead return a error
        self.isEndofWord = False
    
class Trie(object):

    def __init__(self):
        """
        Initialize your data structure here.
        """
        self.root = TrieNode()                                     # IMPORTANT !!!!!!!!!!!!!!!!!!!
                                                                   # Remember to add () !!!!!!!!!
        

    def insert(self, word):
        """
        Inserts a word into the trie.
        :type word: str
        :rtype: None
        """
        curr = self.root
        for char in word:
            curr = curr.children[char]                             # for example: apple, apply
                                                                   # rootnode.children = {a : Trienode_a}
                                                                   # Trienode_a.children = {p: Trienode_p}
                                                                   # Trienode_p.children = {p: Trienode_p}
                                                                   # Trienode_p.children = {l: Trienode_l}
                                                                   # Trienode_l.children = {y: Trienode_y,
                                                                                            e: Trienode_e}
        curr.isEndofWord = True
            
        

    def search(self, word):
        """
        Returns if the word is in the trie.
        :type word: str
        :rtype: bool
        """
        curr = self.root
        for char in word:
            if not char in curr.children:                         # 每一个node都有属于自己的self.children dictionary
                return False
            curr = curr.children[char]
        return curr.isEndofWord                                   # return curr.isEndofWord instead of direct True as in startsWith()
        

    def startsWith(self, prefix):
        """
        Returns if there is any word in the trie that starts with the given prefix.
        :type prefix: str
        :rtype: bool
        """
        curr = self.root
        for char in prefix:
            if not char in curr.children:
                return False
            curr = curr.children[char]
        return True
            
# Your Trie object will be instantiated and called as such:
# obj = Trie()
# obj.insert(word)
# param_2 = obj.search(word)
# param_3 = obj.startsWith(prefix)
