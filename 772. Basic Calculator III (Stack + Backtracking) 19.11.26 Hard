Implement a basic calculator to evaluate a simple expression string.

The expression string may contain open ( and closing parentheses ), the plus + or minus sign -, non-negative integers and empty spaces .

The expression string contains only non-negative integers, +, -, *, / operators , open ( and closing parentheses ) and empty spaces . 
The integer division should truncate toward zero.

You may assume that the given expression is always valid. All intermediate results will be in the range of [-2147483648, 2147483647].

Some examples:

"1 + 1" = 2
" 6-4 / 2 " = 4
"2*(5+5*2)/3+(6/2+8)" = 21
"(2+6* 3+5- (3*14/7+2)*5)+3"=-12
 

Note: Do not use the eval built-in library function.


Solution: ----------------------------------------------------------- Stack + Backtracking: because we have '()' here !!!
----------------------------------------------------------------- O(n) T and S
class Solution(object):
    def calculate(self, s):
        """
        :type s: str
        :rtype: int
        """
        s += '+'
        stack, number, preOp = [], 0, '+'
        i = 0
        while i <= len(s) - 1:                                      # Here, instead of "for i in range()", we use a while loop
                                                                    # because for cases like "()", i may jump more than 1 unit
            if s[i].isdigit():
                number = number * 10 + int(s[i])
                i += 1
            elif s[i] == '(':
                left = 1
                j = i + 1
                while left > 0:                                     # Why we do this instead of just find the ')'?
                                                                    # Consider the cases like '(9 + (3 * 2))'
                    if s[j] == '(':
                        left += 1
                    elif s[j] == ')':
                        left -= 1
                    j += 1
                number = self.calculate(s[i + 1:j - 1])             # Backtracking
                i = j - 1
            elif not s[i].isspace():
                if preOp == '+':
                    stack.append(number)
                elif preOp == '-':
                    stack.append(-number)
                elif preOp == '*':
                    stack.append(stack.pop() * number)
                elif preOp == '/':
                    stack.append(int(stack.pop() / float(number)))
                preOp = s[i]
                number = 0
                i += 1
            else:
                i += 1
        return sum(stack)
