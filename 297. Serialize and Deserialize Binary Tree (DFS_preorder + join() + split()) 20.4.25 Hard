Serialization is the process of converting a data structure or object into a sequence of bits 
so that it can be stored in a file or memory 
buffer, or transmitted across a network connection link to be reconstructed later in the same or another computer environment.

Design an algorithm to serialize and deserialize a binary tree. 
There is no restriction on how your serialization/deserialization algorithm should work. 
You just need to ensure that a binary tree can be serialized to a string 
and this string can be deserialized to the original tree structure.

Example: 

You may serialize the following tree:

    1
   / \
  2   3
     / \
    4   5

as "[1,2,3,null,null,4,5]"
Clarification: The above format is the same as how LeetCode serializes a binary tree. 
You do not necessarily need to follow this format, so please be creative and come up with different approaches yourself.

Note: Do not use class member/global/static variables to store states. Your serialize and deserialize algorithms should be stateless.


Solution: -------------------------------------------------- DFS_preorder
------------------------------------------------------------ O(n) T, O(n) S
# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Codec:

    def serialize(self, root):
        """Encodes a tree to a single string.
        
        :type root: TreeNode
        :rtype: str
        """
        def dfs_preorder(root):
            if root:
                data.append(str(root.val))           # Must covert it into a string so that ' '.join() will not throw an error
                                                     # join() function take a list with string elements and convert it into a string
                dfs_preorder(root.left)
                dfs_preorder(root.right) 
            else:
                data.append('#')                     # Very smart way to store None node, as long as we do not continue recursion
                                                     # from here, we can stop from here and only store the None node we want
        data = []
        dfs_preorder(root)
        return ' '.join(data)                                            # join()

    def deserialize(self, data):
        """Decodes your encoded data to tree.
        
        :type data: str
        :rtype: TreeNode
        """
        def dedfs():
            currval = queue.popleft()                                    # After take one element, we just popleft it
            if currval == '#':
                return None
            else:
                currnode = TreeNode(currval)
                currnode.left = dedfs()
                currnode.right = dedfs()
                return currnode
        queue = collections.deque()                                      # In order to have O(1) popleft
        for item in data.split():                                        # split() takes a string and convert it into a list with str
            queue.append(item)
        return dedfs()
        
        

# Your Codec object will be instantiated and called as such:
# codec = Codec()
# codec.deserialize(codec.serialize(root))




Java Version:
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Codec {
    
    public String serializeHelper(TreeNode root, String path) {
        if (root == null) {
            path += "null,";
        } else {
            path += Integer.toString(root.val) + ",";
            path = serializeHelper(root.left, path);
            path = serializeHelper(root.right, path);
        }
        return path;
    }

    // Encodes a tree to a single string.
    public String serialize(TreeNode root) {
        return serializeHelper(root, "");
    }
    
    public TreeNode deserializeHelper(Deque<String> pathDeque) {
        if (pathDeque.peekFirst().equals("null")) {
            pathDeque.pollFirst();
            return null;
        }
        TreeNode currNode = new TreeNode(Integer.valueOf(pathDeque.peekFirst()));
        pathDeque.pollFirst();
        currNode.left = deserializeHelper(pathDeque);
        currNode.right = deserializeHelper(pathDeque);
        return currNode;
    }
    
    // Decodes your encoded data to tree.
    public TreeNode deserialize(String data) {
        String[] pathArray = data.split(",");
        Deque<String> pathDeque = new ArrayDeque<>(Arrays.asList(pathArray));
        return deserializeHelper(pathDeque);
    }
}

// Your Codec object will be instantiated and called as such:
// Codec codec = new Codec();
// codec.deserialize(codec.serialize(root));
