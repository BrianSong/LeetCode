Given a binary tree, return the preorder traversal of its nodes' values.

Example:

Input: [1,null,2,3]
   1
    \
     2
    /
   3

Output: [1,2,3]
Follow up: Recursive solution is trivial, could you do it iteratively?

Solution: ----------------------------------------------------------- DFS
class Solution(object):
    def preorderTraversal(self, root):
        res = []
        self.traver_help(res, root)
        return res
        """
        :type root: TreeNode
        :rtype: List[int]
        """
    def traver_help(self, res, root):
         if not root is None:
            res.append(root.val)
            self.traver_help(res, root.left)
            self.traver_help(res, root.right)
'''
Tomorrow is midterm,
So just refresh the resursion solution for DFS traversal,
the iterative solution will be followed up later on.
'''

Solution: ----------------------------------------------------------- Stack
class Solution(object):
    def preorderTraversal(self, root):
        res, stack = [], [root]
        while stack:
            node = stack.pop()
            if node:
                res.append(node.val)             # Append the node.val first -> preorder
                stack.append(node.right)         # Make use of the First in Last out property for stack,
                                                 # So, we append node.right before append node.left
                stack.append(node.left)          # In the next interation, node = node.left and continue
        return res
                
        """
        :type root: TreeNode
        :rtype: List[int]
        """
