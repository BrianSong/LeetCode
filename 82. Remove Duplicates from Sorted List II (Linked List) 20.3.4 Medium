Given a sorted linked list, delete all nodes that have duplicate numbers, leaving only distinct numbers from the original list.

Example 1:

Input: 1->2->3->3->4->4->5
Output: 1->2->5
Example 2:

Input: 1->1->1->2->3
Output: 2->3

Solution: ------------------------------------------------------ O(n) T, O(1) S
# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution(object):
    def deleteDuplicates(self, head):
        """
        :type head: ListNode
        :rtype: ListNode
        """
        dummynode = pre = ListNode(0)                           # pre pointer is used to reshape the linked list into the new form
        dummynode.next = head
        while head and head.next:
            if head.val == head.next.val:
                while head.next and head.val == head.next.val:  # Another while loop: the KEY -> Keep updating head 
                                                                # to the last one of the duplicate elements
                                                                # since pre-loop if head.next is not None, 
                                                                # then next loop the head must be not None
                    head = head.next
                head = head.next
                pre.next = head
            else:
                pre = pre.next
                head = head.next
        return dummynode.next


Java Version:
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
class Solution {
    public ListNode deleteDuplicates(ListNode head) {
        if (head == null) {
            return head;
        }
        ListNode dummyNode = new ListNode(0);
        dummyNode.next = head;
        ListNode prevNode = dummyNode, currNode = head;
        while (currNode != null && currNode.next != null) {
            if (currNode.val == currNode.next.val) {
                while (currNode != null && currNode.next != null && currNode.val == currNode.next.val) {
                    currNode = currNode.next;
                }
                currNode = currNode.next;
                prevNode.next = currNode;
            } else {
                prevNode.next = currNode;
                prevNode = currNode;
                currNode = currNode.next;
            }
        }
        return dummyNode.next;
    }
}
