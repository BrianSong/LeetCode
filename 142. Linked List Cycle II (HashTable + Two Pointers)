Given a linked list, return the node where the cycle begins. If there is no cycle, return null.

To represent a cycle in the given linked list, we use an integer pos which represents the position (0-indexed) in the linked list 
where tail connects to. If pos is -1, then there is no cycle in the linked list.

Note: Do not modify the linked list.

 

Example 1:

Input: head = [3,2,0,-4], pos = 1
Output: tail connects to node index 1
Explanation: There is a cycle in the linked list, where tail connects to the second node.


Example 2:

Input: head = [1,2], pos = 0
Output: tail connects to node index 0
Explanation: There is a cycle in the linked list, where tail connects to the first node.


Example 3:

Input: head = [1], pos = -1
Output: no cycle
Explanation: There is no cycle in the linked list.


 

Follow up:
Can you solve it without using extra space?


Solution no.1: -------------------------------------------------- HashTable
# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution(object):
    def detectCycle(self, head):
        """
        :type head: ListNode
        :rtype: ListNode
        """
        if head is None: return None
        HashTable = {}
        while head.next:
            if not head in HashTable:
                HashTable[head] = 0
                head = head.next
            else:
                return head                          # Only difference compared to 141. Linked List Cycle, here we need to return a node
                                                     # in 141. Linked List Cycle, we only need to return True or False

        return None
        
        
Solution no.2: ----------------------------------- Two Pointers ---------------------------------- without extra space
# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution(object):
    def detectCycle(self, head):
        """
        :type head: ListNode
        :rtype: ListNode
        """
        slow, fast = head, head
        while fast and fast.next:       # The first part checks if a cycle exists or not
            slow = slow.next
            fast = fast.next.next
            if slow == fast:
                break
        else:
            return None
        '''
        The logic behind the 2nd part is like this:

        Consider the following linked list, where E is the cylce entry and X, the crossing point of fast and slow.
        H: distance from head to cycle entry E
        D: distance from E to X
        L: cycle length
                          _____
                         /     \
        head_____H______E       \
                        \       /
                         X_____/   
        
    
        If fast and slow both start at head, when fast catches slow, slow has traveled H+D and fast 2(H+D). {since slow = slow.next
        Assume fast has traveled n loops in the cycle, we have:                                             and fast = fast.next.next}
        2H + 2D = H + D + nL  -->  H + D = nL  --> H = nL - D
        Thus if two pointers start from head and X, respectively, one first reaches E, the other also reaches E. 
        '''
        while head != slow:             # The second part determines the entry of the cycle if it exists
            head = head.next
            slow = slow.next
        return head
