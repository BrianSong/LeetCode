Given a binary tree, return the inorder traversal of its nodes' values.

Example:

Input: [1,null,2,3]
   1
    \
     2
    /
   3

Output: [1,3,2]

Solution no.1: ---------------------------------------------------------------- DFS
----------------------------------------------------------- O(n) T, O(n) S
class Solution(object):
    def inorderTraversal(self, root):
        res = [] # res means result here
        self.helper(root, res) # Create a DFS help function to do the trick for me
        return res
    
    def helper(self, root, res):
        if root is None:
            return
        else:
            self.helper(root.left, res)
            res.append(root.val)
            self.helper(root.right, res)
        """
        :type root: TreeNode
        :rtype: List[int]
        """
'''
Case analyse:
      1
     / \
    2   5
   / \
  3   4
Inorder traversal: Only all the left child of the node is marked down or left child node is None, can the node be marked down
Let's analyse this inorder traversal:
At each level of the binary tree,
there are 3 things to be done, so obviously this is a recursion case
1. Continued jump into the leftest node
2. Marked down the root node in the center
3. Jumped into the right branch
We can convert this 3 operations into python code:
   self.helper(root.left)
   res.append(root)
   self.helper(root.right)
Whenever we encounter a recursion case, we must add one existing condition to exit
Here, let's look at the graph, The 3 operations is not applicable for the last level of the tree where root.left is None and must return
So, the existing condition is if root is None: return
'''
'''
This principle also applies to preorder and postorder:
In preoder:
   res.append(root)
   self.helper(root.left)
   self.helper(root.right)
In postorder:
   self.helper(root.left)
   self.helper(root.right)
   res.append(root)
'''


Solutino no.2: --------------------------------------------------------- Stack
----------------------------------------------------------- O(n) T, O(n) S
# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution(object):
    def inorderTraversal(self, root):
        """
        :type root: TreeNode
        :rtype: List[int]
        """
        if not root:
            return None
        stack, res = [], []
        curr = root
        while curr or stack:                 # 两个条件满足一个都可以继续进行iteration
            while curr:                      # Use while loop to get the current leftest node
                stack.append(curr)
                curr = curr.left
            pop_element = stack.pop()        # After break out of this while loop, the curr is None and pop_element is the leftest node
                                             # we append it to the res and continue to check its right subtree
                                             # if all the left subtree node has been traversed, we can return back to the top by stack
            res.append(pop_element.val)
            curr = pop_element.right
        return res
