There are 2N people a company is planning to interview. The cost of flying the i-th person to city A is costs[i][0], 
and the cost of flying the i-th person to city B is costs[i][1].

Return the minimum cost to fly every person to a city such that exactly N people arrive in each city.

 

Example 1:

Input: [[10,20],[30,200],[400,50],[30,20]]
Output: 110
Explanation: 
The first person goes to city A for a cost of 10.
The second person goes to city A for a cost of 30.
The third person goes to city B for a cost of 50.
The fourth person goes to city B for a cost of 20.

The total minimum cost is 10 + 30 + 50 + 20 = 110 to have half the people interviewing in each city.
 

Note:

1 <= costs.length <= 100
It is guaranteed that costs.length is even.
1 <= costs[i][0], costs[i][1] <= 1000


Solution: ---------------------------------------------------- Greedy + Sort
--------------------------------------------------------- O(nlogn) T, O(1) S
class Solution(object):
    def twoCitySchedCost(self, costs):
        """
        :type costs: List[List[int]]
        :rtype: int
        """
        if not costs:
            return 0
        costs.sort(key = lambda x: x[0] - x[1])      # The company would pay anyway : price_A to send a person to the city A, 
                                                     # or price_B to send a person to the city B. 
                                                     # By sending the person to the city A, the company would lose price_A - price_B, 
                                                     # which could negative or positive.
                                                     # To optimize the total costs, let's sort the persons by price_A - price_B 
                                                     # and then send the first n persons to the city A, 
                                                     # and the others to the city B, because this way the company costs are minimal.
                                                     # CONSIDER two input together !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
        res = 0
        for i in range(len(costs)):
            if i < len(costs) / 2:
                res += costs[i][0]
            else:
                res += costs[i][1]
        return res



Java Version:
class Solution {
    public int twoCitySchedCost(int[][] costs) {
        Arrays.sort(costs, (o1, o2) -> (o1[0] - o1[1]) - (o2[0] - o2[1]));
        int total = 0;
        int n = costs.length / 2;
        for (int i = 0; i < n; i ++) {
            total += costs[i][0] + costs[i + n][1];
        }
        return total;
    }
}
