You are a professional robber planning to rob houses along a street. Each house has a certain amount of money stashed. 
All houses at this place are arranged in a circle. That means the first house is the neighbor of the last one. 
Meanwhile, adjacent houses have security system connected and 
it will automatically contact the police if two adjacent houses were broken into on the same night.

Given a list of non-negative integers representing the amount of money of each house, 
determine the maximum amount of money you can rob tonight without alerting the police.

Example 1:

Input: [2,3,2]
Output: 3
Explanation: You cannot rob house 1 (money = 2) and then rob house 3 (money = 2),
             because they are adjacent houses.
Example 2:

Input: [1,2,3,1]
Output: 4
Explanation: Rob house 1 (money = 1) and then rob house 3 (money = 3).
             Total amount you can rob = 1 + 3 = 4.
             
Solution: ------------------------------------------ Dynamic Programming -------- https://www.youtube.com/watch?v=-i2BFAU25Zk
---------------------------------------------------- O(n) T, O(n) S
'''
The tricky part of this follow up question is the house now is formed into a circle,
so, if we choose to rob the first house, we can no longer rob the last house.
If we continue to use only two status variable r[n] and nr[n], we will face a problem:
according to the previous transformation function, the r[n] may also rob the first house, and we cannot just simply eliminate it,
because we may lose data.
So, what we gonna do here is to change the previous 2 status variable into 4 status variables,
which are r_rf, nr_rf, r_nrf, nr_nrf.
And we can continue to use the transformation function as usual.
Finial, the r_rf[n] will be elimated because it rob the first house and last house,
However, the r_rf[n - 1] is saved for caculating the nr_rf[n], so, we are not losing any data here.
'''
class Solution(object):
    def rob(self, nums):
        if nums is None or len(nums) == 0:
            return 0
        if len(nums) == 1:                                      # len(nums) == 1 也要考虑，because we eliminate r_rf[n]
            return nums[0]
        r_rf, nr_rf, r_nrf, nr_nrf = [0] * len(nums), [0] * len(nums), [0] * len(nums), [0] * len(nums)
        r_rf[0], nr_rf[0], r_nrf[0], nr_nrf[0] = nums[0], 0, 0, 0
        for i in range(1, len(nums)):                           # IMPORTANT !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
                                                                # "for i in range(1, len(nums)):" not "for i in range(len(nums))" !!!!!
                                                                # After the initialization, 
                                                                # very important not to wipe out our own init !!!!!!!!!!!!!!!!!
            r_rf[i] = nr_rf[i - 1] + nums[i]
            nr_rf[i] = max(nr_rf[i - 1], r_rf[i - 1])
            r_nrf[i] = nr_nrf[i - 1] + nums[i]
            nr_nrf[i] = max(nr_nrf[i - 1], r_nrf[i - 1])
        return max(nr_rf[len(nums) - 1], r_nrf[len(nums) - 1])  # We do not need to compare nr_nrf[n] because it must be smaller or
                                                                # equal to nr_rf[n]
        """
        :type nums: List[int]
        :rtype: int
        """
  
  
Java Version:
class Solution {
    public int rob(int[] nums) {
        if (nums == null || nums.length == 0) {
            return 0;
        }
        if (nums.length == 1) {
            return nums[0];
        }
        int[] r_rf = new int[nums.length];
        int[] nr_rf = new int[nums.length];
        int[] r_nrf = new int[nums.length];
        int[] nr_nrf = new int[nums.length];
        r_rf[0] = nums[0]; 
        nr_rf[0] = 0; 
        r_nrf[0] = 0;
        nr_nrf[0] = 0;
        for (int i = 1; i < nums.length; i ++) {
            r_rf[i] = nr_rf[i - 1] + nums[i];
            nr_rf[i] = Math.max(r_rf[i - 1], nr_rf[i - 1]);
            r_nrf[i] = nr_nrf[i - 1] + nums[i];
            nr_nrf[i] = Math.max(r_nrf[i - 1], nr_nrf[i - 1]);
        }
        return Math.max(Math.max(r_nrf[nums.length - 1], nr_nrf[nums.length - 1]), nr_rf[nums.length - 1]);
    }
}
